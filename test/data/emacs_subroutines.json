{
    "stats": {
        "constants_count": 2,
        "subroutines_count": 1605
    },
    "subroutines": [
        {
            "args": [
                "x",
                "y"
            ],
            "attributes": null,
            "doc": "Return remainder of X divided by Y.\nBoth must be integers or markers.",
            "fnname": "Frem",
            "intspec": "0",
            "lname": "%",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Srem"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return product of any number of arguments, which are numbers or markers.\nusage: (* &rest NUMBERS-OR-MARKERS)",
            "fnname": "Ftimes",
            "intspec": "0",
            "lname": "*",
            "maxargs": -1,
            "minargs": 0,
            "path": "data.c",
            "sname": "Stimes"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return sum of any number of arguments, which are numbers or markers.\nusage: (+ &rest NUMBERS-OR-MARKERS)",
            "fnname": "Fplus",
            "intspec": "0",
            "lname": "+",
            "maxargs": -1,
            "minargs": 0,
            "path": "data.c",
            "sname": "Splus"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Negate number or subtract numbers or markers and return the result.\nWith one arg, negates it.  With more than one arg,\nsubtracts all but the first from the first.\nusage: (- &optional NUMBER-OR-MARKER &rest MORE-NUMBERS-OR-MARKERS)",
            "fnname": "Fminus",
            "intspec": "0",
            "lname": "-",
            "maxargs": -1,
            "minargs": 0,
            "path": "data.c",
            "sname": "Sminus"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Divide number by divisors and return the result.\nWith two or more arguments, return first argument divided by the rest.\nWith one argument, return 1 divided by the argument.\nThe arguments must be numbers or markers.\nusage: (/ NUMBER &rest DIVISORS)",
            "fnname": "Fquo",
            "intspec": "0",
            "lname": "/",
            "maxargs": -1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Squo"
        },
        {
            "args": [
                "num1",
                "num2"
            ],
            "attributes": null,
            "doc": "Return t if first arg is not equal to second arg.  Both must be numbers or markers.",
            "fnname": "Fneq",
            "intspec": "0",
            "lname": "/=",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sneq"
        },
        {
            "args": [
                "number"
            ],
            "attributes": null,
            "doc": "Return NUMBER plus one.  NUMBER may be a number or a marker.\nMarkers are converted to integers.",
            "fnname": "Fadd1",
            "intspec": "0",
            "lname": "1+",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sadd1"
        },
        {
            "args": [
                "number"
            ],
            "attributes": null,
            "doc": "Return NUMBER minus one.  NUMBER may be a number or a marker.\nMarkers are converted to integers.",
            "fnname": "Fsub1",
            "intspec": "0",
            "lname": "1-",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssub1"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if each arg (a number or marker), is less than the next arg.\nusage: (< NUMBER-OR-MARKER &rest NUMBERS-OR-MARKERS)",
            "fnname": "Flss",
            "intspec": "0",
            "lname": "<",
            "maxargs": -1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Slss"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if each arg (a number or marker) is less than or equal to the next.\nusage: (<= NUMBER-OR-MARKER &rest NUMBERS-OR-MARKERS)",
            "fnname": "Fleq",
            "intspec": "0",
            "lname": "<=",
            "maxargs": -1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sleq"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if args, all numbers or markers, are equal.\nusage: (= NUMBER-OR-MARKER &rest NUMBERS-OR-MARKERS)",
            "fnname": "Feqlsign",
            "intspec": "0",
            "lname": "=",
            "maxargs": -1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Seqlsign"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if each arg (a number or marker) is greater than the next arg.\nusage: (> NUMBER-OR-MARKER &rest NUMBERS-OR-MARKERS)",
            "fnname": "Fgtr",
            "intspec": "0",
            "lname": ">",
            "maxargs": -1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sgtr"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if each arg (a number or marker) is greater than or equal to the next.\nusage: (>= NUMBER-OR-MARKER &rest NUMBERS-OR-MARKERS)",
            "fnname": "Fgeq",
            "intspec": "0",
            "lname": ">=",
            "maxargs": -1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sgeq"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Used during Emacs initialization to scan the `etc/DOC...' file.\nThis searches the `etc/DOC...' file for doc strings and\nrecords them in function and variable definitions.\nThe function takes one argument, FILENAME, a string;\nit specifies the file name (without a directory) of the DOC file.\nThat file is found in `../etc' now; later, when the dumped Emacs is run,\nthe same file name is found in the `doc-directory'.",
            "fnname": "Fsnarf_documentation",
            "intspec": "0",
            "lname": "Snarf-documentation",
            "maxargs": 1,
            "minargs": 1,
            "path": "doc.c",
            "sname": "Ssnarf_documentation"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Abort the current minibuffer.\nIf we are not currently in the innermost minibuffer, prompt the user to\nconfirm the aborting of the current minibuffer and all contained ones.",
            "fnname": "Fabort_minibuffers",
            "intspec": "",
            "lname": "abort-minibuffers",
            "maxargs": 0,
            "minargs": 0,
            "path": "minibuf.c",
            "sname": "Sabort_minibuffers"
        },
        {
            "args": null,
            "attributes": "noreturn",
            "doc": "Abort the command that requested this recursive edit or minibuffer input.",
            "fnname": "Fabort_recursive_edit",
            "intspec": "",
            "lname": "abort-recursive-edit",
            "maxargs": 0,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Sabort_recursive_edit"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return the absolute value of ARG.",
            "fnname": "Fabs",
            "intspec": "0",
            "lname": "abs",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sabs"
        },
        {
            "args": [
                "process",
                "seconds",
                "millisec",
                "just_this_one"
            ],
            "attributes": null,
            "doc": "Allow any pending output from subprocesses to be read by Emacs.\nIt is given to their filter functions.\nOptional argument PROCESS means to return only after output is\nreceived from PROCESS or PROCESS closes the connection.\n\nOptional second argument SECONDS and third argument MILLISEC\nspecify a timeout; return after that much time even if there is\nno subprocess output.  If SECONDS is a floating point number,\nit specifies a fractional number of seconds to wait.\nThe MILLISEC argument is obsolete and should be avoided.\n\nIf optional fourth argument JUST-THIS-ONE is non-nil, accept output\nfrom PROCESS only, suspending reading output from other processes.\nIf JUST-THIS-ONE is an integer, don't run any timers either.\nReturn non-nil if we received any output from PROCESS (or, if PROCESS\nis nil, from any process) before the timeout expired or the\ncorresponding connection was closed.",
            "fnname": "Faccept_process_output",
            "intspec": "0",
            "lname": "accept-process-output",
            "maxargs": 4,
            "minargs": 0,
            "path": "process.c",
            "sname": "Saccept_process_output"
        },
        {
            "args": [
                "filename",
                "string"
            ],
            "attributes": null,
            "doc": "Access file FILENAME, and get an error if that does not work.\nThe second argument STRING is prepended to the error message.\nIf there is no error, returns nil.",
            "fnname": "Faccess_file",
            "intspec": "0",
            "lname": "access-file",
            "maxargs": 2,
            "minargs": 2,
            "path": "fileio.c",
            "sname": "Saccess_file"
        },
        {
            "args": [
                "keymap",
                "prefix"
            ],
            "attributes": null,
            "doc": "Find all keymaps accessible via prefix characters from KEYMAP.\nReturns a list of elements of the form (KEYS . MAP), where the sequence\nKEYS starting from KEYMAP gets you to MAP.  These elements are ordered\nso that the KEYS increase in length.  The first element is ([] . KEYMAP).\nAn optional argument PREFIX, if non-nil, should be a key sequence;\nthen the value includes only maps for prefixes that start with PREFIX.",
            "fnname": "Faccessible_keymaps",
            "intspec": "0",
            "lname": "accessible-keymaps",
            "maxargs": 2,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Saccessible_keymaps"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return the inverse cosine of ARG.",
            "fnname": "Facos",
            "intspec": "0",
            "lname": "acos",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sacos"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the currently active minibuffer window, or nil if none.",
            "fnname": "Factive_minibuffer_window",
            "intspec": "0",
            "lname": "active-minibuffer-window",
            "maxargs": 0,
            "minargs": 0,
            "path": "minibuf.c",
            "sname": "Sactive_minibuffer_window"
        },
        {
            "args": [
                "start",
                "end",
                "face",
                "append",
                "object"
            ],
            "attributes": null,
            "doc": "Add the face property to the text from START to END.\nFACE specifies the face to add.  It should be a valid value of the\n`face' property (typically a face name or a plist of face attributes\nand values).\n\nIf any text in the region already has a non-nil `face' property, those\nface(s) are retained.  This is done by setting the `face' property to\na list of faces, with FACE as the first element (by default) and the\npre-existing faces as the remaining elements.\n\nIf optional fourth argument APPEND is non-nil, append FACE to the end\nof the face list instead.\n\nIf optional fifth argument OBJECT is a buffer (or nil, which means the\ncurrent buffer), START and END are buffer positions (integers or\nmarkers).  If OBJECT is a string, START and END are 0-based indices\ninto it.",
            "fnname": "Fadd_face_text_property",
            "intspec": "0",
            "lname": "add-face-text-property",
            "maxargs": 5,
            "minargs": 3,
            "path": "textprop.c",
            "sname": "Sadd_face_text_property"
        },
        {
            "args": [
                "file",
                "newname",
                "ok_if_already_exists"
            ],
            "attributes": null,
            "doc": "Give FILE additional name NEWNAME.  Both args must be strings.\nIf NEWNAME is a directory name, give FILE a like-named new name under\nNEWNAME.\n\nSignal a `file-already-exists' error if a file NEWNAME already exists\nunless optional third argument OK-IF-ALREADY-EXISTS is non-nil.\nAn integer third arg means request confirmation if NEWNAME already exists.\nThis is what happens in interactive use with M-x.",
            "fnname": "Fadd_name_to_file",
            "intspec": "fAdd name to file: \nGName to add to %s: \np",
            "lname": "add-name-to-file",
            "maxargs": 3,
            "minargs": 2,
            "path": "fileio.c",
            "sname": "Sadd_name_to_file"
        },
        {
            "args": [
                "start",
                "end",
                "properties",
                "object"
            ],
            "attributes": null,
            "doc": "Add properties to the text from START to END.\nThe third argument PROPERTIES is a property list\nspecifying the property values to add.  If the optional fourth argument\nOBJECT is a buffer (or nil, which means the current buffer),\nSTART and END are buffer positions (integers or markers).\nIf OBJECT is a string, START and END are 0-based indices into it.\nReturn t if any property value actually changed, nil otherwise.",
            "fnname": "Fadd_text_properties",
            "intspec": "0",
            "lname": "add-text-properties",
            "maxargs": 4,
            "minargs": 3,
            "path": "textprop.c",
            "sname": "Sadd_text_properties"
        },
        {
            "args": [
                "symbol",
                "watch_function"
            ],
            "attributes": null,
            "doc": "Cause WATCH-FUNCTION to be called when SYMBOL is about to be set.\n\nIt will be called with 4 arguments: (SYMBOL NEWVAL OPERATION WHERE).\nSYMBOL is the variable being changed.\nNEWVAL is the value it will be changed to.  (The variable still has\nthe old value when WATCH-FUNCTION is called.)\nOPERATION is a symbol representing the kind of change, one of: `set',\n`let', `unlet', `makunbound', and `defvaralias'.\nWHERE is a buffer if the buffer-local value of the variable is being\nchanged, nil otherwise.\n\nAll writes to aliases of SYMBOL will call WATCH-FUNCTION too.",
            "fnname": "Fadd_variable_watcher",
            "intspec": "0",
            "lname": "add-variable-watcher",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sadd_variable_watcher"
        },
        {
            "args": [
                "string",
                "collection",
                "predicate",
                "hide_spaces"
            ],
            "attributes": null,
            "doc": "Search for partial matches of STRING in COLLECTION.\n\nTest each possible completion specified by COLLECTION\nto see if it begins with STRING.  The possible completions may be\nstrings or symbols.  Symbols are converted to strings before testing,\nby using `symbol-name'.\n\nThe value is a list of all the possible completions that match STRING.\n\nIf COLLECTION is an alist, the keys (cars of elements) are the\npossible completions.  If an element is not a cons cell, then the\nelement itself is the possible completion.\nIf COLLECTION is a hash-table, all the keys that are strings or symbols\nare the possible completions.\nIf COLLECTION is an obarray, the names of all symbols in the obarray\nare the possible completions.\n\nCOLLECTION can also be a function to do the completion itself.\nIt receives three arguments: STRING, PREDICATE and t.\nWhatever it returns becomes the value of `all-completions'.\n\nIf optional third argument PREDICATE is non-nil, it must be a function\nof one or two arguments, and is used to test each possible completion.\nA possible completion is accepted only if PREDICATE returns non-nil.\n\nThe argument given to PREDICATE is either a string or a cons cell (whose\ncar is a string) from the alist, or a symbol from the obarray.\nIf COLLECTION is a hash-table, PREDICATE is called with two arguments:\nthe string key and the associated value.\n\nTo be acceptable, a possible completion must also match all the regexps\nin `completion-regexp-list' (unless COLLECTION is a function, in\nwhich case that function should itself handle `completion-regexp-list').\n\nAn obsolete optional fourth argument HIDE-SPACES is still accepted for\nbackward compatibility.  If non-nil, strings in COLLECTION that start\nwith a space are ignored unless STRING itself starts with a space.",
            "fnname": "Fall_completions",
            "intspec": "0",
            "lname": "all-completions",
            "maxargs": 4,
            "minargs": 2,
            "path": "minibuf.c",
            "sname": "Sall_completions"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of all the live threads.",
            "fnname": "Fall_threads",
            "intspec": "0",
            "lname": "all-threads",
            "maxargs": 0,
            "minargs": 0,
            "path": "thread.c",
            "sname": "Sall_threads"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Eval args until one of them yields nil, then return nil.\nThe remaining args are not evalled at all.\nIf no arg yields nil, return the last arg's value.\nusage: (and CONDITIONS...)",
            "fnname": "Fand",
            "intspec": "0",
            "lname": "and",
            "maxargs": -2,
            "minargs": 0,
            "path": "eval.c",
            "sname": "Sand"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Concatenate all the arguments and make the result a list.\nThe result is a list whose elements are the elements of all the arguments.\nEach argument may be a list, vector or string.\n\nAll arguments except the last argument are copied.  The last argument\nis just used as the tail of the new list.\n\nusage: (append &rest SEQUENCES)",
            "fnname": "Fappend",
            "intspec": "0",
            "lname": "append",
            "maxargs": -1,
            "minargs": 0,
            "path": "fns.c",
            "sname": "Sappend"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Call FUNCTION with our remaining args, using our last arg as list of args.\nThen return the value FUNCTION returns.\nWith a single argument, call the argument's first element using the\nother elements as args.\nThus, (apply \\\\='+ 1 2 \\\\='(3 4)) returns 10.\nusage: (apply FUNCTION &rest ARGUMENTS)",
            "fnname": "Fapply",
            "intspec": "0",
            "lname": "apply",
            "maxargs": -1,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sapply"
        },
        {
            "args": [
                "array",
                "idx"
            ],
            "attributes": null,
            "doc": "Return the element of ARRAY at index IDX.\nARRAY may be a vector, a string, a char-table, a bool-vector, a record,\nor a byte-code object.  IDX starts at 0.",
            "fnname": "Faref",
            "intspec": "0",
            "lname": "aref",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Saref"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is an array (string or vector).",
            "fnname": "Farrayp",
            "intspec": "0",
            "lname": "arrayp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sarrayp"
        },
        {
            "args": [
                "array",
                "idx",
                "newelt"
            ],
            "attributes": null,
            "doc": "Store into the element of ARRAY at index IDX the value NEWELT.\nReturn NEWELT.  ARRAY may be a vector, a string, a char-table or a\nbool-vector.  IDX starts at 0.",
            "fnname": "Faset",
            "intspec": "0",
            "lname": "aset",
            "maxargs": 3,
            "minargs": 3,
            "path": "data.c",
            "sname": "Saset"
        },
        {
            "args": [
                "value",
                "count"
            ],
            "attributes": null,
            "doc": "Return integer VALUE with its bits shifted left by COUNT bit positions.\nIf COUNT is negative, shift VALUE to the right instead.\nVALUE and COUNT must be integers.\nMathematically, the return value is VALUE multiplied by 2 to the\npower of COUNT, rounded down.  If the result is non-zero, its sign\nis the same as that of VALUE.\nIn terms of bits, when COUNT is positive, the function moves\nthe bits of VALUE to the left, adding zero bits on the right; when\nCOUNT is negative, it moves the bits of VALUE to the right,\ndiscarding bits.",
            "fnname": "Fash",
            "intspec": "0",
            "lname": "ash",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sash"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return the inverse sine of ARG.",
            "fnname": "Fasin",
            "intspec": "0",
            "lname": "asin",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sasin"
        },
        {
            "args": [
                "key",
                "alist",
                "testfn"
            ],
            "attributes": null,
            "doc": "Return non-nil if KEY is equal to the car of an element of ALIST.\nThe value is actually the first element of ALIST whose car equals KEY.\n\nEquality is defined by the function TESTFN, defaulting to `equal'.\nTESTFN is called with 2 arguments: a car of an alist element and KEY.",
            "fnname": "Fassoc",
            "intspec": "0",
            "lname": "assoc",
            "maxargs": 3,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sassoc"
        },
        {
            "args": [
                "key",
                "list",
                "case_fold"
            ],
            "attributes": null,
            "doc": "Like `assoc' but specifically for strings (and symbols).\n\nThis returns the first element of LIST whose car matches the string or\nsymbol KEY, or nil if no match exists.  When performing the\ncomparison, symbols are first converted to strings, and unibyte\nstrings to multibyte.  If the optional arg CASE-FOLD is non-nil, both\nKEY and the elements of LIST are upcased for comparison.\n\nUnlike `assoc', KEY can also match an entry in LIST consisting of a\nsingle string, rather than a cons cell whose car is a string.",
            "fnname": "Fassoc_string",
            "intspec": "0",
            "lname": "assoc-string",
            "maxargs": 3,
            "minargs": 2,
            "path": "minibuf.c",
            "sname": "Sassoc_string"
        },
        {
            "args": [
                "key",
                "alist"
            ],
            "attributes": null,
            "doc": "Return non-nil if KEY is `eq' to the car of an element of ALIST.\nThe value is actually the first element of ALIST whose car is KEY.\nElements of ALIST that are not conses are ignored.",
            "fnname": "Fassq",
            "intspec": "0",
            "lname": "assq",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sassq"
        },
        {
            "args": [
                "y",
                "x"
            ],
            "attributes": null,
            "doc": "Return the inverse tangent of the arguments.\nIf only one argument Y is given, return the inverse tangent of Y.\nIf two arguments Y and X are given, return the inverse tangent of Y\ndivided by X, i.e. the angle in radians between the vector (X, Y)\nand the x-axis.",
            "fnname": "Fatan",
            "intspec": "0",
            "lname": "atan",
            "maxargs": 2,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Satan"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is not a cons cell.  This includes nil.",
            "fnname": "Fatom",
            "intspec": "0",
            "lname": "atom",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Satom"
        },
        {
            "args": [
                "function",
                "file",
                "docstring",
                "interactive",
                "type"
            ],
            "attributes": null,
            "doc": "Define FUNCTION to autoload from FILE.\nFUNCTION is a symbol; FILE is a file name string to pass to `load'.\n\nThird arg DOCSTRING is documentation for the function.\n\nFourth arg INTERACTIVE if non-nil says function can be called\ninteractively.  If INTERACTIVE is a list, it is interpreted as a list\nof modes the function is applicable for.\n\nFifth arg TYPE indicates the type of the object:\n   nil or omitted says FUNCTION is a function,\n   `keymap' says FUNCTION is really a keymap, and\n   `macro' or t says FUNCTION is really a macro.\n\nThird through fifth args give info about the real definition.\nThey default to nil.\n\nIf FUNCTION is already defined other than as an autoload,\nthis does nothing and returns nil.",
            "fnname": "Fautoload",
            "intspec": "0",
            "lname": "autoload",
            "maxargs": 5,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Sautoload"
        },
        {
            "args": [
                "fundef",
                "funname",
                "macro_only"
            ],
            "attributes": null,
            "doc": "Load FUNDEF which should be an autoload.\nIf non-nil, FUNNAME should be the symbol whose function value is FUNDEF,\nin which case the function returns the new autoloaded function value.\nIf equal to `macro', MACRO-ONLY specifies that FUNDEF should only be loaded if\nit defines a macro.",
            "fnname": "Fautoload_do_load",
            "intspec": "0",
            "lname": "autoload-do-load",
            "maxargs": 3,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sautoload_do_load"
        },
        {
            "args": [
                "thread"
            ],
            "attributes": null,
            "doc": "Return the list of backtrace frames from current execution point in THREAD.\nIf a frame has not evaluated the arguments yet (or is a special form),\nthe value of the list element is (nil FUNCTION ARG-FORMS...).\nIf a frame has evaluated its arguments and called its function already,\nthe value of the list element is (t FUNCTION ARG-VALUES...).\nA &rest arg is represented as the tail of the list ARG-VALUES.\nFUNCTION is whatever was supplied as car of evaluated list,\nor a lambda expression for macro calls.",
            "fnname": "Fbacktrace_frames_from_thread",
            "intspec": "NULL",
            "lname": "backtrace--frames-from-thread",
            "maxargs": 1,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sbacktrace_frames_from_thread"
        },
        {
            "args": [
                "nframes",
                "base"
            ],
            "attributes": null,
            "doc": "Return names and values of local variables of a stack frame.\nNFRAMES and BASE specify the activation frame to use, as in `backtrace-frame'.",
            "fnname": "Fbacktrace__locals",
            "intspec": "NULL",
            "lname": "backtrace--locals",
            "maxargs": 2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sbacktrace__locals"
        },
        {
            "args": [
                "level",
                "flag"
            ],
            "attributes": null,
            "doc": "Set the debug-on-exit flag of eval frame LEVEL levels down to FLAG.\nThe debugger is entered when that frame exits, if the flag is non-nil.",
            "fnname": "Fbacktrace_debug",
            "intspec": "0",
            "lname": "backtrace-debug",
            "maxargs": 2,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Sbacktrace_debug"
        },
        {
            "args": [
                "exp",
                "nframes",
                "base"
            ],
            "attributes": null,
            "doc": "Evaluate EXP in the context of some activation frame.\nNFRAMES and BASE specify the activation frame to use, as in `backtrace-frame'.",
            "fnname": "Fbacktrace_eval",
            "intspec": "NULL",
            "lname": "backtrace-eval",
            "maxargs": 3,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Sbacktrace_eval"
        },
        {
            "args": [
                "function",
                "nframes",
                "base"
            ],
            "attributes": null,
            "doc": "Call FUNCTION on stack frame NFRAMES away from BASE.\nReturn the result of FUNCTION, or nil if no matching frame could be found.",
            "fnname": "Fbacktrace_frame_internal",
            "intspec": "NULL",
            "lname": "backtrace-frame--internal",
            "maxargs": 3,
            "minargs": 3,
            "path": "eval.c",
            "sname": "Sbacktrace_frame_internal"
        },
        {
            "args": [
                "n"
            ],
            "attributes": null,
            "doc": "Move point N characters backward (forward if N is negative).\nOn attempt to pass beginning or end of buffer, stop and signal error.\nInteractively, N is the numeric prefix argument.\nIf N is omitted or nil, move point 1 character backward.\n\nDepending on the bidirectional context, the movement may be to the\nright or to the left on the screen.  This is in contrast with\n\\\\[left-char], which see.",
            "fnname": "Fbackward_char",
            "intspec": "^p",
            "lname": "backward-char",
            "maxargs": 1,
            "minargs": 0,
            "path": "cmds.c",
            "sname": "Sbackward_char"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Move point backward over any number of chars with prefix syntax.\nThis includes chars with expression prefix syntax class (\\\\=') and those with\nthe prefix syntax flag (p).",
            "fnname": "Fbackward_prefix_chars",
            "intspec": "0",
            "lname": "backward-prefix-chars",
            "maxargs": 0,
            "minargs": 0,
            "path": "syntax.c",
            "sname": "Sbackward_prefix_chars"
        },
        {
            "args": [
                "sym"
            ],
            "attributes": null,
            "doc": "Extract, if need be, the bare symbol from SYM, a symbol.",
            "fnname": "Fbare_symbol",
            "intspec": "0",
            "lname": "bare-symbol",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sbare_symbol"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is a symbol, but not a symbol together with position.",
            "fnname": "Fbare_symbol_p",
            "intspec": "0",
            "lname": "bare-symbol-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sbare_symbol_p"
        },
        {
            "args": [
                "position"
            ],
            "attributes": null,
            "doc": "Signal a `buffer-read-only' error if the current buffer is read-only.\nIf the text under POSITION (which defaults to point) has the\n`inhibit-read-only' text property set, the error will not be raised.",
            "fnname": "Fbarf_if_buffer_read_only",
            "intspec": "0",
            "lname": "barf-if-buffer-read-only",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sbarf_if_buffer_read_only"
        },
        {
            "args": [
                "beg",
                "end",
                "base64url",
                "ignore_invalid"
            ],
            "attributes": null,
            "doc": "Base64-decode the region between BEG and END.\nReturn the length of the decoded data.\n\nNote that after calling this function, the data in the region will\nrepresent bytes, not text.  If you want to end up with text, you have\nto call `decode-coding-region' afterwards with an appropriate coding\nsystem.\n\nIf the region can't be decoded, signal an error and don't modify the buffer.\nOptional third argument BASE64URL determines whether to use the URL variant\nof the base 64 encoding, as defined in RFC 4648.\nIf optional fourth argument IGNORE-INVALID is non-nil invalid characters\nare ignored instead of signaling an error.",
            "fnname": "Fbase64_decode_region",
            "intspec": "r",
            "lname": "base64-decode-region",
            "maxargs": 4,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sbase64_decode_region"
        },
        {
            "args": [
                "string",
                "base64url",
                "ignore_invalid"
            ],
            "attributes": null,
            "doc": "Base64-decode STRING and return the result as a string.\nOptional argument BASE64URL determines whether to use the URL variant of\nthe base 64 encoding, as defined in RFC 4648.\nIf optional third argument IGNORE-INVALID is non-nil invalid characters are\nignored instead of signaling an error.",
            "fnname": "Fbase64_decode_string",
            "intspec": "0",
            "lname": "base64-decode-string",
            "maxargs": 3,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sbase64_decode_string"
        },
        {
            "args": [
                "beg",
                "end",
                "no_line_break"
            ],
            "attributes": null,
            "doc": "Base64-encode the region between BEG and END.\nThe data in the region is assumed to represent bytes, not text.  If\nyou want to base64-encode text, the text has to be converted into data\nfirst by using `encode-coding-region' with the appropriate coding\nsystem first.\n\nReturn the length of the encoded data.\n\nOptional third argument NO-LINE-BREAK means do not break long lines\ninto shorter lines.",
            "fnname": "Fbase64_encode_region",
            "intspec": "r",
            "lname": "base64-encode-region",
            "maxargs": 3,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sbase64_encode_region"
        },
        {
            "args": [
                "string",
                "no_line_break"
            ],
            "attributes": null,
            "doc": "Base64-encode STRING and return the result.\nOptional second argument NO-LINE-BREAK means do not break long lines\ninto shorter lines.",
            "fnname": "Fbase64_encode_string",
            "intspec": "0",
            "lname": "base64-encode-string",
            "maxargs": 2,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sbase64_encode_string"
        },
        {
            "args": [
                "beg",
                "end",
                "no_pad"
            ],
            "attributes": null,
            "doc": "Base64url-encode the region between BEG and END.\nReturn the length of the encoded text.\nOptional second argument NO-PAD means do not add padding char =.\n\nThis produces the URL variant of base 64 encoding defined in RFC 4648.",
            "fnname": "Fbase64url_encode_region",
            "intspec": "r",
            "lname": "base64url-encode-region",
            "maxargs": 3,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sbase64url_encode_region"
        },
        {
            "args": [
                "string",
                "no_pad"
            ],
            "attributes": null,
            "doc": "Base64url-encode STRING and return the result.\nOptional second argument NO-PAD means do not add padding char =.\n\nThis produces the URL variant of base 64 encoding defined in RFC 4648.",
            "fnname": "Fbase64url_encode_string",
            "intspec": "0",
            "lname": "base64url-encode-string",
            "maxargs": 2,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sbase64url_encode_string"
        },
        {
            "args": [
                "n"
            ],
            "attributes": null,
            "doc": "Move point to beginning of current line (in the logical order).\nWith argument N not nil or 1, move forward N - 1 lines first.\nIf point reaches the beginning or end of buffer, it stops there.\n\nThis function constrains point to the current field unless this moves\npoint to a different line from the original, unconstrained result.\nIf N is nil or 1, and a front-sticky field starts at point, the point\ndoes not move.  To ignore field boundaries bind\n`inhibit-field-text-motion' to t, or use the `forward-line' function\ninstead.  For instance, `(forward-line 0)' does the same thing as\n`(beginning-of-line)', except that it ignores field boundaries.",
            "fnname": "Fbeginning_of_line",
            "intspec": "^p",
            "lname": "beginning-of-line",
            "maxargs": 1,
            "minargs": 0,
            "path": "cmds.c",
            "sname": "Sbeginning_of_line"
        },
        {
            "args": [
                "from",
                "to",
                "object",
                "base_dir"
            ],
            "attributes": null,
            "doc": "Return position between FROM and TO where directionality was overridden.\n\nThis function returns the first character position in the specified\nregion of OBJECT where characters have their bidirectional\nproperties affected in a way that might make its text look confusingly\non display.  For example, characters whose `bidi-class' property is `L',\ncould be forced to display as `R' by a directional override, and\nlikewise characters whose `bidi-class' is `R' or `AL' that are\nforced to display as `L'.\n\nIf no such character is found, the function returns nil.\n\nOBJECT is a Lisp string or buffer to search for overridden\ndirectionality, and defaults to the current buffer if nil.\nOBJECT can also be a window, in which case the function will search\nthe buffer displayed in that window.  Passing the window instead of\na buffer is preferable when the buffer is displayed in some window,\nbecause this function will then be able to correctly account for\nwindow-specific overlays, which can affect the results.\n\nOptional argument BASE-DIR specifies the base paragraph directory\nof the text.  It should be a symbol, either `left-to-right'\nor `right-to-left', and defaults to `left-to-right'.\n\nStrong directional characters `L', `R', and `AL' can have their\nintrinsic directionality overridden by directional override control\ncharacters RLO (u+202E) and LRO (u+202D).  They can also have their\ndirectionality affected by other formatting control characters: LRE\n(u+202A), RLE (u+202B), LRI (u+2066), and RLI (u+2067).  See the\nfunction `get-char-code-property' for a way to inquire about the\n`bidi-class' property of a character.  Characters whose intrinsic\ndirectionality is weak or neutral, such as numbers or punctuation\ncharacters, can be forced to display in a very different place with\nrespect of its surrounding characters, so as to make the surrounding\ntext confuse the user regarding what the text says.\n\nAlso see the `highlight-confusing-reorderings' function, which can be\nuseful in similar circumstances as this function.",
            "fnname": "Fbidi_find_overridden_directionality",
            "intspec": "0",
            "lname": "bidi-find-overridden-directionality",
            "maxargs": 4,
            "minargs": 3,
            "path": "xdisp.c",
            "sname": "Sbidi_find_overridden_directionality"
        },
        {
            "args": [
                "vpos"
            ],
            "attributes": null,
            "doc": "Return the resolved bidirectional levels of characters at VPOS.\n\nThe resolved levels are produced by the Emacs bidi reordering engine\nthat implements the UBA, the Unicode Bidirectional Algorithm.  Please\nread the Unicode Standard Annex 9 (UAX#9) for background information\nabout these levels.\n\nVPOS is the zero-based number of the current window's screen line\nfor which to produce the resolved levels.  If VPOS is nil or omitted,\nit defaults to the screen line of point.  If the window displays a\nheader line, VPOS of zero will report on the header line, and first\nline of text in the window will have VPOS of 1.\n\nValue is an array of resolved levels, indexed by glyph number.\nGlyphs are numbered from zero starting from the beginning of the\nscreen line, i.e. the left edge of the window for left-to-right lines\nand from the right edge for right-to-left lines.  The resolved levels\nare produced only for the window's text area; text in display margins\nis not included.\n\nIf the selected window's display is not up-to-date, or if the specified\nscreen line does not display text, this function returns nil.  It is\nhighly recommended to bind this function to some simple key, like F8,\nin order to avoid these problems.\n\nThis function exists mainly for testing the correctness of the\nEmacs UBA implementation, in particular with the test suite.",
            "fnname": "Fbidi_resolved_levels",
            "intspec": "0",
            "lname": "bidi-resolved-levels",
            "maxargs": 1,
            "minargs": 0,
            "path": "xdisp.c",
            "sname": "Sbidi_resolved_levels"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Value is non-nil if OBJECT is a valid bitmap specification.\nA bitmap specification is either a string, a file name, or a list\n\\(WIDTH HEIGHT DATA) where WIDTH is the pixel width of the bitmap,\nHEIGHT is its height, and DATA is a string containing the bits of\nthe pixmap.  Bits are stored row by row, each row occupies\n\\(WIDTH + 7)/8 bytes.",
            "fnname": "Fbitmap_spec_p",
            "intspec": "0",
            "lname": "bitmap-spec-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sbitmap_spec_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if point is at the beginning of the buffer.\nIf the buffer is narrowed, this means the beginning of the narrowed part.",
            "fnname": "Fbobp",
            "intspec": "0",
            "lname": "bobp",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sbobp"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if point is at the beginning of a line.",
            "fnname": "Fbolp",
            "intspec": "0",
            "lname": "bolp",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sbolp"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a new bool-vector with specified arguments as elements.\nAllows any number of arguments, including zero.\nusage: (bool-vector &rest OBJECTS)",
            "fnname": "Fbool_vector",
            "intspec": "0",
            "lname": "bool-vector",
            "maxargs": -1,
            "minargs": 0,
            "path": "alloc.c",
            "sname": "Sbool_vector"
        },
        {
            "args": [
                "a",
                "b",
                "i"
            ],
            "attributes": null,
            "doc": "Count how many consecutive elements in A equal B starting at I.\nA is a bool vector, B is t or nil, and I is an index into A.",
            "fnname": "Fbool_vector_count_consecutive",
            "intspec": "0",
            "lname": "bool-vector-count-consecutive",
            "maxargs": 3,
            "minargs": 3,
            "path": "data.c",
            "sname": "Sbool_vector_count_consecutive"
        },
        {
            "args": [
                "a"
            ],
            "attributes": null,
            "doc": "Count how many elements in A are t.\nA is a bool vector.  To count A's nil elements, subtract the return\nvalue from A's length.",
            "fnname": "Fbool_vector_count_population",
            "intspec": "0",
            "lname": "bool-vector-count-population",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sbool_vector_count_population"
        },
        {
            "args": [
                "a",
                "b",
                "c"
            ],
            "attributes": null,
            "doc": "Return A ^ B, bitwise exclusive or.\nIf optional third argument C is given, store result into C.\nA, B, and C must be bool vectors of the same length.\nReturn the destination vector if it changed or nil otherwise.",
            "fnname": "Fbool_vector_exclusive_or",
            "intspec": "0",
            "lname": "bool-vector-exclusive-or",
            "maxargs": 3,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sbool_vector_exclusive_or"
        },
        {
            "args": [
                "a",
                "b",
                "c"
            ],
            "attributes": null,
            "doc": "Return A & B, bitwise and.\nIf optional third argument C is given, store result into C.\nA, B, and C must be bool vectors of the same length.\nReturn the destination vector if it changed or nil otherwise.",
            "fnname": "Fbool_vector_intersection",
            "intspec": "0",
            "lname": "bool-vector-intersection",
            "maxargs": 3,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sbool_vector_intersection"
        },
        {
            "args": [
                "a",
                "b"
            ],
            "attributes": null,
            "doc": "Compute ~A, set complement.\nIf optional second argument B is given, store result into B.\nA and B must be bool vectors of the same length.\nReturn the destination vector.",
            "fnname": "Fbool_vector_not",
            "intspec": "0",
            "lname": "bool-vector-not",
            "maxargs": 2,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sbool_vector_not"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a bool-vector.",
            "fnname": "Fbool_vector_p",
            "intspec": "0",
            "lname": "bool-vector-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sbool_vector_p"
        },
        {
            "args": [
                "a",
                "b",
                "c"
            ],
            "attributes": null,
            "doc": "Return A &~ B, set difference.\nIf optional third argument C is given, store result into C.\nA, B, and C must be bool vectors of the same length.\nReturn the destination vector if it changed or nil otherwise.",
            "fnname": "Fbool_vector_set_difference",
            "intspec": "0",
            "lname": "bool-vector-set-difference",
            "maxargs": 3,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sbool_vector_set_difference"
        },
        {
            "args": [
                "a",
                "b"
            ],
            "attributes": null,
            "doc": "Return t if every t value in A is also t in B, nil otherwise.\nA and B must be bool vectors of the same length.",
            "fnname": "Fbool_vector_subsetp",
            "intspec": "0",
            "lname": "bool-vector-subsetp",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sbool_vector_subsetp"
        },
        {
            "args": [
                "a",
                "b",
                "c"
            ],
            "attributes": null,
            "doc": "Return A | B, bitwise or.\nIf optional third argument C is given, store result into C.\nA, B, and C must be bool vectors of the same length.\nReturn the destination vector if it changed or nil otherwise.",
            "fnname": "Fbool_vector_union",
            "intspec": "0",
            "lname": "bool-vector-union",
            "maxargs": 3,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sbool_vector_union"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Return t if SYMBOL's value is not void.\nNote that if `lexical-binding' is in effect, this refers to the\nglobal value outside of any lexical scope.",
            "fnname": "Fboundp",
            "intspec": "0",
            "lname": "boundp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sboundp"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return the base buffer of indirect buffer BUFFER.\nIf BUFFER is not indirect, return nil.\nBUFFER defaults to the current buffer.",
            "fnname": "Fbuffer_base_buffer",
            "intspec": "0",
            "lname": "buffer-base-buffer",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sbuffer_base_buffer"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return BUFFER's character-change tick counter.\nEach buffer has a character-change tick counter, which is set to the\nvalue of the buffer's tick counter (see `buffer-modified-tick'), each\ntime text in that buffer is inserted or deleted.  By comparing the\nvalues returned by two individual calls of `buffer-chars-modified-tick',\nyou can tell whether a character change occurred in that buffer in\nbetween these calls.  No argument or nil as argument means use current\nbuffer as BUFFER.",
            "fnname": "Fbuffer_chars_modified_tick",
            "intspec": "0",
            "lname": "buffer-chars-modified-tick",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sbuffer_chars_modified_tick"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Start keeping undo information for buffer BUFFER.\nNo argument or nil as argument means do this for the current buffer.",
            "fnname": "Fbuffer_enable_undo",
            "intspec": "",
            "lname": "buffer-enable-undo",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sbuffer_enable_undo"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return name of file BUFFER is visiting, or nil if none.\nNo argument or nil as argument means use the current buffer.",
            "fnname": "Fbuffer_file_name",
            "intspec": "0",
            "lname": "buffer-file-name",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sbuffer_file_name"
        },
        {
            "args": [
                "buffer_or_name"
            ],
            "attributes": null,
            "doc": "Return a hash of the contents of BUFFER-OR-NAME.\nThis hash is performed on the raw internal format of the buffer,\ndisregarding any coding systems.  If nil, use the current buffer.\n\nThis function is useful for comparing two buffers running in the same\nEmacs, but is not guaranteed to return the same hash between different\nEmacs versions.  It should be somewhat more efficient on larger\nbuffers than `secure-hash' is, and should not allocate more memory.\n\nIt should not be used for anything security-related.  See\n`secure-hash' for these applications.",
            "fnname": "Fbuffer_hash",
            "intspec": "0",
            "lname": "buffer-hash",
            "maxargs": 1,
            "minargs": 0,
            "path": "fns.c",
            "sname": "Sbuffer_hash"
        },
        {
            "args": [
                "buffer_or_name"
            ],
            "attributes": null,
            "doc": "Return data about lines in BUFFER.\nThe data is returned as a list, and the first element is the number of\nlines in the buffer, the second is the length of the longest line, and\nthe third is the mean line length.  The lengths returned are in bytes, not\ncharacters.",
            "fnname": "Fbuffer_line_statistics",
            "intspec": "0",
            "lname": "buffer-line-statistics",
            "maxargs": 1,
            "minargs": 0,
            "path": "fns.c",
            "sname": "Sbuffer_line_statistics"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return a list of all live buffers.\nIf the optional arg FRAME is a frame, return the buffer list in the\nproper order for that frame: the buffers shown in FRAME come first,\nfollowed by the rest of the buffers.",
            "fnname": "Fbuffer_list",
            "intspec": "0",
            "lname": "buffer-list",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sbuffer_list"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a buffer which has not been killed.\nValue is nil if OBJECT is not a buffer or if it has been killed.",
            "fnname": "Fbuffer_live_p",
            "intspec": "0",
            "lname": "buffer-live-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sbuffer_live_p"
        },
        {
            "args": [
                "variable",
                "buffer"
            ],
            "attributes": null,
            "doc": "Return the value of VARIABLE in BUFFER.\nIf VARIABLE does not have a buffer-local binding in BUFFER, the value\nis the default binding of the variable.",
            "fnname": "Fbuffer_local_value",
            "intspec": "0",
            "lname": "buffer-local-value",
            "maxargs": 2,
            "minargs": 2,
            "path": "buffer.c",
            "sname": "Sbuffer_local_value"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return an alist of variables that are buffer-local in BUFFER.\nMost elements look like (SYMBOL . VALUE), describing one variable.\nFor a symbol that is locally unbound, just the symbol appears in the value.\nNote that storing new VALUEs in these elements doesn't change the variables.\nNo argument or nil as argument means use current buffer as BUFFER.",
            "fnname": "Fbuffer_local_variables",
            "intspec": "0",
            "lname": "buffer-local-variables",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sbuffer_local_variables"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return non-nil if BUFFER was modified since its file was last read or saved.\nNo argument or nil as argument means use current buffer as BUFFER.\n\nIf BUFFER was autosaved since it was last modified, this function\nreturns the symbol `autosaved'.",
            "fnname": "Fbuffer_modified_p",
            "intspec": "0",
            "lname": "buffer-modified-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sbuffer_modified_p"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return BUFFER's tick counter, incremented for each change in text.\nEach buffer has a tick counter which is incremented each time the\ntext in that buffer is changed.  No argument or nil as argument means\nuse current buffer as BUFFER.",
            "fnname": "Fbuffer_modified_tick",
            "intspec": "0",
            "lname": "buffer-modified-tick",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sbuffer_modified_tick"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return the name of BUFFER, as a string.\nBUFFER defaults to the current buffer.\nReturn nil if BUFFER has been killed.",
            "fnname": "Fbuffer_name",
            "intspec": "0",
            "lname": "buffer-name",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sbuffer_name"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return the number of characters in the current buffer.\nIf BUFFER is not nil, return the number of characters in that buffer\ninstead.\n\nThis does not take narrowing into account; to count the number of\ncharacters in the accessible portion of the current buffer, use\n`(- (point-max) (point-min))', and to count the number of characters\nin the accessible portion of some other BUFFER, use\n`(with-current-buffer BUFFER (- (point-max) (point-min)))'.",
            "fnname": "Fbuffer_size",
            "intspec": "0",
            "lname": "buffer-size",
            "maxargs": 1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sbuffer_size"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the contents of the current buffer as a string.\nIf narrowing is in effect, this function returns only the visible part\nof the buffer.\n\nThis function copies the text properties of that part of the buffer\ninto the result string; if you don\u2019t want the text properties,\nuse `buffer-substring-no-properties' instead.",
            "fnname": "Fbuffer_string",
            "intspec": "0",
            "lname": "buffer-string",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sbuffer_string"
        },
        {
            "args": [
                "start",
                "end"
            ],
            "attributes": null,
            "doc": "Return the contents of part of the current buffer as a string.\nThe two arguments START and END are character positions;\nthey can be in either order.\nThe string returned is multibyte if the buffer is multibyte.\n\nThis function copies the text properties of that part of the buffer\ninto the result string; if you don't want the text properties,\nuse `buffer-substring-no-properties' instead.",
            "fnname": "Fbuffer_substring",
            "intspec": "0",
            "lname": "buffer-substring",
            "maxargs": 2,
            "minargs": 2,
            "path": "editfns.c",
            "sname": "Sbuffer_substring"
        },
        {
            "args": [
                "start",
                "end"
            ],
            "attributes": null,
            "doc": "Return the characters of part of the buffer, without the text properties.\nThe two arguments START and END are character positions;\nthey can be in either order.",
            "fnname": "Fbuffer_substring_no_properties",
            "intspec": "0",
            "lname": "buffer-substring-no-properties",
            "maxargs": 2,
            "minargs": 2,
            "path": "editfns.c",
            "sname": "Sbuffer_substring_no_properties"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Swap the text between current buffer and BUFFER.\nUsing this function from `save-excursion' might produce surprising\nresults, see Info node `(elisp)Swapping Text'.",
            "fnname": "Fbuffer_swap_text",
            "intspec": "0",
            "lname": "buffer-swap-text",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sbuffer_swap_text"
        },
        {
            "args": [
                "buffer_or_name",
                "window",
                "x_limit",
                "y_limit"
            ],
            "attributes": null,
            "doc": "Return size of whole text of BUFFER-OR-NAME in WINDOW.\nBUFFER-OR-NAME must specify a live buffer or the name of a live buffer\nand defaults to the current buffer.  WINDOW must be a live window and\ndefaults to the selected one.  The return value is a cons of the maximum\npixel-width of any text line and the pixel-height of all the text lines\nof the buffer specified by BUFFER-OR-NAME.\n\nThe optional arguments X-LIMIT and Y-LIMIT have the same meaning as with\n`window-text-pixel-size'.\n\nDo not use this function if the buffer specified by BUFFER-OR-NAME is\nalready displayed in WINDOW.  `window-text-pixel-size' is cheaper in\nthat case because it does not have to temporarily show that buffer in\nWINDOW.",
            "fnname": "Fbuffer_text_pixel_size",
            "intspec": "0",
            "lname": "buffer-text-pixel-size",
            "maxargs": 4,
            "minargs": 0,
            "path": "xdisp.c",
            "sname": "Sbuffer_text_pixel_size"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is an editor buffer.",
            "fnname": "Fbufferp",
            "intspec": "0",
            "lname": "bufferp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sbufferp"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Move BUFFER to the end of the buffer list.",
            "fnname": "Fbury_buffer_internal",
            "intspec": "0",
            "lname": "bury-buffer-internal",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sbury_buffer_internal"
        },
        {
            "args": [
                "bytestr",
                "vector",
                "maxdepth"
            ],
            "attributes": null,
            "doc": "Function used internally in byte-compiled code.\nThe first argument, BYTESTR, is a string of byte code;\nthe second, VECTOR, a vector of constants;\nthe third, MAXDEPTH, the maximum stack depth used in this function.\nIf the third argument is incorrect, Emacs may crash.",
            "fnname": "Fbyte_code",
            "intspec": "0",
            "lname": "byte-code",
            "maxargs": 3,
            "minargs": 3,
            "path": "bytecode.c",
            "sname": "Sbyte_code"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a byte-compiled function object.",
            "fnname": "Fbyte_code_function_p",
            "intspec": "0",
            "lname": "byte-code-function-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sbyte_code_function_p"
        },
        {
            "args": [
                "bytepos"
            ],
            "attributes": null,
            "doc": "Return the character position for byte position BYTEPOS.\nIf BYTEPOS is out of range, the value is nil.",
            "fnname": "Fbyte_to_position",
            "intspec": "0",
            "lname": "byte-to-position",
            "maxargs": 1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Sbyte_to_position"
        },
        {
            "args": [
                "byte"
            ],
            "attributes": null,
            "doc": "Convert arg BYTE to a unibyte string containing that byte.",
            "fnname": "Fbyte_to_string",
            "intspec": "0",
            "lname": "byte-to-string",
            "maxargs": 1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Sbyte_to_string"
        },
        {
            "args": null,
            "attributes": "const",
            "doc": "Return the byteorder for the machine.\nReturns 66 (ASCII uppercase B) for big endian machines or 108 (ASCII\nlowercase l) for small endian machines.",
            "fnname": "Fbyteorder",
            "intspec": "0",
            "lname": "byteorder",
            "maxargs": 0,
            "minargs": 0,
            "path": "data.c",
            "sname": "Sbyteorder"
        },
        {
            "args": [
                "function",
                "record_flag",
                "keys"
            ],
            "attributes": null,
            "doc": "Call FUNCTION, providing args according to its interactive calling specs.\nReturn the value FUNCTION returns.\nThe function contains a specification of how to do the argument reading.\nIn the case of user-defined functions, this is specified by placing a call\nto the function `interactive' at the top level of the function body.\nSee `interactive'.\n\nOptional second arg RECORD-FLAG non-nil\nmeans unconditionally put this command in the variable `command-history'.\nOtherwise, this is done only if an arg is read using the minibuffer.\n\nOptional third arg KEYS, if given, specifies the sequence of events to\nsupply, as a vector, if FUNCTION inquires which events were used to\ninvoke it (via an `interactive' spec that contains, for instance, an\n\\\"e\\\" code letter).  If KEYS is omitted or nil, the return value of\n`this-command-keys-vector' is used.",
            "fnname": "Fcall_interactively",
            "intspec": "0",
            "lname": "call-interactively",
            "maxargs": 3,
            "minargs": 1,
            "path": "callint.c",
            "sname": "Scall_interactively"
        },
        {
            "args": [
                "prefix",
                "loopfunc"
            ],
            "attributes": null,
            "doc": "Call the last keyboard macro that you defined with \\\\[start-kbd-macro].\n\nA prefix argument serves as a repeat count.  Zero means repeat until error.\n\nTo make a macro permanent so you can call it even after\ndefining others, use \\\\[name-last-kbd-macro].\n\nIn Lisp, optional second arg LOOPFUNC may be a function that is called prior to\neach iteration of the macro.  Iteration stops if LOOPFUNC returns nil.",
            "fnname": "Fcall_last_kbd_macro",
            "intspec": "p",
            "lname": "call-last-kbd-macro",
            "maxargs": 2,
            "minargs": 0,
            "path": "macros.c",
            "sname": "Scall_last_kbd_macro"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Call PROGRAM synchronously in separate process.\nThe remaining arguments are optional.\n\nThe program's input comes from file INFILE (nil means `null-device').\nIf INFILE is a relative path, it will be looked for relative to the\ndirectory where the process is run (see below).  If you want to make the\ninput come from an Emacs buffer, use `call-process-region' instead.\n\nThird argument DESTINATION specifies how to handle program's output.\n(\\\"Output\\\" here means both standard output and standard error\noutput.)\nIf DESTINATION is a buffer or the name of a buffer, or t (which stands for\nthe current buffer), it means insert output in that buffer before point.\nIf DESTINATION is nil, it means discard output; 0 means discard\n and don't wait for the program to terminate.\nIf DESTINATION is `(:file FILE)', where FILE is a file name string,\n it means that output should be written to that file (if the file\n already exists it is overwritten).\nDESTINATION can also have the form (REAL-BUFFER STDERR-FILE); in that case,\n REAL-BUFFER says what to do with standard output, as above,\n while STDERR-FILE says what to do with standard error in the child.\n STDERR-FILE may be nil (discard standard error output),\n t (mix it with ordinary output), or a file name string.\n\nFourth arg DISPLAY non-nil means redisplay buffer as output is inserted.\nRemaining arguments ARGS are strings passed as command arguments to PROGRAM.\n\nIf PROGRAM is not an absolute file name, `call-process' will look for\nPROGRAM in `exec-path' (which is a list of directories).\n\nIf executable PROGRAM can't be found as an executable, `call-process'\nsignals a Lisp error.  `call-process' reports errors in execution of\nthe program only through its return and output.\n\nIf DESTINATION is 0, `call-process' returns immediately with value nil.\nOtherwise it waits for PROGRAM to terminate\nand returns a numeric exit status or a signal description string.\nIf you quit, the process is killed with SIGINT, or SIGKILL if you quit again.\n\nThe process runs in `default-directory' if that is local (as\ndetermined by `unhandled-file-name-directory'), or \"~\" otherwise.  If\nyou want to run a process in a remote directory use `process-file'.\n\nusage: (call-process PROGRAM &optional INFILE DESTINATION DISPLAY &rest ARGS)",
            "fnname": "Fcall_process",
            "intspec": "0",
            "lname": "call-process",
            "maxargs": -1,
            "minargs": 1,
            "path": "callproc.c",
            "sname": "Scall_process"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Send text from START to END to a synchronous process running PROGRAM.\n\nSTART and END are normally buffer positions specifying the part of the\nbuffer to send to the process.\nIf START is nil, that means to use the entire buffer contents; END is\nignored.\nIf START is a string, then send that string to the process\ninstead of any buffer contents; END is ignored.\nThe remaining arguments are optional.\nDelete the text if fourth arg DELETE is non-nil.\n\nInsert output in BUFFER before point; t means current buffer; nil for\n BUFFER means discard it; 0 means discard and don't wait; and `(:file\n FILE)', where FILE is a file name string, means that it should be\n written to that file (if the file already exists it is overwritten).\nBUFFER can be a string which is the name of a buffer.\nBUFFER can also have the form (REAL-BUFFER STDERR-FILE); in that case,\nREAL-BUFFER says what to do with standard output, as above,\nwhile STDERR-FILE says what to do with standard error in the child.\nSTDERR-FILE may be nil (discard standard error output),\nt (mix it with ordinary output), or a file name string.\n\nSixth arg DISPLAY non-nil means redisplay buffer as output is inserted.\nRemaining arguments ARGS are passed to PROGRAM at startup as command-line\narguments.\n\nIf PROGRAM is not an absolute file name, `call-process-region' will\nlook for PROGRAM in `exec-path' (which is a list of directories).\n\nIf BUFFER is 0, `call-process-region' returns immediately with value nil.\nOtherwise it waits for PROGRAM to terminate\nand returns a numeric exit status or a signal description string.\nIf you quit, the process is killed with SIGINT, or SIGKILL if you quit again.\n\nusage: (call-process-region START END PROGRAM &optional DELETE BUFFER DISPLAY &rest ARGS)",
            "fnname": "Fcall_process_region",
            "intspec": "0",
            "lname": "call-process-region",
            "maxargs": -1,
            "minargs": 3,
            "path": "callproc.c",
            "sname": "Scall_process_region"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Cancel the events added to a keyboard macro for this command.",
            "fnname": "Fcancel_kbd_macro_events",
            "intspec": "0",
            "lname": "cancel-kbd-macro-events",
            "maxargs": 0,
            "minargs": 0,
            "path": "macros.c",
            "sname": "Scancel_kbd_macro_events"
        },
        {
            "args": [
                "obj"
            ],
            "attributes": null,
            "doc": "Convert argument to capitalized form and return that.\nThis means that each word's first character is converted to either\ntitle case or upper case, and the rest to lower case.\n\nThe argument may be a character or string.  The result has the same\ntype.  (See `downcase' for further details about the type.)\n\nThe argument object is not altered--the value is a copy.  If argument\nis a character, characters which map to multiple code points when\ncased, e.g. \ufb01, are returned unchanged.",
            "fnname": "Fcapitalize",
            "intspec": "0",
            "lname": "capitalize",
            "maxargs": 1,
            "minargs": 1,
            "path": "casefiddle.c",
            "sname": "Scapitalize"
        },
        {
            "args": [
                "beg",
                "end",
                "region_noncontiguous_p"
            ],
            "attributes": null,
            "doc": "Convert the region to capitalized form.\nThis means that each word's first character is converted to either\ntitle case or upper case, and the rest to lower case.\nIn programs, give two arguments, the starting and ending\ncharacter positions to operate on.",
            "fnname": "Fcapitalize_region",
            "intspec": "(list (region-beginning) (region-end) (region-noncontiguous-p))",
            "lname": "capitalize-region",
            "maxargs": 3,
            "minargs": 2,
            "path": "casefiddle.c",
            "sname": "Scapitalize_region"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Capitalize from point to the end of word, moving over.\nWith numerical argument ARG, capitalize the next ARG-1 words as well.\nThis gives the word(s) a first character in upper case\nand the rest lower case.\n\nIf point is in the middle of a word, the part of that word before point\nis ignored when moving forward.\n\nWith negative argument, capitalize previous words but do not move.",
            "fnname": "Fcapitalize_word",
            "intspec": "p",
            "lname": "capitalize-word",
            "maxargs": 1,
            "minargs": 1,
            "path": "casefiddle.c",
            "sname": "Scapitalize_word"
        },
        {
            "args": [
                "list"
            ],
            "attributes": null,
            "doc": "Return the car of LIST.  If LIST is nil, return nil.\nError if LIST is not nil and not a cons cell.  See also `car-safe'.\n\nSee Info node `(elisp)Cons Cells' for a discussion of related basic\nLisp concepts such as car, cdr, cons cell and list.",
            "fnname": "Fcar",
            "intspec": "0",
            "lname": "car",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Scar"
        },
        {
            "args": [
                "a",
                "b"
            ],
            "attributes": null,
            "doc": "Return t if (car A) is numerically less than (car B).",
            "fnname": "Fcar_less_than_car",
            "intspec": "0",
            "lname": "car-less-than-car",
            "maxargs": 2,
            "minargs": 2,
            "path": "fileio.c",
            "sname": "Scar_less_than_car"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return the car of OBJECT if it is a cons cell, or else nil.",
            "fnname": "Fcar_safe",
            "intspec": "0",
            "lname": "car-safe",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Scar_safe"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a case table.\nSee `set-case-table' for more information on these data structures.",
            "fnname": "Fcase_table_p",
            "intspec": "0",
            "lname": "case-table-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "casetab.c",
            "sname": "Scase_table_p"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Eval BODY allowing nonlocal exits using `throw'.\nTAG is evalled to get the tag to use; it must not be nil.\n\nThen the BODY is executed.\nWithin BODY, a call to `throw' with the same TAG exits BODY and this `catch'.\nIf no throw happens, `catch' returns the value of the last BODY form.\nIf a throw happens, it specifies the value to return from `catch'.\nusage: (catch TAG BODY...)",
            "fnname": "Fcatch",
            "intspec": "0",
            "lname": "catch",
            "maxargs": -2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Scatch"
        },
        {
            "args": [
                "category",
                "table"
            ],
            "attributes": null,
            "doc": "Return the documentation string of CATEGORY, as defined in TABLE.\nTABLE should be a category table and defaults to the current buffer's\ncategory table.",
            "fnname": "Fcategory_docstring",
            "intspec": "0",
            "lname": "category-docstring",
            "maxargs": 2,
            "minargs": 1,
            "path": "category.c",
            "sname": "Scategory_docstring"
        },
        {
            "args": [
                "category_set"
            ],
            "attributes": null,
            "doc": "Return a string containing mnemonics of the categories in CATEGORY-SET.\nCATEGORY-SET is a bool-vector, and the categories \\\"in\\\" it are those\nthat are indexes where t occurs in the bool-vector.\nThe return value is a string containing those same categories.",
            "fnname": "Fcategory_set_mnemonics",
            "intspec": "0",
            "lname": "category-set-mnemonics",
            "maxargs": 1,
            "minargs": 1,
            "path": "category.c",
            "sname": "Scategory_set_mnemonics"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current category table.\nThis is the one specified by the current buffer.",
            "fnname": "Fcategory_table",
            "intspec": "0",
            "lname": "category-table",
            "maxargs": 0,
            "minargs": 0,
            "path": "category.c",
            "sname": "Scategory_table"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return t if ARG is a category table.",
            "fnname": "Fcategory_table_p",
            "intspec": "0",
            "lname": "category-table-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "category.c",
            "sname": "Scategory_table_p"
        },
        {
            "args": [
                "ccl_prog",
                "reg"
            ],
            "attributes": null,
            "doc": "Execute CCL-PROGRAM with registers initialized by REGISTERS.\n\nCCL-PROGRAM is a CCL program name (symbol)\nor compiled code generated by `ccl-compile' (for backward compatibility.\nIn the latter case, the execution overhead is bigger than in the former).\nNo I/O commands should appear in CCL-PROGRAM.\n\nREGISTERS is a vector of [R0 R1 ... R7] where RN is an initial value\nfor the Nth register.\n\nAs side effect, each element of REGISTERS holds the value of\nthe corresponding register after the execution.\n\nSee the documentation of `define-ccl-program' for a definition of CCL\nprograms.",
            "fnname": "Fccl_execute",
            "intspec": "0",
            "lname": "ccl-execute",
            "maxargs": 2,
            "minargs": 2,
            "path": "ccl.c",
            "sname": "Sccl_execute"
        },
        {
            "args": [
                "ccl_prog",
                "status",
                "str",
                "contin",
                "unibyte_p"
            ],
            "attributes": null,
            "doc": "Execute CCL-PROGRAM with initial STATUS on STRING.\n\nCCL-PROGRAM is a symbol registered by `register-ccl-program',\nor a compiled code generated by `ccl-compile' (for backward compatibility,\nin this case, the execution is slower).\n\nRead buffer is set to STRING, and write buffer is allocated automatically.\n\nSTATUS is a vector of [R0 R1 ... R7 IC], where\n R0..R7 are initial values of corresponding registers,\n IC is the instruction counter specifying from where to start the program.\nIf R0..R7 are nil, they are initialized to 0.\nIf IC is nil, it is initialized to head of the CCL program.\n\nIf optional 4th arg CONTINUE is non-nil, keep IC on read operation\nwhen read buffer is exhausted, else, IC is always set to the end of\nCCL-PROGRAM on exit.\n\nIt returns the contents of write buffer as a string,\n and as side effect, STATUS is updated.\nIf the optional 5th arg UNIBYTE-P is non-nil, the returned string\nis a unibyte string.  By default it is a multibyte string.\n\nSee the documentation of `define-ccl-program' for the detail of CCL program.\nusage: (ccl-execute-on-string CCL-PROGRAM STATUS STRING &optional CONTINUE UNIBYTE-P)",
            "fnname": "Fccl_execute_on_string",
            "intspec": "0",
            "lname": "ccl-execute-on-string",
            "maxargs": 5,
            "minargs": 3,
            "path": "ccl.c",
            "sname": "Sccl_execute_on_string"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a CCL program name or a compiled CCL program code.\nSee the documentation of `define-ccl-program' for the detail of CCL program.",
            "fnname": "Fccl_program_p",
            "intspec": "0",
            "lname": "ccl-program-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "ccl.c",
            "sname": "Sccl_program_p"
        },
        {
            "args": [
                "list"
            ],
            "attributes": null,
            "doc": "Return the cdr of LIST.  If LIST is nil, return nil.\nError if LIST is not nil and not a cons cell.  See also `cdr-safe'.\n\nSee Info node `(elisp)Cons Cells' for a discussion of related basic\nLisp concepts such as cdr, car, cons cell and list.",
            "fnname": "Fcdr",
            "intspec": "0",
            "lname": "cdr",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Scdr"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return the cdr of OBJECT if it is a cons cell, or else nil.",
            "fnname": "Fcdr_safe",
            "intspec": "0",
            "lname": "cdr-safe",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Scdr_safe"
        },
        {
            "args": [
                "arg",
                "divisor"
            ],
            "attributes": null,
            "doc": "Return the smallest integer no less than ARG.\nThis rounds the value towards +inf.\nWith optional DIVISOR, return the smallest integer no less than ARG/DIVISOR.",
            "fnname": "Fceiling",
            "intspec": "0",
            "lname": "ceiling",
            "maxargs": 2,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sceiling"
        },
        {
            "args": [
                "pos"
            ],
            "attributes": null,
            "doc": "Return character in current buffer at position POS.\nPOS is an integer or a marker and defaults to point.\nIf POS is out of range, the value is nil.",
            "fnname": "Fchar_after",
            "intspec": "0",
            "lname": "char-after",
            "maxargs": 1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Schar_after"
        },
        {
            "args": [
                "pos"
            ],
            "attributes": null,
            "doc": "Return character in current buffer preceding position POS.\nPOS is an integer or a marker and defaults to point.\nIf POS is out of range, the value is nil.",
            "fnname": "Fchar_before",
            "intspec": "0",
            "lname": "char-before",
            "maxargs": 1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Schar_before"
        },
        {
            "args": [
                "ch"
            ],
            "attributes": null,
            "doc": "Return the category set of CHAR.\nusage: (char-category-set CHAR)",
            "fnname": "Fchar_category_set",
            "intspec": "0",
            "lname": "char-category-set",
            "maxargs": 1,
            "minargs": 1,
            "path": "category.c",
            "sname": "Schar_category_set"
        },
        {
            "args": [
                "ch",
                "restriction"
            ],
            "attributes": null,
            "doc": "Return the charset of highest priority that contains CH.\nASCII characters are an exception: for them, this function always\nreturns `ascii'.\nIf optional 2nd arg RESTRICTION is non-nil, it is a list of charsets\nfrom which to find the charset.  It may also be a coding system.  In\nthat case, find the charset from what supported by that coding system.",
            "fnname": "Fchar_charset",
            "intspec": "0",
            "lname": "char-charset",
            "maxargs": 2,
            "minargs": 1,
            "path": "charset.c",
            "sname": "Schar_charset"
        },
        {
            "args": [
                "c1",
                "c2"
            ],
            "attributes": null,
            "doc": "Return t if two characters match, optionally ignoring case.\nBoth arguments must be characters (i.e. integers).\nCase is ignored if `case-fold-search' is non-nil in the current buffer.",
            "fnname": "Fchar_equal",
            "intspec": "0",
            "lname": "char-equal",
            "maxargs": 2,
            "minargs": 2,
            "path": "editfns.c",
            "sname": "Schar_equal"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is a character or a string.",
            "fnname": "Fchar_or_string_p",
            "intspec": "0",
            "lname": "char-or-string-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Schar_or_string_p"
        },
        {
            "args": [
                "character"
            ],
            "attributes": null,
            "doc": "Resolve modifiers in the character CHAR.\nThe value is a character with modifiers resolved into the character\ncode.  Unresolved modifiers are kept in the value.\nusage: (char-resolve-modifiers CHAR)",
            "fnname": "Fchar_resolve_modifiers",
            "intspec": "0",
            "lname": "char-resolve-modifiers",
            "maxargs": 1,
            "minargs": 1,
            "path": "character.c",
            "sname": "Schar_resolve_modifiers"
        },
        {
            "args": [
                "character"
            ],
            "attributes": null,
            "doc": "Return the syntax code of CHARACTER, described by a character.\nFor example, if CHARACTER is a word constituent, the\ncharacter `w' (119) is returned.\nThe characters that correspond to various syntax codes\nare listed in the documentation of `modify-syntax-entry'.\n\nIf you're trying to determine the syntax of characters in the buffer,\nthis is probably the wrong function to use, because it can't take\n`syntax-table' text properties into account.  Consider using\n`syntax-after' instead.",
            "fnname": "Fchar_syntax",
            "intspec": "0",
            "lname": "char-syntax",
            "maxargs": 1,
            "minargs": 1,
            "path": "syntax.c",
            "sname": "Schar_syntax"
        },
        {
            "args": [
                "char_table",
                "n"
            ],
            "attributes": null,
            "doc": "Return the value of CHAR-TABLE's extra-slot number N.",
            "fnname": "Fchar_table_extra_slot",
            "intspec": "0",
            "lname": "char-table-extra-slot",
            "maxargs": 2,
            "minargs": 2,
            "path": "chartab.c",
            "sname": "Schar_table_extra_slot"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a char-table.",
            "fnname": "Fchar_table_p",
            "intspec": "0",
            "lname": "char-table-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Schar_table_p"
        },
        {
            "args": [
                "char_table"
            ],
            "attributes": null,
            "doc": "Return the parent char-table of CHAR-TABLE.\nThe value is either nil or another char-table.\nIf CHAR-TABLE holds nil for a given character,\nthen the actual applicable value is inherited from the parent char-table\n\\(or from its parents, if necessary).",
            "fnname": "Fchar_table_parent",
            "intspec": "0",
            "lname": "char-table-parent",
            "maxargs": 1,
            "minargs": 1,
            "path": "chartab.c",
            "sname": "Schar_table_parent"
        },
        {
            "args": [
                "char_table",
                "range"
            ],
            "attributes": null,
            "doc": "Return the value in CHAR-TABLE for a range of characters RANGE.\nRANGE should be nil (for the default value),\na cons of character codes (for characters in the range), or a character code.\nIf RANGE is a cons (FROM . TO), the function returns the value for FROM.",
            "fnname": "Fchar_table_range",
            "intspec": "0",
            "lname": "char-table-range",
            "maxargs": 2,
            "minargs": 2,
            "path": "chartab.c",
            "sname": "Schar_table_range"
        },
        {
            "args": [
                "char_table"
            ],
            "attributes": null,
            "doc": "Return the subtype of char-table CHAR-TABLE.  The value is a symbol.",
            "fnname": "Fchar_table_subtype",
            "intspec": "0",
            "lname": "char-table-subtype",
            "maxargs": 1,
            "minargs": 1,
            "path": "chartab.c",
            "sname": "Schar_table_subtype"
        },
        {
            "args": [
                "character"
            ],
            "attributes": null,
            "doc": "Convert arg CHAR to a string containing that character.\nusage: (char-to-string CHAR)",
            "fnname": "Fchar_to_string",
            "intspec": "0",
            "lname": "char-to-string",
            "maxargs": 1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Schar_to_string"
        },
        {
            "args": [
                "ch"
            ],
            "attributes": null,
            "doc": "Return width of CHAR in columns when displayed in the current buffer.\nThe width of CHAR is measured by how many columns it will occupy on the screen.\nThis is based on data in `char-width-table', and ignores the actual\nmetrics of the character's glyph as determined by its font.\nIf the display table in effect replaces CHAR on display with\nsomething else, the function returns the width of the replacement.\nTab is taken to occupy `tab-width' columns.\nusage: (char-width CHAR)",
            "fnname": "Fchar_width",
            "intspec": "0",
            "lname": "char-width",
            "maxargs": 1,
            "minargs": 1,
            "path": "character.c",
            "sname": "Schar_width"
        },
        {
            "args": [
                "object",
                "ignore"
            ],
            "attributes": "const",
            "doc": "Return non-nil if OBJECT is a character.\nIn Emacs Lisp, characters are represented by character codes, which\nare non-negative integers.  The function `max-char' returns the\nmaximum character code.\nusage: (characterp OBJECT)",
            "fnname": "Fcharacterp",
            "intspec": "0",
            "lname": "characterp",
            "maxargs": 2,
            "minargs": 1,
            "path": "character.c",
            "sname": "Scharacterp"
        },
        {
            "args": [
                "pos"
            ],
            "attributes": null,
            "doc": "Return charset of a character in the current buffer at position POS.\nIf POS is nil, it defaults to the current point.\nIf POS is out of range, the value is nil.",
            "fnname": "Fcharset_after",
            "intspec": "0",
            "lname": "charset-after",
            "maxargs": 1,
            "minargs": 0,
            "path": "charset.c",
            "sname": "Scharset_after"
        },
        {
            "args": [
                "charset"
            ],
            "attributes": null,
            "doc": "Internal use only.\nReturn charset identification number of CHARSET.",
            "fnname": "Fcharset_id_internal",
            "intspec": "0",
            "lname": "charset-id-internal",
            "maxargs": 1,
            "minargs": 0,
            "path": "charset.c",
            "sname": "Scharset_id_internal"
        },
        {
            "args": [
                "charset"
            ],
            "attributes": null,
            "doc": "Return the property list of CHARSET.",
            "fnname": "Fcharset_plist",
            "intspec": "0",
            "lname": "charset-plist",
            "maxargs": 1,
            "minargs": 1,
            "path": "charset.c",
            "sname": "Scharset_plist"
        },
        {
            "args": [
                "highestp"
            ],
            "attributes": null,
            "doc": "Return the list of charsets ordered by priority.\nHIGHESTP non-nil means just return the highest priority one.",
            "fnname": "Fcharset_priority_list",
            "intspec": "0",
            "lname": "charset-priority-list",
            "maxargs": 1,
            "minargs": 0,
            "path": "charset.c",
            "sname": "Scharset_priority_list"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return non-nil if and only if OBJECT is a charset.",
            "fnname": "Fcharsetp",
            "intspec": "0",
            "lname": "charsetp",
            "maxargs": 1,
            "minargs": 1,
            "path": "charset.c",
            "sname": "Scharsetp"
        },
        {
            "args": [
                "coding_system"
            ],
            "attributes": null,
            "doc": "Check validity of CODING-SYSTEM.\nIf valid, return CODING-SYSTEM, else signal a `coding-system-error' error.\nIt is valid if it is nil or a symbol defined as a coding system by the\nfunction `define-coding-system'.",
            "fnname": "Fcheck_coding_system",
            "intspec": "0",
            "lname": "check-coding-system",
            "maxargs": 1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Scheck_coding_system"
        },
        {
            "args": [
                "start",
                "end",
                "coding_system_list"
            ],
            "attributes": null,
            "doc": "Check if text between START and END is encodable by CODING-SYSTEM-LIST.\n\nSTART and END are buffer positions specifying the region.\nCODING-SYSTEM-LIST is a list of coding systems to check.\n\nIf all coding systems in CODING-SYSTEM-LIST can encode the region, the\nfunction returns nil.\n\nIf some of the coding systems cannot encode the whole region, value is\nan alist, each element of which has the form (CODING-SYSTEM POS1 POS2 ...),\nwhich means that CODING-SYSTEM cannot encode the text at buffer positions\nPOS1, POS2, ...\n\nSTART may be a string.  In that case, check if the string is\nencodable, and the value contains character indices into the string\ninstead of buffer positions.  END is ignored in this case.\n\nIf the current buffer (or START if it is a string) is unibyte, the value\nis nil.",
            "fnname": "Fcheck_coding_systems_region",
            "intspec": "0",
            "lname": "check-coding-systems-region",
            "maxargs": 3,
            "minargs": 3,
            "path": "coding.c",
            "sname": "Scheck_coding_systems_region"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Clear any record of a recent auto-save failure in the current buffer.",
            "fnname": "Fclear_buffer_auto_save_failure",
            "intspec": "0",
            "lname": "clear-buffer-auto-save-failure",
            "maxargs": 0,
            "minargs": 0,
            "path": "fileio.c",
            "sname": "Sclear_buffer_auto_save_failure"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Internal use only.\nClear temporary charset mapping tables.\nIt should be called only from temacs invoked for dumping.",
            "fnname": "Fclear_charset_maps",
            "intspec": "0",
            "lname": "clear-charset-maps",
            "maxargs": 0,
            "minargs": 0,
            "path": "charset.c",
            "sname": "Sclear_charset_maps"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Internal use only.\nClear composition cache.",
            "fnname": "Fclear_composition_cache",
            "intspec": "0",
            "lname": "clear-composition-cache",
            "maxargs": 0,
            "minargs": 0,
            "path": "composite.c",
            "sname": "Sclear_composition_cache"
        },
        {
            "args": [
                "thoroughly"
            ],
            "attributes": null,
            "doc": "Clear face caches on all frames.\nOptional THOROUGHLY non-nil means try to free unused fonts, too.",
            "fnname": "Fclear_face_cache",
            "intspec": "0",
            "lname": "clear-face-cache",
            "maxargs": 1,
            "minargs": 0,
            "path": "xfaces.c",
            "sname": "Sclear_face_cache"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Clear font cache of each frame.",
            "fnname": "Fclear_font_cache",
            "intspec": "0",
            "lname": "clear-font-cache",
            "maxargs": 0,
            "minargs": 0,
            "path": "font.c",
            "sname": "Sclear_font_cache"
        },
        {
            "args": [
                "filter",
                "animation_cache"
            ],
            "attributes": null,
            "doc": "Clear the image cache.\nFILTER nil or a frame means clear all images in the selected frame.\nFILTER t means clear the image caches of all frames.\nAnything else means clear only those images that refer to FILTER,\nwhich is then usually a filename.\n\nThis function also clears the image animation cache.  If\nANIMATION-CACHE is non-nil, only the image spec `eq' with\nANIMATION-CACHE is removed, and other image cache entries are not\nevicted.",
            "fnname": "Fclear_image_cache",
            "intspec": "0",
            "lname": "clear-image-cache",
            "maxargs": 2,
            "minargs": 0,
            "path": "image.c",
            "sname": "Sclear_image_cache"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Clear the contents of STRING.\nThis makes STRING unibyte and may change its length.",
            "fnname": "Fclear_string",
            "intspec": "0",
            "lname": "clear-string",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sclear_string"
        },
        {
            "args": [
                "keep_record"
            ],
            "attributes": null,
            "doc": "Clear out the vector that `this-command-keys' returns.\nAlso clear the record of the last 300 input events, unless optional arg\nKEEP-RECORD is non-nil.",
            "fnname": "Fclear_this_command_keys",
            "intspec": "0",
            "lname": "clear-this-command-keys",
            "maxargs": 1,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Sclear_this_command_keys"
        },
        {
            "args": [
                "font_object",
                "frame"
            ],
            "attributes": null,
            "doc": "Close FONT-OBJECT.",
            "fnname": "Fclose_font",
            "intspec": "0",
            "lname": "close-font",
            "maxargs": 2,
            "minargs": 1,
            "path": "font.c",
            "sname": "Sclose_font"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Clear hash table TABLE and return it.",
            "fnname": "Fclrhash",
            "intspec": "0",
            "lname": "clrhash",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sclrhash"
        },
        {
            "args": [
                "coding_system"
            ],
            "attributes": null,
            "doc": "Return the list of aliases of CODING-SYSTEM.",
            "fnname": "Fcoding_system_aliases",
            "intspec": "0",
            "lname": "coding-system-aliases",
            "maxargs": 1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Scoding_system_aliases"
        },
        {
            "args": [
                "coding_system"
            ],
            "attributes": null,
            "doc": "Return the base of CODING-SYSTEM.\nAny alias or subsidiary coding system is not a base coding system.",
            "fnname": "Fcoding_system_base",
            "intspec": "0",
            "lname": "coding-system-base",
            "maxargs": 1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Scoding_system_base"
        },
        {
            "args": [
                "coding_system"
            ],
            "attributes": null,
            "doc": "Return eol-type of CODING-SYSTEM.\nAn eol-type is an integer 0, 1, 2, or a vector of coding systems.\n\nInteger values 0, 1, and 2 indicate a format of end-of-line; LF, CRLF,\nand CR respectively.\n\nA vector value indicates that a format of end-of-line should be\ndetected automatically.  Nth element of the vector is the subsidiary\ncoding system whose eol-type is N.",
            "fnname": "Fcoding_system_eol_type",
            "intspec": "0",
            "lname": "coding-system-eol-type",
            "maxargs": 1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Scoding_system_eol_type"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is nil or a coding-system.\nSee the documentation of `define-coding-system' for information\nabout coding-system objects.",
            "fnname": "Fcoding_system_p",
            "intspec": "0",
            "lname": "coding-system-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Scoding_system_p"
        },
        {
            "args": [
                "coding_system"
            ],
            "attributes": null,
            "doc": "Return the property list of CODING-SYSTEM.",
            "fnname": "Fcoding_system_plist",
            "intspec": "0",
            "lname": "coding-system-plist",
            "maxargs": 1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Scoding_system_plist"
        },
        {
            "args": [
                "highestp"
            ],
            "attributes": null,
            "doc": "Return a list of coding systems ordered by their priorities.\nThe list contains a subset of coding systems; i.e. coding systems\nassigned to each coding category (see `coding-category-list').\n\nHIGHESTP non-nil means just return the highest priority one.",
            "fnname": "Fcoding_system_priority_list",
            "intspec": "0",
            "lname": "coding-system-priority-list",
            "maxargs": 1,
            "minargs": 0,
            "path": "coding.c",
            "sname": "Scoding_system_priority_list"
        },
        {
            "args": [
                "coding_system",
                "prop",
                "val"
            ],
            "attributes": null,
            "doc": "Change value of CODING-SYSTEM's property PROP to VAL.\n\nThe following properties, if set by this function, override the values\nof the corresponding attributes set by `define-coding-system':\n\n  `:mnemonic', `:default-char', `:ascii-compatible-p'\n  `:decode-translation-table', `:encode-translation-table',\n  `:post-read-conversion', `:pre-write-conversion'\n\nSee `define-coding-system' for the description of these properties.\nSee `coding-system-get' and `coding-system-plist' for accessing the\nproperty list of a coding-system.",
            "fnname": "Fcoding_system_put",
            "intspec": "0",
            "lname": "coding-system-put",
            "maxargs": 3,
            "minargs": 3,
            "path": "coding.c",
            "sname": "Scoding_system_put"
        },
        {
            "args": [
                "color1",
                "color2",
                "frame",
                "metric"
            ],
            "attributes": null,
            "doc": "Return an integer distance between COLOR1 and COLOR2 on FRAME.\nCOLOR1 and COLOR2 may be either strings containing the color name,\nor lists of the form (RED GREEN BLUE), each in the range 0 to 65535 inclusive.\nIf FRAME is unspecified or nil, the current frame is used.\nIf METRIC is specified, it should be a function that accepts\ntwo lists of the form (RED GREEN BLUE) aforementioned.\nDespite the name, this is not a true distance metric as it does not satisfy\nthe triangle inequality.",
            "fnname": "Fcolor_distance",
            "intspec": "0",
            "lname": "color-distance",
            "maxargs": 4,
            "minargs": 2,
            "path": "xfaces.c",
            "sname": "Scolor_distance"
        },
        {
            "args": [
                "color",
                "frame"
            ],
            "attributes": null,
            "doc": "Return non-nil if COLOR is a shade of gray (or white or black).\nFRAME specifies the frame and thus the display for interpreting COLOR.\nIf FRAME is nil or omitted, use the selected frame.",
            "fnname": "Fcolor_gray_p",
            "intspec": "0",
            "lname": "color-gray-p",
            "maxargs": 2,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Scolor_gray_p"
        },
        {
            "args": [
                "color",
                "frame",
                "background_p"
            ],
            "attributes": null,
            "doc": "Return non-nil if COLOR can be displayed on FRAME.\nBACKGROUND-P non-nil means COLOR is used as a background.\nOtherwise, this function tells whether it can be used as a foreground.\nIf FRAME is nil or omitted, use the selected frame.\nCOLOR must be a valid color name.",
            "fnname": "Fcolor_supported_p",
            "intspec": "0",
            "lname": "color-supported-p",
            "maxargs": 3,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Scolor_supported_p"
        },
        {
            "args": [
                "spec"
            ],
            "attributes": null,
            "doc": "Parse color SPEC as a numeric color and return (RED GREEN BLUE).\nThis function recognizes the following formats for SPEC:\n\n #RGB, where R, G and B are hex numbers of equal length, 1-4 digits each.\n rgb:R/G/B, where R, G, and B are hex numbers, 1-4 digits each.\n rgbi:R/G/B, where R, G and B are floating-point numbers in [0,1].\n\nIf SPEC is not in one of the above forms, return nil.\n\nEach of the 3 integer members of the resulting list, RED, GREEN, and BLUE,\nis normalized to have its value in [0,65535].",
            "fnname": "Fcolor_values_from_color_spec",
            "intspec": "0",
            "lname": "color-values-from-color-spec",
            "maxargs": 1,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Scolor_values_from_color_spec"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "This function is for use internally in the function `combine-after-change-calls'.",
            "fnname": "Fcombine_after_change_execute",
            "intspec": "0",
            "lname": "combine-after-change-execute",
            "maxargs": 0,
            "minargs": 0,
            "path": "insdel.c",
            "sname": "Scombine_after_change_execute"
        },
        {
            "args": [
                "data",
                "context",
                "signal"
            ],
            "attributes": null,
            "doc": "Produce default output for unhandled error message.\nDefault value of `command-error-function'.",
            "fnname": "Fcommand_error_default_function",
            "intspec": "0",
            "lname": "command-error-default-function",
            "maxargs": 3,
            "minargs": 3,
            "path": "keyboard.c",
            "sname": "Scommand_error_default_function"
        },
        {
            "args": [
                "command"
            ],
            "attributes": null,
            "doc": "Return the modes COMMAND is defined for.\nIf COMMAND is not a command, the return value is nil.\nThe value, if non-nil, is a list of mode name symbols.",
            "fnname": "Fcommand_modes",
            "intspec": "0",
            "lname": "command-modes",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Scommand_modes"
        },
        {
            "args": [
                "command",
                "position",
                "keymaps"
            ],
            "attributes": null,
            "doc": "Return the remapping for command COMMAND.\nReturns nil if COMMAND is not remapped (or not a symbol).\n\nIf the optional argument POSITION is non-nil, it specifies a mouse\nposition as returned by `event-start' and `event-end', and the\nremapping occurs in the keymaps associated with it.  It can also be a\nnumber or marker, in which case the keymap properties at the specified\nbuffer position instead of point are used.  The KEYMAPS argument is\nignored if POSITION is non-nil.\n\nIf the optional argument KEYMAPS is non-nil, it should be a keymap or list of\nkeymaps to search for command remapping.  Otherwise, search for the\nremapping in all currently active keymaps.",
            "fnname": "Fcommand_remapping",
            "intspec": "0",
            "lname": "command-remapping",
            "maxargs": 3,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Scommand_remapping"
        },
        {
            "args": [
                "function",
                "for_call_interactively"
            ],
            "attributes": null,
            "doc": "Non-nil if FUNCTION makes provisions for interactive calling.\nThis means it contains a description for how to read arguments to give it.\nThe value is nil for an invalid function or a symbol with no function\ndefinition.\n\nInteractively callable functions include strings and vectors (treated\nas keyboard macros), lambda-expressions that contain a top-level call\nto `interactive', autoload definitions made by `autoload' with non-nil\nfourth argument, and some of the built-in functions of Lisp.\n\nAlso, a symbol satisfies `commandp' if its function definition does so.\n\nIf the optional argument FOR-CALL-INTERACTIVELY is non-nil,\nthen strings and vectors are not accepted.",
            "fnname": "Fcommandp",
            "intspec": "0",
            "lname": "commandp",
            "maxargs": 2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Scommandp"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Compile the current context as native code to file FILENAME.",
            "fnname": "Fcomp__compile_ctxt_to_file",
            "intspec": "0",
            "lname": "comp--compile-ctxt-to-file",
            "maxargs": 1,
            "minargs": 1,
            "path": "comp.c",
            "sname": "Scomp__compile_ctxt_to_file"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Initialize the native compiler context.\nReturn t on success.",
            "fnname": "Fcomp__init_ctxt",
            "intspec": "0",
            "lname": "comp--init-ctxt",
            "maxargs": 0,
            "minargs": 0,
            "path": "comp.c",
            "sname": "Scomp__init_ctxt"
        },
        {
            "args": [
                "subr_name",
                "trampoline"
            ],
            "attributes": null,
            "doc": "Install a TRAMPOLINE for primitive SUBR-NAME.",
            "fnname": "Fcomp__install_trampoline",
            "intspec": "0",
            "lname": "comp--install-trampoline",
            "maxargs": 2,
            "minargs": 2,
            "path": "comp.c",
            "sname": "Scomp__install_trampoline"
        },
        {
            "args": [
                "name",
                "c_name",
                "minarg",
                "maxarg",
                "type",
                "rest",
                "comp_u"
            ],
            "attributes": null,
            "doc": "Register exported subr.\nThis gets called by late_top_level_run during the load phase.",
            "fnname": "Fcomp__late_register_subr",
            "intspec": "0",
            "lname": "comp--late-register-subr",
            "maxargs": 7,
            "minargs": 7,
            "path": "comp.c",
            "sname": "Scomp__late_register_subr"
        },
        {
            "args": [
                "reloc_idx",
                "c_name",
                "minarg",
                "maxarg",
                "type",
                "rest",
                "comp_u"
            ],
            "attributes": null,
            "doc": "Register anonymous lambda.\nThis gets called by top_level_run during the load phase.",
            "fnname": "Fcomp__register_lambda",
            "intspec": "0",
            "lname": "comp--register-lambda",
            "maxargs": 7,
            "minargs": 7,
            "path": "comp.c",
            "sname": "Scomp__register_lambda"
        },
        {
            "args": [
                "name",
                "c_name",
                "minarg",
                "maxarg",
                "type",
                "rest",
                "comp_u"
            ],
            "attributes": null,
            "doc": "Register exported subr.\nThis gets called by top_level_run during the load phase.",
            "fnname": "Fcomp__register_subr",
            "intspec": "0",
            "lname": "comp--register-subr",
            "maxargs": 7,
            "minargs": 7,
            "path": "comp.c",
            "sname": "Scomp__register_subr"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Release the native compiler context.",
            "fnname": "Fcomp__release_ctxt",
            "intspec": "0",
            "lname": "comp--release-ctxt",
            "maxargs": 0,
            "minargs": 0,
            "path": "comp.c",
            "sname": "Scomp__release_ctxt"
        },
        {
            "args": [
                "subr"
            ],
            "attributes": null,
            "doc": "Support function to hash_native_abi.\nFor internal use.",
            "fnname": "Fcomp__subr_signature",
            "intspec": "0",
            "lname": "comp--subr-signature",
            "maxargs": 1,
            "minargs": 1,
            "path": "comp.c",
            "sname": "Scomp__subr_signature"
        },
        {
            "args": [
                "filename",
                "base_dir"
            ],
            "attributes": null,
            "doc": "Return the absolute .eln file name for source FILENAME.\nThe resulting .eln file name is intended to be used for natively\ncompiling FILENAME.  FILENAME must exist and be readable, but other\nthan that, its leading directories are ignored when constructing\nthe name of the .eln file.\nIf BASE-DIR is non-nil, use it as the directory for the .eln file;\nnon-absolute BASE-DIR is interpreted as relative to `invocation-directory'.\nIf BASE-DIR is omitted or nil, look for the first writable directory\nin `native-comp-eln-load-path', and use as BASE-DIR its subdirectory\nwhose name is given by `comp-native-version-dir'.\nIf FILENAME specifies a preloaded file, the directory for the .eln\nfile is the \\\"preloaded/\\\" subdirectory of the directory determined\nas described above.  FILENAME is considered to be a preloaded file if\nthe value of `comp-file-preloaded-p' is non-nil, or if FILENAME\nappears in the value of the environment variable LISP_PRELOADED;\nthe latter is supposed to be used by the Emacs build procedure.",
            "fnname": "Fcomp_el_to_eln_filename",
            "intspec": "0",
            "lname": "comp-el-to-eln-filename",
            "maxargs": 2,
            "minargs": 1,
            "path": "comp.c",
            "sname": "Scomp_el_to_eln_filename"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return the relative name of the .eln file for FILENAME.\nFILENAME must exist, and if it's a symlink, the target must exist.\nIf FILENAME is compressed, it must have the \\\".gz\\\" extension,\nand Emacs must have been compiled with zlib; the file will be\nuncompressed on the fly to hash its contents.\nValue includes the original base name, followed by 2 hash values,\none for the file name and another for its contents, followed by .eln.",
            "fnname": "Fcomp_el_to_eln_rel_filename",
            "intspec": "0",
            "lname": "comp-el-to-eln-rel-filename",
            "maxargs": 1,
            "minargs": 1,
            "path": "comp.c",
            "sname": "Scomp_el_to_eln_rel_filename"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return libgccjit version in use.\n\nThe return value has the form (MAJOR MINOR PATCHLEVEL) or nil if\nunknown (before GCC version 10).",
            "fnname": "Fcomp_libgccjit_version",
            "intspec": "0",
            "lname": "comp-libgccjit-version",
            "maxargs": 0,
            "minargs": 0,
            "path": "comp.c",
            "sname": "Scomp_libgccjit_version"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if `comp-native-compiler-options' is effective.",
            "fnname": "Fcomp_native_compiler_options_effective_p",
            "intspec": "0",
            "lname": "comp-native-compiler-options-effective-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "comp.c",
            "sname": "Scomp_native_compiler_options_effective_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if `comp-native-driver-options' is effective.",
            "fnname": "Fcomp_native_driver_options_effective_p",
            "intspec": "0",
            "lname": "comp-native-driver-options-effective-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "comp.c",
            "sname": "Scomp_native_driver_options_effective_p"
        },
        {
            "args": [
                "buffer1",
                "start1",
                "end1",
                "buffer2",
                "start2",
                "end2"
            ],
            "attributes": null,
            "doc": "Compare two substrings of two buffers; return result as number.\nReturn -N if first string is less after N-1 chars, +N if first string is\ngreater after N-1 chars, or 0 if strings match.\nThe first substring is in BUFFER1 from START1 to END1 and the second\nis in BUFFER2 from START2 to END2.\nAll arguments may be nil.  If BUFFER1 or BUFFER2 is nil, the current\nbuffer is used.  If START1 or START2 is nil, the value of `point-min'\nin the respective buffers is used.  If END1 or END2 is nil, the value\nof `point-max' in the respective buffers is used.\nThe value of `case-fold-search' in the current buffer\ndetermines whether case is significant or ignored.",
            "fnname": "Fcompare_buffer_substrings",
            "intspec": "0",
            "lname": "compare-buffer-substrings",
            "maxargs": 6,
            "minargs": 6,
            "path": "editfns.c",
            "sname": "Scompare_buffer_substrings"
        },
        {
            "args": [
                "str1",
                "start1",
                "end1",
                "str2",
                "start2",
                "end2",
                "ignore_case"
            ],
            "attributes": null,
            "doc": "Compare the contents of two strings, converting to multibyte if needed.\nThe arguments START1, END1, START2, and END2, if non-nil, are\npositions specifying which parts of STR1 or STR2 to compare.  In\nstring STR1, compare the part between START1 (inclusive) and END1\n\\(exclusive).  If START1 is nil, it defaults to 0, the beginning of\nthe string; if END1 is nil, it defaults to the length of the string.\nLikewise, in string STR2, compare the part between START2 and END2.\nLike in `substring', negative values are counted from the end.\n\nThe strings are compared by the numeric values of their characters.\nFor instance, STR1 is \"less than\" STR2 if its first differing\ncharacter has a smaller numeric value.  If IGNORE-CASE is non-nil,\ncharacters are converted to upper-case before comparing them.  Unibyte\nstrings are converted to multibyte for comparison.\n\nThe value is t if the strings (or specified portions) match.\nIf string STR1 is less, the value is a negative number N;\n  - 1 - N is the number of characters that match at the beginning.\nIf string STR1 is greater, the value is a positive number N;\n  N - 1 is the number of characters that match at the beginning.",
            "fnname": "Fcompare_strings",
            "intspec": "0",
            "lname": "compare-strings",
            "maxargs": 7,
            "minargs": 6,
            "path": "fns.c",
            "sname": "Scompare_strings"
        },
        {
            "args": [
                "prompt",
                "collection",
                "predicate",
                "require_match",
                "initial_input",
                "hist",
                "def",
                "inherit_input_method"
            ],
            "attributes": null,
            "doc": "Read a string in the minibuffer, with completion.\nPROMPT is a string to prompt with; normally it ends in a colon and a space.\nCOLLECTION can be a list of strings, an alist, an obarray or a hash table.\nCOLLECTION can also be a function to do the completion itself.\nPREDICATE limits completion to a subset of COLLECTION.\nSee `try-completion', `all-completions', `test-completion',\nand `completion-boundaries', for more details on completion,\nCOLLECTION, and PREDICATE.  See also Info node `(elisp)Basic Completion'\nfor the details about completion, and Info node `(elisp)Programmed\nCompletion' for expectations from COLLECTION when it's a function.\n\nREQUIRE-MATCH can take the following values:\n- t means that the user is not allowed to exit unless the input is (or\n  completes to) an element of COLLECTION or is null.\n- nil means that the user can exit with any input.\n- `confirm' means that the user can exit with any input, but she needs\n  to confirm her choice if the input is not an element of COLLECTION.\n- `confirm-after-completion' means that the user can exit with any\n  input, but she needs to confirm her choice if she called\n  `minibuffer-complete' right before `minibuffer-complete-and-exit'\n  and the input is not an element of COLLECTION.\n- a function, which will be called with the input as the\n  argument.  If the function returns a non-nil value, the\n  minibuffer is exited with that argument as the value.\n- anything else behaves like t except that typing RET does not exit if it\n  does non-null completion.\n\nIf the input is null, `completing-read' returns DEF, or the first\nelement of the list of default values, or an empty string if DEF is\nnil, regardless of the value of REQUIRE-MATCH.\n\nIf INITIAL-INPUT is non-nil, insert it in the minibuffer initially,\n  with point positioned at the end.  If it is (STRING . POSITION), the\n  initial input is STRING, but point is placed at _zero-indexed_\n  position POSITION in STRING.  (*Note* that this is different from\n  `read-from-minibuffer' and related functions, which use one-indexing\n  for POSITION.)  This feature is deprecated--it is best to pass nil\n  for INITIAL-INPUT and supply the default value DEF instead.  The\n  user can yank the default value into the minibuffer easily using\n  \\\\<minibuffer-local-map>\\\\[next-history-element].\n\nHIST, if non-nil, specifies a history list and optionally the initial\n  position in the list.  It can be a symbol, which is the history list\n  variable to use, or it can be a cons cell (HISTVAR . HISTPOS).  In\n  that case, HISTVAR is the history list variable to use, and HISTPOS\n  is the initial position (the position in the list used by the\n  minibuffer history commands).  For consistency, you should also\n  specify that element of the history as the value of INITIAL-INPUT.\n  (This is the only case in which you should use INITIAL-INPUT instead\n  of DEF.)  Positions are counted starting from 1 at the beginning of\n  the list.  The variable `history-length' controls the maximum length\n  of a history list.  If HIST is t, history is not recorded.\n\nDEF, if non-nil, is the default value or the list of default values.\n\nIf INHERIT-INPUT-METHOD is non-nil, the minibuffer inherits the\n  current input method and the setting of `enable-multibyte-characters'.\n\nCompletion ignores case if the ambient value of\n  `completion-ignore-case' is non-nil.\n\nSee also `completing-read-function'.",
            "fnname": "Fcompleting_read",
            "intspec": "0",
            "lname": "completing-read",
            "maxargs": 8,
            "minargs": 2,
            "path": "minibuf.c",
            "sname": "Scompleting_read"
        },
        {
            "args": [
                "start",
                "end",
                "components",
                "modification_func"
            ],
            "attributes": null,
            "doc": "Internal use only.\n\nCompose text in the region between START and END.\nOptional 3rd and 4th arguments are COMPONENTS and MODIFICATION-FUNC\nfor the composition.  See `compose-region' for more details.",
            "fnname": "Fcompose_region_internal",
            "intspec": "0",
            "lname": "compose-region-internal",
            "maxargs": 4,
            "minargs": 2,
            "path": "composite.c",
            "sname": "Scompose_region_internal"
        },
        {
            "args": [
                "string",
                "start",
                "end",
                "components",
                "modification_func"
            ],
            "attributes": null,
            "doc": "Internal use only.\n\nCompose text between indices START and END of STRING, where\nSTART and END are treated as in `substring'.  Optional 4th\nand 5th arguments are COMPONENTS and MODIFICATION-FUNC\nfor the composition.  See `compose-string' for more details.",
            "fnname": "Fcompose_string_internal",
            "intspec": "0",
            "lname": "compose-string-internal",
            "maxargs": 5,
            "minargs": 3,
            "path": "composite.c",
            "sname": "Scompose_string_internal"
        },
        {
            "args": [
                "from",
                "to",
                "font_object",
                "string"
            ],
            "attributes": null,
            "doc": "Return a glyph-string for characters between FROM and TO.\nIf the glyph string is for graphic display, FONT-OBJECT must be\na font-object to use for those characters.\nOtherwise (for terminal display), FONT-OBJECT must be a terminal ID, a\nframe, or nil for the selected frame's terminal device.\n\nIf the optional 4th argument STRING is not nil, it is a string\ncontaining the target characters between indices FROM and TO,\nwhich are treated as in `substring'.  Otherwise FROM and TO are\ncharacter positions in current buffer; they can be in either order,\nand can be integers or markers.\n\nA glyph-string is a vector containing information about how to display\na specific character sequence.  The format is:\n   [HEADER ID GLYPH ...]\n\nHEADER is a vector of this form:\n    [FONT-OBJECT CHAR ...]\nwhere\n    FONT-OBJECT is a font-object for all glyphs in the glyph-string,\n    or the terminal coding system of the specified terminal.\n    CHARs are characters to be composed by GLYPHs.\n\nID is an identification number of the glyph-string.  It may be nil if\nnot yet shaped.\n\nGLYPH is a vector whose elements have this form:\n    [ FROM-IDX TO-IDX C CODE WIDTH LBEARING RBEARING ASCENT DESCENT\n      [ [X-OFF Y-OFF WADJUST] | nil] ]\nwhere\n    FROM-IDX and TO-IDX are used internally and should not be touched.\n    C is the character of the glyph.\n    CODE is the glyph-code of C in FONT-OBJECT.\n    WIDTH thru DESCENT are the metrics (in pixels) of the glyph.\n    X-OFF and Y-OFF are offsets to the base position for the glyph.\n    WADJUST is the adjustment to the normal width of the glyph.\n\nIf GLYPH is nil, the remaining elements of the glyph-string vector\nshould be ignored.",
            "fnname": "Fcomposition_get_gstring",
            "intspec": "0",
            "lname": "composition-get-gstring",
            "maxargs": 4,
            "minargs": 4,
            "path": "composite.c",
            "sname": "Scomposition_get_gstring"
        },
        {
            "args": [
                "rules"
            ],
            "attributes": null,
            "doc": "Sort composition RULES by their LOOKBACK parameter.\n\nIf RULES include just one rule, return RULES.\nOtherwise, return a new list of rules where all the rules are\narranged in decreasing order of the LOOKBACK parameter of the\nrules (the second element of the rule's vector).  This is required\nwhen combining composition rules from different sources, because\nof the way buffer text is examined for matching one of the rules.",
            "fnname": "Fcomposition_sort_rules",
            "intspec": "0",
            "lname": "composition-sort-rules",
            "maxargs": 1,
            "minargs": 1,
            "path": "composite.c",
            "sname": "Scomposition_sort_rules"
        },
        {
            "args": [
                "from",
                "frompos",
                "to",
                "topos",
                "width",
                "offsets",
                "window"
            ],
            "attributes": null,
            "doc": "Scan through the current buffer, calculating screen position.\nScan the current buffer forward from offset FROM,\nassuming it is at position FROMPOS--a cons of the form (HPOS . VPOS)--\nto position TO or position TOPOS--another cons of the form (HPOS . VPOS)--\nand return the ending buffer position and screen location.\n\nIf TOPOS is nil, the actual width and height of the window's\ntext area are used.\n\nThere are three additional arguments:\n\nWIDTH is the number of columns available to display text;\nthis affects handling of continuation lines.  A value of nil\ncorresponds to the actual number of available text columns.\n\nOFFSETS is either nil or a cons cell (HSCROLL . TAB-OFFSET).\nHSCROLL is the number of columns not being displayed at the left\nmargin; this is usually taken from a window's hscroll member.\nTAB-OFFSET is the number of columns of the first tab that aren't\nbeing displayed, perhaps because the line was continued within it.\nIf OFFSETS is nil, HSCROLL and TAB-OFFSET are assumed to be zero.\n\nWINDOW is the window to operate on.  It is used to choose the display table;\nif it is showing the current buffer, it is used also for\ndeciding which overlay properties apply.\nNote that `compute-motion' always operates on the current buffer.\n\nThe value is a list of five elements:\n  (POS HPOS VPOS PREVHPOS CONTIN)\nPOS is the buffer position where the scan stopped.\nVPOS is the vertical position where the scan stopped.\nHPOS is the horizontal position where the scan stopped.\n\nPREVHPOS is the horizontal position one character back from POS.\nCONTIN is t if a line was continued after (or within) the previous character.\n\nFor example, to find the buffer position of column COL of line LINE\nof a certain window, pass the window's starting location as FROM\nand the window's upper-left coordinates as FROMPOS.\nPass the buffer's (point-max) as TO, to limit the scan to the end of the\nvisible section of the buffer, and pass LINE and COL as TOPOS.",
            "fnname": "Fcompute_motion",
            "intspec": "0",
            "lname": "compute-motion",
            "maxargs": 7,
            "minargs": 7,
            "path": "indent.c",
            "sname": "Scompute_motion"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Concatenate all the arguments and make the result a string.\nThe result is a string whose elements are the elements of all the arguments.\nEach argument may be a string or a list or vector of characters (integers).\n\nValues of the `composition' property of the result are not guaranteed\nto be `eq'.\nusage: (concat &rest SEQUENCES)",
            "fnname": "Fconcat",
            "intspec": "0",
            "lname": "concat",
            "maxargs": -1,
            "minargs": 0,
            "path": "fns.c",
            "sname": "Sconcat"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Try each clause until one succeeds.\nEach clause looks like (CONDITION BODY...).  CONDITION is evaluated\nand, if the value is non-nil, this clause succeeds:\nthen the expressions in BODY are evaluated and the last one's\nvalue is the value of the cond-form.\nIf a clause has one element, as in (CONDITION), then the cond-form\nreturns CONDITION's value, if that is non-nil.\nIf no clause succeeds, cond returns nil.\nusage: (cond CLAUSES...)",
            "fnname": "Fcond",
            "intspec": "0",
            "lname": "cond",
            "maxargs": -2,
            "minargs": 0,
            "path": "eval.c",
            "sname": "Scond"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Regain control when an error is signaled.\nExecutes BODYFORM and returns its value if no error happens.\nEach element of HANDLERS looks like (CONDITION-NAME BODY...)\nor (:success BODY...), where the BODY is made of Lisp expressions.\n\nA handler is applicable to an error if CONDITION-NAME is one of the\nerror's condition names.  Handlers may also apply when non-error\nsymbols are signaled (e.g., `quit').  A CONDITION-NAME of t applies to\nany symbol, including non-error symbols.  If multiple handlers are\napplicable, only the first one runs.\n\nThe car of a handler may be a list of condition names instead of a\nsingle condition name; then it handles all of them.  If the special\ncondition name `debug' is present in this list, it allows another\ncondition in the list to run the debugger if `debug-on-error' and the\nother usual mechanisms say it should (otherwise, `condition-case'\nsuppresses the debugger).\n\nWhen a handler handles an error, control returns to the `condition-case'\nand it executes the handler's BODY...\nwith VAR bound to (ERROR-SYMBOL . SIGNAL-DATA) from the error.\n\\(If VAR is nil, the handler can't access that information.)\nThen the value of the last BODY form is returned from the `condition-case'\nexpression.\n\nThe special handler (:success BODY...) is invoked if BODYFORM terminated\nwithout signaling an error.  BODY is then evaluated with VAR bound to\nthe value returned by BODYFORM.\n\nSee also the function `signal' for more info.\nusage: (condition-case VAR BODYFORM &rest HANDLERS)",
            "fnname": "Fcondition_case",
            "intspec": "0",
            "lname": "condition-case",
            "maxargs": -2,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Scondition_case"
        },
        {
            "args": [
                "cond"
            ],
            "attributes": null,
            "doc": "Return the mutex associated with condition variable COND.",
            "fnname": "Fcondition_mutex",
            "intspec": "0",
            "lname": "condition-mutex",
            "maxargs": 1,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Scondition_mutex"
        },
        {
            "args": [
                "cond"
            ],
            "attributes": null,
            "doc": "Return the name of condition variable COND.\nIf no name was given when COND was created, return nil.",
            "fnname": "Fcondition_name",
            "intspec": "0",
            "lname": "condition-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Scondition_name"
        },
        {
            "args": [
                "cond",
                "all"
            ],
            "attributes": null,
            "doc": "Notify COND, a condition variable.\nThis wakes a thread waiting on COND.\nIf ALL is non-nil, all waiting threads are awoken.\n\nThe mutex associated with COND must be held when this is called.\nIt is an error if it is not held.\n\nThis releases COND's mutex when notifying COND.  When\n`condition-notify' returns, the mutex will again be locked by this\nthread.",
            "fnname": "Fcondition_notify",
            "intspec": "0",
            "lname": "condition-notify",
            "maxargs": 2,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Scondition_notify"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a condition variable.",
            "fnname": "Fcondition_variable_p",
            "intspec": "0",
            "lname": "condition-variable-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Scondition_variable_p"
        },
        {
            "args": [
                "cond"
            ],
            "attributes": null,
            "doc": "Wait for the condition variable COND to be notified.\nCOND is the condition variable to wait on.\n\nThe mutex associated with COND must be held when this is called.\nIt is an error if it is not held.\n\nThis releases the mutex and waits for COND to be notified or for\nthis thread to be signaled with `thread-signal'.  When\n`condition-wait' returns, COND's mutex will again be locked by\nthis thread.",
            "fnname": "Fcondition_wait",
            "intspec": "0",
            "lname": "condition-wait",
            "maxargs": 1,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Scondition_wait"
        },
        {
            "args": [
                "car",
                "cdr"
            ],
            "attributes": null,
            "doc": "Create a new cons, give it CAR and CDR as components, and return it.",
            "fnname": "Fcons",
            "intspec": "0",
            "lname": "cons",
            "maxargs": 2,
            "minargs": 2,
            "path": "alloc.c",
            "sname": "Scons"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is a cons cell.",
            "fnname": "Fconsp",
            "intspec": "0",
            "lname": "consp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sconsp"
        },
        {
            "args": [
                "new_pos",
                "old_pos",
                "escape_from_edge",
                "only_in_line",
                "inhibit_capture_property"
            ],
            "attributes": null,
            "doc": "Return the position closest to NEW-POS that is in the same field as OLD-POS.\nA field is a region of text with the same `field' property.\n\nIf NEW-POS is nil, then use the current point instead, and move point\nto the resulting constrained position, in addition to returning that\nposition.\n\nIf OLD-POS is at the boundary of two fields, then the allowable\npositions for NEW-POS depends on the value of the optional argument\nESCAPE-FROM-EDGE: If ESCAPE-FROM-EDGE is nil, then NEW-POS is\nconstrained to the field that has the same `field' char-property\nas any new characters inserted at OLD-POS, whereas if ESCAPE-FROM-EDGE\nis non-nil, NEW-POS is constrained to the union of the two adjacent\nfields.  Additionally, if two fields are separated by another field with\nthe special value `boundary', then any point within this special field is\nalso considered to be `on the boundary'.\n\nIf the optional argument ONLY-IN-LINE is non-nil and constraining\nNEW-POS would move it to a different line, NEW-POS is returned\nunconstrained.  This is useful for commands that move by line, like\n\\\\[next-line] or \\\\[beginning-of-line], which should generally respect field boundaries\nonly in the case where they can still move to the right line.\n\nIf the optional argument INHIBIT-CAPTURE-PROPERTY is non-nil, and OLD-POS has\na non-nil property of that name, then any field boundaries are ignored.\n\nField boundaries are not noticed if `inhibit-field-text-motion' is non-nil.",
            "fnname": "Fconstrain_to_field",
            "intspec": "0",
            "lname": "constrain-to-field",
            "maxargs": 5,
            "minargs": 2,
            "path": "editfns.c",
            "sname": "Sconstrain_to_field"
        },
        {
            "args": [
                "process",
                "current_group"
            ],
            "attributes": null,
            "doc": "Continue process PROCESS.  May be process or name of one.\nSee function `interrupt-process' for more details on usage.\nIf PROCESS is a network or serial process, resume handling of incoming\ntraffic.",
            "fnname": "Fcontinue_process",
            "intspec": "0",
            "lname": "continue-process",
            "maxargs": 2,
            "minargs": 0,
            "path": "process.c",
            "sname": "Scontinue_process"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return non-nil if TERMINAL is the controlling tty of the Emacs process.\n\nTERMINAL can be a terminal object, a frame, or nil (meaning the\nselected frame's terminal).  This function always returns nil if\nTERMINAL is not on a tty device.",
            "fnname": "Fcontrolling_tty_p",
            "intspec": "0",
            "lname": "controlling-tty-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "term.c",
            "sname": "Scontrolling_tty_p"
        },
        {
            "args": [
                "coordinates",
                "window"
            ],
            "attributes": null,
            "doc": "Return non-nil if COORDINATES are in WINDOW.\nWINDOW must be a live window and defaults to the selected one.\nCOORDINATES is a cons of the form (X . Y), X and Y being distances\nmeasured in characters from the upper-left corner of the frame.\n\\(0 . 0) denotes the character in the upper left corner of the\nframe.\nIf COORDINATES are in the text portion of WINDOW,\n   the coordinates relative to the window are returned.\nIf they are in the bottom divider of WINDOW, `bottom-divider' is returned.\nIf they are in the right divider of WINDOW, `right-divider' is returned.\nIf they are in the mode line of WINDOW, `mode-line' is returned.\nIf they are in the header line of WINDOW, `header-line' is returned.\nIf they are in the tab line of WINDOW, `tab-line' is returned.\nIf they are in the left fringe of WINDOW, `left-fringe' is returned.\nIf they are in the right fringe of WINDOW, `right-fringe' is returned.\nIf they are on the border between WINDOW and its right sibling,\n  `vertical-line' is returned.\nIf they are in the windows's left or right marginal areas, `left-margin'\\n\\\n  or `right-margin' is returned.",
            "fnname": "Fcoordinates_in_window_p",
            "intspec": "0",
            "lname": "coordinates-in-window-p",
            "maxargs": 2,
            "minargs": 2,
            "path": "window.c",
            "sname": "Scoordinates_in_window_p"
        },
        {
            "args": [
                "alist"
            ],
            "attributes": null,
            "doc": "Return a copy of ALIST.\nThis is an alist which represents the same mapping from objects to objects,\nbut does not share the alist structure with ALIST.\nThe objects mapped (cars and cdrs of elements of the alist)\nare shared, however.\nElements of ALIST that are not conses are also shared.",
            "fnname": "Fcopy_alist",
            "intspec": "0",
            "lname": "copy-alist",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Scopy_alist"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Construct a new category table and return it.\nIt is a copy of the TABLE, which defaults to the standard category table.",
            "fnname": "Fcopy_category_table",
            "intspec": "0",
            "lname": "copy-category-table",
            "maxargs": 1,
            "minargs": 0,
            "path": "category.c",
            "sname": "Scopy_category_table"
        },
        {
            "args": [
                "file",
                "newname",
                "ok_if_already_exists",
                "keep_time",
                "preserve_uid_gid",
                "preserve_permissions"
            ],
            "attributes": null,
            "doc": "Copy FILE to NEWNAME.  Both args must be strings.\nIf NEWNAME is a directory name, copy FILE to a like-named file under\nNEWNAME.  For NEWNAME to be recognized as a directory name, it should\nend in a slash.\n\nThis function always sets the file modes of the output file to match\nthe input file.\n\nThe optional third argument OK-IF-ALREADY-EXISTS specifies what to do\nif file NEWNAME already exists.  If OK-IF-ALREADY-EXISTS is nil,\nsignal a `file-already-exists' error without overwriting.  If\nOK-IF-ALREADY-EXISTS is an integer, request confirmation from the user\nabout overwriting; this is what happens in interactive use with M-x.\nAny other value for OK-IF-ALREADY-EXISTS means to overwrite the\nexisting file.\n\nFourth arg KEEP-TIME non-nil means give the output file the same\nlast-modified time as the old one.  (This works on only some systems.)\n\nA prefix arg makes KEEP-TIME non-nil.\n\nIf PRESERVE-UID-GID is non-nil, try to transfer the uid and gid of\nFILE to NEWNAME.\n\nIf PRESERVE-PERMISSIONS is non-nil, copy permissions of FILE to NEWNAME;\nthis includes the file modes, along with ACL entries and SELinux\ncontext if present.  Otherwise, if NEWNAME is created its file\npermission bits are those of FILE, masked by the default file\npermissions.",
            "fnname": "Fcopy_file",
            "intspec": "fCopy file: \nGCopy %s to file: \np\nP",
            "lname": "copy-file",
            "maxargs": 6,
            "minargs": 2,
            "path": "fileio.c",
            "sname": "Scopy_file"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Return a copy of hash table TABLE.",
            "fnname": "Fcopy_hash_table",
            "intspec": "0",
            "lname": "copy-hash-table",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Scopy_hash_table"
        },
        {
            "args": [
                "keymap"
            ],
            "attributes": null,
            "doc": "Return a copy of the keymap KEYMAP.\n\nNote that this is almost never needed.  If you want a keymap that's like\nanother yet with a few changes, you should use keymap inheritance rather\nthan copying.  That is, something like:\n\n    (defvar-keymap foo-map\n      :parent <theirmap>\n      ...)\n\nOr, if you need to support Emacs versions older than 29:\n\n    (let ((map (make-sparse-keymap)))\n      (set-keymap-parent map <theirmap>)\n      (define-key map ...)\n      ...)\n\nAfter performing `copy-keymap', the copy starts out with the same definitions\nof KEYMAP, but changing either the copy or KEYMAP does not affect the other.\nAny key definitions that are subkeymaps are recursively copied.\nHowever, a key definition which is a symbol whose definition is a keymap\nis not copied.",
            "fnname": "Fcopy_keymap",
            "intspec": "0",
            "lname": "copy-keymap",
            "maxargs": 1,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Scopy_keymap"
        },
        {
            "args": [
                "marker",
                "type"
            ],
            "attributes": null,
            "doc": "Return a new marker pointing at the same place as MARKER.\nIf argument is a number, makes a new marker pointing\nat that position in the current buffer.\nIf MARKER is not specified, the new marker does not point anywhere.\nThe optional argument TYPE specifies the insertion type of the new marker;\nsee `marker-insertion-type'.",
            "fnname": "Fcopy_marker",
            "intspec": "0",
            "lname": "copy-marker",
            "maxargs": 2,
            "minargs": 0,
            "path": "marker.c",
            "sname": "Scopy_marker"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return a copy of a list, vector, string, char-table or record.\nThe elements of a list, vector or record are not copied; they are\nshared with the original.  See Info node `(elisp) Sequence Functions'\nfor more details about this sharing and its effects.\nIf the original sequence is empty, this function may return\nthe same empty object instead of its copy.",
            "fnname": "Fcopy_sequence",
            "intspec": "0",
            "lname": "copy-sequence",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Scopy_sequence"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Construct a new syntax table and return it.\nIt is a copy of the TABLE, which defaults to the standard syntax table.",
            "fnname": "Fcopy_syntax_table",
            "intspec": "0",
            "lname": "copy-syntax-table",
            "maxargs": 1,
            "minargs": 0,
            "path": "syntax.c",
            "sname": "Scopy_syntax_table"
        },
        {
            "args": [
                "x1",
                "x2"
            ],
            "attributes": null,
            "doc": "Copy sign of X2 to value of X1, and return the result.\nCause an error if X1 or X2 is not a float.",
            "fnname": "Fcopysign",
            "intspec": "0",
            "lname": "copysign",
            "maxargs": 2,
            "minargs": 2,
            "path": "floatfns.c",
            "sname": "Scopysign"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return the cosine of ARG.",
            "fnname": "Fcos",
            "intspec": "0",
            "lname": "cos",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Scos"
        },
        {
            "args": [
                "olp",
                "position"
            ],
            "attributes": null,
            "doc": "Return a list of the currently active keymaps.\nOLP if non-nil indicates that we should obey `overriding-local-map' and\n`overriding-terminal-local-map'.  POSITION can specify a click position\nlike in the respective argument of `key-binding'.",
            "fnname": "Fcurrent_active_maps",
            "intspec": "0",
            "lname": "current-active-maps",
            "maxargs": 2,
            "minargs": 0,
            "path": "keymap.c",
            "sname": "Scurrent_active_maps"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return paragraph direction at point in BUFFER.\nValue is either `left-to-right' or `right-to-left'.\nIf BUFFER is omitted or nil, it defaults to the current buffer.\n\nParagraph direction determines how the text in the paragraph is displayed.\nIn left-to-right paragraphs, text begins at the left margin of the window\nand the reading direction is generally left to right.  In right-to-left\nparagraphs, text begins at the right margin and is read from right to left.\n\nSee also `bidi-paragraph-direction'.",
            "fnname": "Fcurrent_bidi_paragraph_direction",
            "intspec": "0",
            "lname": "current-bidi-paragraph-direction",
            "maxargs": 1,
            "minargs": 0,
            "path": "xdisp.c",
            "sname": "Scurrent_bidi_paragraph_direction"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current buffer as a Lisp object.",
            "fnname": "Fcurrent_buffer",
            "intspec": "0",
            "lname": "current-buffer",
            "maxargs": 0,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Scurrent_buffer"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the case table of the current buffer.",
            "fnname": "Fcurrent_case_table",
            "intspec": "0",
            "lname": "current-case-table",
            "maxargs": 0,
            "minargs": 0,
            "path": "casetab.c",
            "sname": "Scurrent_case_table"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the horizontal position of point.  Beginning of line is column 0.\nThis is calculated by adding together the widths of all the displayed\nrepresentations of the character between the start of the previous line\nand point (e.g., control characters will have a width of 2 or 4, tabs\nwill have a variable width).\nIgnores finite width of frame, which means that this function may return\nvalues greater than (frame-width).\nIn a buffer with very long lines, the value will be an approximation,\nbecause calculating the exact number is very expensive.\nWhether the line is visible (if `selective-display' is t) has no effect;\nhowever, ^M is treated as end of line when `selective-display' is t.\nText that has an invisible property is considered as having width 0, unless\n`buffer-invisibility-spec' specifies that it is replaced by an ellipsis.",
            "fnname": "Fcurrent_column",
            "intspec": "0",
            "lname": "current-column",
            "maxargs": 0,
            "minargs": 0,
            "path": "indent.c",
            "sname": "Scurrent_column"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current CPU time along with its resolution.\nThe return value is a pair (CPU-TICKS . TICKS-PER-SEC).\nThe CPU-TICKS counter can wrap around, so values cannot be meaningfully\ncompared if too much time has passed between them.",
            "fnname": "Fcurrent_cpu_time",
            "intspec": "0",
            "lname": "current-cpu-time",
            "maxargs": 0,
            "minargs": 0,
            "path": "timefns.c",
            "sname": "Scurrent_cpu_time"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current global keymap.",
            "fnname": "Fcurrent_global_map",
            "intspec": "0",
            "lname": "current-global-map",
            "maxargs": 0,
            "minargs": 0,
            "path": "keymap.c",
            "sname": "Scurrent_global_map"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current length of Emacs idleness, or nil.\nThe value when Emacs is idle is a Lisp timestamp in the style of\n`current-time'.\n\nThe value when Emacs is not idle is nil.\n\nIf the value is a list of four integers (HIGH LOW USEC PSEC), then PSEC\nis a multiple of the system clock resolution.",
            "fnname": "Fcurrent_idle_time",
            "intspec": "0",
            "lname": "current-idle-time",
            "maxargs": 0,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Scurrent_idle_time"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the indentation of the current line.\nThis is the horizontal position of the character following any initial\nwhitespace.\nText that has an invisible property is considered as having width 0, unless\n`buffer-invisibility-spec' specifies that it is replaced by an ellipsis.",
            "fnname": "Fcurrent_indentation",
            "intspec": "0",
            "lname": "current-indentation",
            "maxargs": 0,
            "minargs": 0,
            "path": "indent.c",
            "sname": "Scurrent_indentation"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return information about the way Emacs currently reads keyboard input.\nThe value is a list of the form (INTERRUPT FLOW META QUIT), where\n  INTERRUPT is non-nil if Emacs is using interrupt-driven input; if\n    nil, Emacs is using CBREAK mode.\n  FLOW is non-nil if Emacs uses ^S/^Q flow control for output to the\n    terminal; this does not apply if Emacs uses interrupt-driven input.\n  META is t if accepting 8-bit unencoded input with 8th bit as Meta flag.\n  META is `encoded' if accepting 8-bit encoded input with 8th bit as\n    Meta flag which has to be interpreted after decoding the input.\n  META is nil if ignoring the top bit of input, on the assumption that\n    it is a parity bit.\n  META is neither t nor nil if accepting 8-bit input and using\n    all 8 bits as the character code.\n  QUIT is the character Emacs currently uses to quit.\nThe elements of this list correspond to the arguments of\n`set-input-mode'.",
            "fnname": "Fcurrent_input_mode",
            "intspec": "0",
            "lname": "current-input-mode",
            "maxargs": 0,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Scurrent_input_mode"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return current buffer's local keymap, or nil if it has none.\nNormally the local keymap is set by the major mode with `use-local-map'.",
            "fnname": "Fcurrent_local_map",
            "intspec": "0",
            "lname": "current-local-map",
            "maxargs": 0,
            "minargs": 0,
            "path": "keymap.c",
            "sname": "Scurrent_local_map"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the string currently displayed in the echo area, or nil if none.",
            "fnname": "Fcurrent_message",
            "intspec": "0",
            "lname": "current-message",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Scurrent_message"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of keymaps for the minor modes of the current buffer.",
            "fnname": "Fcurrent_minor_mode_maps",
            "intspec": "0",
            "lname": "current-minor-mode-maps",
            "maxargs": 0,
            "minargs": 0,
            "path": "keymap.c",
            "sname": "Scurrent_minor_mode_maps"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current thread.",
            "fnname": "Fcurrent_thread",
            "intspec": "0",
            "lname": "current-thread",
            "maxargs": 0,
            "minargs": 0,
            "path": "thread.c",
            "sname": "Scurrent_thread"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current time, as the number of seconds since 1970-01-01 00:00:00.\nIf the variable `current-time-list' is nil, the time is returned as a\npair of integers (TICKS . HZ), where TICKS counts clock ticks and HZ\nis the clock ticks per second.  Otherwise, the time is returned as a\nlist of integers (HIGH LOW USEC PSEC) where HIGH has the most\nsignificant bits of the seconds, LOW has the least significant 16\nbits, and USEC and PSEC are the microsecond and picosecond counts.\n\nYou can use `time-convert' to get a particular timestamp form\nregardless of the value of `current-time-list'.",
            "fnname": "Fcurrent_time",
            "intspec": "0",
            "lname": "current-time",
            "maxargs": 0,
            "minargs": 0,
            "path": "timefns.c",
            "sname": "Scurrent_time"
        },
        {
            "args": [
                "specified_time",
                "zone"
            ],
            "attributes": null,
            "doc": "Return the current local time, as a human-readable string.\nPrograms can use this function to decode a time,\nsince the number of columns in each field is fixed\nif the year is in the range 1000-9999.\nThe format is `Sun Sep 16 01:03:52 1973'.\nHowever, see also the functions `decode-time' and `format-time-string'\nwhich provide a much more powerful and general facility.\n\nIf SPECIFIED-TIME is given, it is the time value to format instead of\nthe current time.  See `format-time-string' for the various forms of a\ntime value.\n\nThe optional ZONE is omitted or nil for Emacs local time, t for\nUniversal Time, `wall' for system wall clock time, or a string as in\nthe TZ environment variable.  It can also be a list (as from\n`current-time-zone') or an integer (as from `decode-time') applied\nwithout consideration for daylight saving time.",
            "fnname": "Fcurrent_time_string",
            "intspec": "0",
            "lname": "current-time-string",
            "maxargs": 2,
            "minargs": 0,
            "path": "timefns.c",
            "sname": "Scurrent_time_string"
        },
        {
            "args": [
                "specified_time",
                "zone"
            ],
            "attributes": null,
            "doc": "Return the offset and name for the local time zone.\nThis returns a list of the form (OFFSET NAME).\nOFFSET is an integer number of seconds ahead of UTC (east of Greenwich).\n    A negative value means west of Greenwich.\nNAME is a string giving the name of the time zone.\nIf SPECIFIED-TIME is given, the time zone offset is determined from it\ninstead of using the current time.  The argument should be a Lisp\ntime value; see `format-time-string' for the various forms of a time\nvalue.\n\nThe optional ZONE is omitted or nil for Emacs local time, t for\nUniversal Time, `wall' for system wall clock time, or a string as in\nthe TZ environment variable.  It can also be a list (as from\n`current-time-zone') or an integer (as from `decode-time') applied\nwithout consideration for daylight saving time.\n\nSome operating systems cannot provide all this information to Emacs;\nin this case, `current-time-zone' returns a list containing nil for\nthe data it can't find.",
            "fnname": "Fcurrent_time_zone",
            "intspec": "0",
            "lname": "current-time-zone",
            "maxargs": 2,
            "minargs": 0,
            "path": "timefns.c",
            "sname": "Scurrent_time_zone"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return an object representing the current window configuration of FRAME.\nIf FRAME is nil or omitted, use the selected frame.\nThis describes the number of windows, their sizes and current buffers,\nand for each displayed buffer, where display starts, and the position of\npoint.  An exception is made for point in the current buffer:\nits value is -not- saved.\nThis also records the currently selected frame, and FRAME's focus\nredirection (see `redirect-frame-focus').  The variable\n`window-persistent-parameters' specifies which window parameters are\nsaved by this function.",
            "fnname": "Fcurrent_window_configuration",
            "intspec": "0",
            "lname": "current-window-configuration",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Scurrent_window_configuration"
        },
        {
            "args": [
                "file",
                "absolute_p"
            ],
            "attributes": null,
            "doc": "Convert a Windows-style file name FILE to a Cygwin file name.\nIf ABSOLUTE-P is non-nil, return an absolute file name.\nFor the reverse operation, see `cygwin-convert-file-name-to-windows'.",
            "fnname": "Fcygwin_convert_file_name_from_windows",
            "intspec": "0",
            "lname": "cygwin-convert-file-name-from-windows",
            "maxargs": 2,
            "minargs": 1,
            "path": "cygw32.c",
            "sname": "Scygwin_convert_file_name_from_windows"
        },
        {
            "args": [
                "file",
                "absolute_p"
            ],
            "attributes": null,
            "doc": "Convert a Cygwin file name FILE to a Windows-style file name.\nIf ABSOLUTE-P is non-nil, return an absolute file name.\nFor the reverse operation, see `cygwin-convert-file-name-from-windows'.",
            "fnname": "Fcygwin_convert_file_name_to_windows",
            "intspec": "0",
            "lname": "cygwin-convert-file-name-to-windows",
            "maxargs": 2,
            "minargs": 1,
            "path": "cygw32.c",
            "sname": "Scygwin_convert_file_name_to_windows"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Mark the Emacs daemon as being initialized.\nThis finishes the daemonization process by doing the other half of detaching\nfrom the parent process and its tty file descriptors.",
            "fnname": "Fdaemon_initialized",
            "intspec": "0",
            "lname": "daemon-initialized",
            "maxargs": 0,
            "minargs": 0,
            "path": "emacs.c",
            "sname": "Sdaemon_initialized"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return non-nil if the current emacs process is a daemon.\nIf the daemon was given a name argument, return that name.",
            "fnname": "Fdaemonp",
            "intspec": "0",
            "lname": "daemonp",
            "maxargs": 0,
            "minargs": 0,
            "path": "emacs.c",
            "sname": "Sdaemonp"
        },
        {
            "args": [
                "bus",
                "private"
            ],
            "attributes": null,
            "doc": "Establish the connection to D-Bus BUS.\n\nThis function is dbus internal.  You almost certainly want to use\n`dbus-init-bus'.\n\nBUS can be either the symbol `:system' or the symbol `:session', or it\ncan be a string denoting the address of the corresponding bus.  For\nthe system and session buses, this function is called when loading\n`dbus.el', there is no need to call it again.\n\nA special case is BUS being the symbol `:system-private' or\n`:session-private'.  These symbols still denote the system or session\nbus, but using a private connection.  They should not be used outside\ndbus.el.\n\nThe function returns a number, which counts the connections this Emacs\nsession has established to the BUS under the same unique name (see\n`dbus-get-unique-name').  It depends on the libraries Emacs is linked\nwith, and on the environment Emacs is running.  For example, if Emacs\nis linked with the gtk toolkit, and it runs in a GTK-aware environment\nlike Gnome, another connection might already be established.\n\nWhen PRIVATE is non-nil, a new connection is established instead of\nreusing an existing one.  It results in a new unique name at the bus.\nThis can be used, if it is necessary to distinguish from another\nconnection used in the same Emacs process, like the one established by\nGTK+.  It should be used with care for at least the `:system' and\n`:session' buses, because other Emacs Lisp packages might already use\nthis connection to those buses.",
            "fnname": "Fdbus__init_bus",
            "intspec": "0",
            "lname": "dbus--init-bus",
            "maxargs": 2,
            "minargs": 1,
            "path": "dbusbind.c",
            "sname": "Sdbus__init_bus"
        },
        {
            "args": [
                "bus"
            ],
            "attributes": null,
            "doc": "Return the unique name of Emacs registered at D-Bus BUS.",
            "fnname": "Fdbus_get_unique_name",
            "intspec": "0",
            "lname": "dbus-get-unique-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "dbusbind.c",
            "sname": "Sdbus_get_unique_name"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Send a D-Bus message.\nThis is an internal function, it shall not be used outside dbus.el.\n\nThe following usages are expected:\n\n`dbus-call-method', `dbus-call-method-asynchronously':\n  (dbus-message-internal\n    dbus-message-type-method-call BUS SERVICE PATH INTERFACE METHOD HANDLER\n    &optional :timeout TIMEOUT &rest ARGS)\n\n`dbus-send-signal':\n  (dbus-message-internal\n    dbus-message-type-signal BUS SERVICE PATH INTERFACE SIGNAL &rest ARGS)\n\n`dbus-method-return-internal':\n  (dbus-message-internal\n    dbus-message-type-method-return BUS SERVICE SERIAL &rest ARGS)\n\n`dbus-method-error-internal':\n  (dbus-message-internal\n    dbus-message-type-error BUS SERVICE SERIAL ERROR-NAME &rest ARGS)\n\n`dbus-check-arguments': (does not send a message)\n  (dbus-message-internal\n    dbus-message-type-invalid BUS SERVICE &rest ARGS)\n\nusage: (dbus-message-internal &rest REST)",
            "fnname": "Fdbus_message_internal",
            "intspec": "0",
            "lname": "dbus-message-internal",
            "maxargs": -1,
            "minargs": 4,
            "path": "dbusbind.c",
            "sname": "Sdbus_message_internal"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Run internal self-tests to check timers subsystem.\nReturn t if all self-tests are passed, nil otherwise.",
            "fnname": "Fdebug_timer_check",
            "intspec": "0",
            "lname": "debug-timer-check",
            "maxargs": 0,
            "minargs": 0,
            "path": "atimer.c",
            "sname": "Sdebug_timer_check"
        },
        {
            "args": [
                "dimension",
                "chars",
                "final_char",
                "charset"
            ],
            "attributes": null,
            "doc": "Declare an equivalent charset for ISO-2022 decoding.\n\nOn decoding by an ISO-2022 base coding system, when a charset\nspecified by DIMENSION, CHARS, and FINAL-CHAR is designated, behave as\nif CHARSET is designated instead.",
            "fnname": "Fdeclare_equiv_charset",
            "intspec": "0",
            "lname": "declare-equiv-charset",
            "maxargs": 4,
            "minargs": 4,
            "path": "charset.c",
            "sname": "Sdeclare_equiv_charset"
        },
        {
            "args": [
                "code"
            ],
            "attributes": null,
            "doc": "Decode a Big5 character which has CODE in BIG5 coding system.\nReturn the corresponding character.",
            "fnname": "Fdecode_big5_char",
            "intspec": "0",
            "lname": "decode-big5-char",
            "maxargs": 1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Sdecode_big5_char"
        },
        {
            "args": [
                "charset",
                "code_point"
            ],
            "attributes": null,
            "doc": "Decode the pair of CHARSET and CODE-POINT into a character.\nReturn nil if CODE-POINT is not valid in CHARSET.\n\nCODE-POINT may be a cons (HIGHER-16-BIT-VALUE . LOWER-16-BIT-VALUE),\nalthough this usage is obsolescent.",
            "fnname": "Fdecode_char",
            "intspec": "0",
            "lname": "decode-char",
            "maxargs": 2,
            "minargs": 2,
            "path": "charset.c",
            "sname": "Sdecode_char"
        },
        {
            "args": [
                "start",
                "end",
                "coding_system",
                "destination"
            ],
            "attributes": null,
            "doc": "Decode the current region using the specified coding system.\nInteractively, prompt for the coding system to decode the region, and\nreplace the region with the decoded text.\n\n\\\"Decoding\\\" means transforming bytes into readable text (characters).\nIf, for instance, you have a region that contains data that represents\nthe two bytes #xc2 #xa9, after calling this function with the utf-8\ncoding system, the region will contain the single\ncharacter ?\\\\N{COPYRIGHT SIGN}.\n\nWhen called from a program, takes four arguments:\n        START, END, CODING-SYSTEM, and DESTINATION.\nSTART and END are buffer positions.\n\nOptional 4th arguments DESTINATION specifies where the decoded text goes.\nIf nil, the region between START and END is replaced by the decoded text.\nIf buffer, the decoded text is inserted in that buffer after point (point\ndoes not move).  If that buffer is unibyte, it receives the individual\nbytes of the internal representation of the decoded text.\nIn those cases, the length of the decoded text is returned.\nIf DESTINATION is t, the decoded text is returned.\n\nThis function sets `last-coding-system-used' to the precise coding system\nused (which may be different from CODING-SYSTEM if CODING-SYSTEM is\nnot fully specified.)",
            "fnname": "Fdecode_coding_region",
            "intspec": "r\nzCoding system: ",
            "lname": "decode-coding-region",
            "maxargs": 4,
            "minargs": 3,
            "path": "coding.c",
            "sname": "Sdecode_coding_region"
        },
        {
            "args": [
                "string",
                "coding_system",
                "nocopy",
                "buffer"
            ],
            "attributes": null,
            "doc": "Decode STRING which is encoded in CODING-SYSTEM, and return the result.\n\nOptional third arg NOCOPY non-nil means it is OK to return STRING itself\nif the decoding operation is trivial.\n\nOptional fourth arg BUFFER non-nil means that the decoded text is\ninserted in that buffer after point (point does not move).  In this\ncase, the return value is the length of the decoded text.  If that\nbuffer is unibyte, it receives the individual bytes of the internal\nrepresentation of the decoded text.\n\nThis function sets `last-coding-system-used' to the precise coding system\nused (which may be different from CODING-SYSTEM if CODING-SYSTEM is\nnot fully specified.)  The function does not change the match data.",
            "fnname": "Fdecode_coding_string",
            "intspec": "0",
            "lname": "decode-coding-string",
            "maxargs": 4,
            "minargs": 2,
            "path": "coding.c",
            "sname": "Sdecode_coding_string"
        },
        {
            "args": [
                "code"
            ],
            "attributes": null,
            "doc": "Decode a Japanese character which has CODE in shift_jis encoding.\nReturn the corresponding character.",
            "fnname": "Fdecode_sjis_char",
            "intspec": "0",
            "lname": "decode-sjis-char",
            "maxargs": 1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Sdecode_sjis_char"
        },
        {
            "args": [
                "specified_time",
                "zone",
                "form"
            ],
            "attributes": null,
            "doc": "Decode a timestamp into (SEC MINUTE HOUR DAY MONTH YEAR DOW DST UTCOFF).\nThe optional TIME is the time value to convert.  See\n`format-time-string' for the various forms of a time value.\n\nThe optional ZONE is omitted or nil for Emacs local time, t for\nUniversal Time, `wall' for system wall clock time, or a string as in\nthe TZ environment variable.  It can also be a list (as from\n`current-time-zone') or an integer (the UTC offset in seconds) applied\nwithout consideration for daylight saving time.\n\nThe optional FORM specifies the form of the SEC member.  If `integer',\nSEC is an integer; if t, SEC is an integer or (TICKS . HZ) timestamp\nwith the same precision as TIME.  An omitted or nil FORM is currently\ntreated like `integer', but this may change in future Emacs versions.\n\nTo access (or alter) the elements in the time value, the\n`decoded-time-second', `decoded-time-minute', `decoded-time-hour',\n`decoded-time-day', `decoded-time-month', `decoded-time-year',\n`decoded-time-weekday', `decoded-time-dst' and `decoded-time-zone'\naccessors can be used.\n\nThe list has the following nine members: SEC is an integer or\nLisp timestamp representing a nonnegative value less than 60\n\\(or less than 61 if the operating system supports leap seconds).\nMINUTE is an integer between 0 and 59.  HOUR is an integer\nbetween 0 and 23.  DAY is an integer between 1 and 31.  MONTH is an\ninteger between 1 and 12.  YEAR is the year number, an integer; 0\nrepresents 1 BC.  DOW is the day of week, an integer between 0 and 6,\nwhere 0 is Sunday.  DST is t if daylight saving time is in effect,\nnil if it is not in effect, and -1 if daylight saving information is\nnot available.  UTCOFF is an integer indicating the UTC offset in\nseconds, i.e., the number of seconds east of Greenwich.  (Note that\nCommon Lisp has different meanings for DOW and UTCOFF, and its\nSEC is always an integer between 0 and 59.)\n\nusage: (decode-time &optional TIME ZONE FORM)",
            "fnname": "Fdecode_time",
            "intspec": "0",
            "lname": "decode-time",
            "maxargs": 3,
            "minargs": 0,
            "path": "timefns.c",
            "sname": "Sdecode_time"
        },
        {
            "args": [
                "symbol",
                "definition",
                "docstring"
            ],
            "attributes": null,
            "doc": "Set SYMBOL's function definition to DEFINITION.\nAssociates the function with the current load file, if any.\nThe optional third argument DOCSTRING specifies the documentation string\nfor SYMBOL; if it is omitted or nil, SYMBOL uses the documentation string\ndetermined by DEFINITION.\n\nInternally, this normally uses `fset', but if SYMBOL has a\n`defalias-fset-function' property, the associated value is used instead.\n\nThe return value is undefined.",
            "fnname": "Fdefalias",
            "intspec": "0",
            "lname": "defalias",
            "maxargs": 3,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sdefalias"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Return t if SYMBOL has a non-void default value.\nA variable may have a buffer-local value.  This function says whether\nthe variable has a non-void value outside of the current buffer\ncontext.  Also see `default-value'.",
            "fnname": "Fdefault_boundp",
            "intspec": "0",
            "lname": "default-boundp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sdefault_boundp"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the default file protection for created files.\nThe value is an integer.",
            "fnname": "Fdefault_file_modes",
            "intspec": "0",
            "lname": "default-file-modes",
            "maxargs": 0,
            "minargs": 0,
            "path": "fileio.c",
            "sname": "Sdefault_file_modes"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the name of Windows default printer device.",
            "fnname": "Fdefault_printer_name",
            "intspec": "0",
            "lname": "default-printer-name",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32fns.c",
            "sname": "Sdefault_printer_name"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Return SYMBOL's toplevel default value.\n\"Toplevel\" means outside of any let binding.",
            "fnname": "Fdefault_toplevel_value",
            "intspec": "0",
            "lname": "default-toplevel-value",
            "maxargs": 1,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sdefault_toplevel_value"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Return SYMBOL's default value.\nThis is the value that is seen in buffers that do not have their own values\nfor this variable.  The default value is meaningful for variables with\nlocal bindings in certain buffers.",
            "fnname": "Fdefault_value",
            "intspec": "0",
            "lname": "default-value",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sdefault_value"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Define SYMBOL as a constant variable.\nThis declares that neither programs nor users should ever change the\nvalue.  This constancy is not actually enforced by Emacs Lisp, but\nSYMBOL is marked as a special variable so that it is never lexically\nbound.\n\nThe `defconst' form always sets the value of SYMBOL to the result of\nevalling INITVALUE.  If SYMBOL is buffer-local, its default value is\nwhat is set; buffer-local values are not affected.  If SYMBOL has a\nlocal binding, then this form sets the local binding's value.\nHowever, you should normally not make local bindings for variables\ndefined with this form.\n\nThe optional DOCSTRING specifies the variable's documentation string.\nusage: (defconst SYMBOL INITVALUE [DOCSTRING])",
            "fnname": "Fdefconst",
            "intspec": "0",
            "lname": "defconst",
            "maxargs": -2,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Sdefconst"
        },
        {
            "args": [
                "sym",
                "initvalue",
                "docstring"
            ],
            "attributes": null,
            "doc": "Like `defconst' but as a function.\nMore specifically, behaves like (defconst SYM 'INITVALUE DOCSTRING).",
            "fnname": "Fdefconst_1",
            "intspec": "0",
            "lname": "defconst-1",
            "maxargs": 3,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Sdefconst_1"
        },
        {
            "args": [
                "category",
                "docstring",
                "table"
            ],
            "attributes": null,
            "doc": "Define CATEGORY as a category which is described by DOCSTRING.\nCATEGORY should be an ASCII printing character in the range ` ' to `~'.\nDOCSTRING is the documentation string of the category.  The first line\nshould be a terse text (preferably less than 16 characters),\nand the rest lines should be the full description.\nThe category is defined only in category table TABLE, which defaults to\nthe current buffer's category table.",
            "fnname": "Fdefine_category",
            "intspec": "0",
            "lname": "define-category",
            "maxargs": 3,
            "minargs": 2,
            "path": "category.c",
            "sname": "Sdefine_category"
        },
        {
            "args": [
                "alias",
                "charset"
            ],
            "attributes": null,
            "doc": "Define ALIAS as an alias for charset CHARSET.",
            "fnname": "Fdefine_charset_alias",
            "intspec": "0",
            "lname": "define-charset-alias",
            "maxargs": 2,
            "minargs": 2,
            "path": "charset.c",
            "sname": "Sdefine_charset_alias"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "For internal use only.\nusage: (define-charset-internal ...)",
            "fnname": "Fdefine_charset_internal",
            "intspec": "0",
            "lname": "define-charset-internal",
            "maxargs": -1,
            "minargs": 17,
            "path": "charset.c",
            "sname": "Sdefine_charset_internal"
        },
        {
            "args": [
                "alias",
                "coding_system"
            ],
            "attributes": null,
            "doc": "Define ALIAS as an alias for CODING-SYSTEM.",
            "fnname": "Fdefine_coding_system_alias",
            "intspec": "0",
            "lname": "define-coding-system-alias",
            "maxargs": 2,
            "minargs": 2,
            "path": "coding.c",
            "sname": "Sdefine_coding_system_alias"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "For internal use only.\nusage: (define-coding-system-internal ...)",
            "fnname": "Fdefine_coding_system_internal",
            "intspec": "0",
            "lname": "define-coding-system-internal",
            "maxargs": -1,
            "minargs": 13,
            "path": "coding.c",
            "sname": "Sdefine_coding_system_internal"
        },
        {
            "args": [
                "bitmap",
                "bits",
                "height",
                "width",
                "align"
            ],
            "attributes": null,
            "doc": "Define fringe bitmap BITMAP from BITS of size HEIGHT x WIDTH.\nBITMAP is a symbol identifying the new fringe bitmap.\nBITS is either a string or a vector of integers.\nHEIGHT is height of bitmap.  If HEIGHT is nil, use length of BITS.\nWIDTH must be an integer from 1 to 16, or nil which defaults to 8.  An\nerror is signaled if WIDTH is outside this range.\nOptional fifth arg ALIGN may be one of `top', `center', or `bottom',\nindicating the positioning of the bitmap relative to the rows where it\nis used; the default is to center the bitmap.  Fifth arg may also be a\nlist (ALIGN PERIODIC) where PERIODIC non-nil specifies that the bitmap\nshould be repeated.\nIf BITMAP already exists, the existing definition is replaced.",
            "fnname": "Fdefine_fringe_bitmap",
            "intspec": "0",
            "lname": "define-fringe-bitmap",
            "maxargs": 5,
            "minargs": 2,
            "path": "fringe.c",
            "sname": "Sdefine_fringe_bitmap"
        },
        {
            "args": [
                "name",
                "test",
                "hash"
            ],
            "attributes": null,
            "doc": "Define a new hash table test with name NAME, a symbol.\n\nIn hash tables created with NAME specified as test, use TEST to\ncompare keys, and HASH for computing hash codes of keys.\n\nTEST must be a function taking two arguments and returning non-nil if\nboth arguments are the same.  HASH must be a function taking one\nargument and returning an object that is the hash code of the argument.\nIt should be the case that if (eq (funcall HASH x1) (funcall HASH x2))\nreturns nil, then (funcall TEST x1 x2) also returns nil.",
            "fnname": "Fdefine_hash_table_test",
            "intspec": "0",
            "lname": "define-hash-table-test",
            "maxargs": 3,
            "minargs": 3,
            "path": "fns.c",
            "sname": "Sdefine_hash_table_test"
        },
        {
            "args": [
                "keymap",
                "key",
                "def",
                "remove"
            ],
            "attributes": null,
            "doc": "In KEYMAP, define key sequence KEY as DEF.\nThis is a legacy function; see `keymap-set' for the recommended\nfunction to use instead.\n\nKEYMAP is a keymap.\n\nKEY is a string or a vector of symbols and characters, representing a\nsequence of keystrokes and events.  Non-ASCII characters with codes\nabove 127 (such as ISO Latin-1) can be represented by vectors.\nTwo types of vector have special meanings:\n [remap COMMAND] remaps any key binding for COMMAND.\n [t] creates a default definition, which applies to any event with no\n    other definition in KEYMAP.\n\nDEF is anything that can be a key's definition:\n nil (means key is undefined in this keymap),\n a command (a Lisp function suitable for interactive calling),\n a string (treated as a keyboard macro),\n a keymap (to define a prefix key),\n a symbol (when the key is looked up, the symbol will stand for its\n    function definition, which should at that time be one of the above,\n    or another symbol whose function definition is used, etc.),\n a cons (STRING . DEFN), meaning that DEFN is the definition\n    (DEFN should be a valid definition in its own right) and\n    STRING is the menu item name (which is used only if the containing\n    keymap has been created with a menu name, see `make-keymap'),\n or a cons (MAP . CHAR), meaning use definition of CHAR in keymap MAP,\n or an extended menu item definition.\n (See info node `(elisp)Extended Menu Items'.)\n\nIf REMOVE is non-nil, the definition will be removed.  This is almost\nthe same as setting the definition to nil, but makes a difference if\nthe KEYMAP has a parent, and KEY is shadowing the same binding in the\nparent.  With REMOVE, subsequent lookups will return the binding in\nthe parent, and with a nil DEF, the lookups will return nil.\n\nIf KEYMAP is a sparse keymap with a binding for KEY, the existing\nbinding is altered.  If there is no binding for KEY, the new pair\nbinding KEY to DEF is added at the front of KEYMAP.",
            "fnname": "Fdefine_key",
            "intspec": "0",
            "lname": "define-key",
            "maxargs": 4,
            "minargs": 3,
            "path": "keymap.c",
            "sname": "Sdefine_key"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Define SYMBOL as a variable, and return SYMBOL.\nYou are not required to define a variable in order to use it, but\ndefining it lets you supply an initial value and documentation, which\ncan be referred to by the Emacs help facilities and other programming\ntools.  The `defvar' form also declares the variable as \\\"special\\\",\nso that it is always dynamically bound even if `lexical-binding' is t.\n\nIf SYMBOL's value is void and the optional argument INITVALUE is\nprovided, INITVALUE is evaluated and the result used to set SYMBOL's\nvalue.  If SYMBOL is buffer-local, its default value is what is set;\nbuffer-local values are not affected.  If INITVALUE is missing,\nSYMBOL's value is not set.\n\nIf SYMBOL is let-bound, then this form does not affect the local let\nbinding but the toplevel default binding instead, like\n`set-toplevel-default-binding`.\n(`defcustom' behaves similarly in this respect.)\n\nThe optional argument DOCSTRING is a documentation string for the\nvariable.\n\nTo define a user option, use `defcustom' instead of `defvar'.\n\nTo define a buffer-local variable, use `defvar-local'.\nusage: (defvar SYMBOL &optional INITVALUE DOCSTRING)",
            "fnname": "Fdefvar",
            "intspec": "0",
            "lname": "defvar",
            "maxargs": -2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sdefvar"
        },
        {
            "args": [
                "sym",
                "initvalue",
                "docstring"
            ],
            "attributes": null,
            "doc": "Like `defvar' but as a function.\nMore specifically behaves like (defvar SYM 'INITVALUE DOCSTRING).",
            "fnname": "Fdefvar_1",
            "intspec": "0",
            "lname": "defvar-1",
            "maxargs": 3,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Sdefvar_1"
        },
        {
            "args": [
                "new_alias",
                "base_variable",
                "docstring"
            ],
            "attributes": null,
            "doc": "Make NEW-ALIAS a variable alias for symbol BASE-VARIABLE.\nAliased variables always have the same value; setting one sets the other.\nThird arg DOCSTRING, if non-nil, is documentation for NEW-ALIAS.  If it is\nomitted or nil, NEW-ALIAS gets the documentation string of BASE-VARIABLE,\nor of the variable at the end of the chain of aliases, if BASE-VARIABLE is\nitself an alias.  If NEW-ALIAS is bound, and BASE-VARIABLE is not,\nthen the value of BASE-VARIABLE is set to that of NEW-ALIAS.\nThe return value is BASE-VARIABLE.\n\nIf the resulting chain of variable definitions would contain a loop,\nsignal a `cyclic-variable-indirection' error.",
            "fnname": "Fdefvaralias",
            "intspec": "0",
            "lname": "defvaralias",
            "maxargs": 3,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Sdefvaralias"
        },
        {
            "args": [
                "elt",
                "seq"
            ],
            "attributes": null,
            "doc": "Delete members of SEQ which are `equal' to ELT, and return the result.\nSEQ must be a sequence (i.e. a list, a vector, or a string).\nThe return value is a sequence of the same type.\n\nIf SEQ is a list, this behaves like `delq', except that it compares\nwith `equal' instead of `eq'.  In particular, it may remove elements\nby altering the list structure.\n\nIf SEQ is not a list, deletion is never performed destructively;\ninstead this function creates and returns a new vector or string.\n\nWrite `(setq foo (delete element foo))' to be sure of correctly\nchanging the value of a sequence `foo'.  See also `remove', which\ndoes not modify the argument.",
            "fnname": "Fdelete",
            "intspec": "0",
            "lname": "delete",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sdelete"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Delete all overlays of BUFFER.\nBUFFER omitted or nil means delete all overlays of the current\nbuffer.",
            "fnname": "Fdelete_all_overlays",
            "intspec": "0",
            "lname": "delete-all-overlays",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sdelete_all_overlays"
        },
        {
            "args": [
                "start",
                "end"
            ],
            "attributes": null,
            "doc": "Delete the text between START and END and return it.",
            "fnname": "Fdelete_and_extract_region",
            "intspec": "0",
            "lname": "delete-and-extract-region",
            "maxargs": 2,
            "minargs": 2,
            "path": "editfns.c",
            "sname": "Sdelete_and_extract_region"
        },
        {
            "args": [
                "n",
                "killflag"
            ],
            "attributes": null,
            "doc": "Delete the following N characters (previous if N is negative).\nOptional second arg KILLFLAG non-nil means kill instead (save in kill ring).\nInteractively, N is the prefix arg, and KILLFLAG is set if\nN was explicitly specified.\n\nThe command `delete-forward-char' is preferable for interactive use, e.g.\nbecause it respects values of `delete-active-region' and `overwrite-mode'.",
            "fnname": "Fdelete_char",
            "intspec": "p\nP",
            "lname": "delete-char",
            "maxargs": 2,
            "minargs": 1,
            "path": "cmds.c",
            "sname": "Sdelete_char"
        },
        {
            "args": [
                "directory"
            ],
            "attributes": null,
            "doc": "Delete the directory named DIRECTORY.  Does not follow symlinks.",
            "fnname": "Fdelete_directory_internal",
            "intspec": "0",
            "lname": "delete-directory-internal",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sdelete_directory_internal"
        },
        {
            "args": [
                "pos"
            ],
            "attributes": null,
            "doc": "Delete the field surrounding POS.\nA field is a region of text with the same `field' property.\nIf POS is nil, the value of point is used for POS.",
            "fnname": "Fdelete_field",
            "intspec": "0",
            "lname": "delete-field",
            "maxargs": 1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sdelete_field"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Delete file named FILENAME; internal use only.\nIf it is a symlink, remove the symlink.\nIf file has multiple names, it continues to exist with the other names.",
            "fnname": "Fdelete_file_internal",
            "intspec": "0",
            "lname": "delete-file-internal",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sdelete_file_internal"
        },
        {
            "args": [
                "frame",
                "force"
            ],
            "attributes": null,
            "doc": "Delete FRAME, eliminating it from use.\nFRAME must be a live frame and defaults to the selected one.\n\nWhen `undelete-frame-mode' is enabled, the 16 most recently deleted\nframes can be undeleted with `undelete-frame', which see.\n\nA frame may not be deleted if its minibuffer serves as surrogate\nminibuffer for another frame.  Normally, you may not delete a frame if\nall other frames are invisible, but if the second optional argument\nFORCE is non-nil, you may do so.\n\nThis function runs `delete-frame-functions' before actually\ndeleting the frame, unless the frame is a tooltip.\nThe functions are run with one argument, the frame to be deleted.",
            "fnname": "Fdelete_frame",
            "intspec": "",
            "lname": "delete-frame",
            "maxargs": 2,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sdelete_frame"
        },
        {
            "args": [
                "window",
                "root"
            ],
            "attributes": null,
            "doc": "Make WINDOW fill its frame.\nOnly the frame WINDOW is on is affected.  WINDOW must be a valid window\nand defaults to the selected one.\n\nOptional argument ROOT, if non-nil, must specify an internal window such\nthat WINDOW is in its window subtree.  If this is the case, replace ROOT\nby WINDOW and leave alone any windows not part of ROOT's subtree.\n\nWhen WINDOW is live try to reduce display jumps by keeping the text\npreviously visible in WINDOW in the same place on the frame.  Doing this\ndepends on the value of (window-start WINDOW), so if calling this\nfunction in a program gives strange scrolling, make sure the\nwindow-start value is reasonable when this function is called.",
            "fnname": "Fdelete_other_windows_internal",
            "intspec": "",
            "lname": "delete-other-windows-internal",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sdelete_other_windows_internal"
        },
        {
            "args": [
                "overlay"
            ],
            "attributes": null,
            "doc": "Delete the overlay OVERLAY from its buffer.",
            "fnname": "Fdelete_overlay",
            "intspec": "0",
            "lname": "delete-overlay",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sdelete_overlay"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Delete PROCESS: kill it and forget about it immediately.\nPROCESS may be a process, a buffer, the name of a process or buffer, or\nnil, indicating the current buffer's process.\n\nInteractively, it will kill the current buffer's process.",
            "fnname": "Fdelete_process",
            "intspec": "(list 'message)",
            "lname": "delete-process",
            "maxargs": 1,
            "minargs": 0,
            "path": "process.c",
            "sname": "Sdelete_process"
        },
        {
            "args": [
                "start",
                "end"
            ],
            "attributes": null,
            "doc": "Delete the text between START and END.\nIf called interactively, delete the region between point and mark.\nThis command deletes buffer text without modifying the kill ring.",
            "fnname": "Fdelete_region",
            "intspec": "r",
            "lname": "delete-region",
            "maxargs": 2,
            "minargs": 2,
            "path": "editfns.c",
            "sname": "Sdelete_region"
        },
        {
            "args": [
                "terminal",
                "force"
            ],
            "attributes": null,
            "doc": "Delete TERMINAL by deleting all frames on it and closing the terminal.\nTERMINAL may be a terminal object, a frame, or nil (meaning the\nselected frame's terminal).\n\nNormally, you may not delete a display if all other displays are suspended,\nbut if the second argument FORCE is non-nil, you may do so.",
            "fnname": "Fdelete_terminal",
            "intspec": "0",
            "lname": "delete-terminal",
            "maxargs": 2,
            "minargs": 0,
            "path": "terminal.c",
            "sname": "Sdelete_terminal"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Remove WINDOW from its frame.\nWINDOW defaults to the selected window.  Return nil.\nSignal an error when WINDOW is the only window on its frame.",
            "fnname": "Fdelete_window_internal",
            "intspec": "0",
            "lname": "delete-window-internal",
            "maxargs": 1,
            "minargs": 1,
            "path": "window.c",
            "sname": "Sdelete_window_internal"
        },
        {
            "args": [
                "xwidget_view"
            ],
            "attributes": null,
            "doc": "Delete the XWIDGET-VIEW.",
            "fnname": "Fdelete_xwidget_view",
            "intspec": "0",
            "lname": "delete-xwidget-view",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sdelete_xwidget_view"
        },
        {
            "args": [
                "elt",
                "list"
            ],
            "attributes": null,
            "doc": "Delete members of LIST which are `eq' to ELT, and return the result.\nMore precisely, this function skips any members `eq' to ELT at the\nfront of LIST, then removes members `eq' to ELT from the remaining\nsublist by modifying its list structure, then returns the resulting\nlist.\n\nWrite `(setq foo (delq element foo))' to be sure of correctly changing\nthe value of a list `foo'.  See also `remq', which does not modify the\nargument.",
            "fnname": "Fdelq",
            "intspec": "0",
            "lname": "delq",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sdelq"
        },
        {
            "args": [
                "buffer",
                "prefix",
                "menus"
            ],
            "attributes": null,
            "doc": "Insert the list of all defined keys and their definitions.\nThe list is inserted in the current buffer, while the bindings are\nlooked up in BUFFER.\nThe optional argument PREFIX, if non-nil, should be a key sequence;\nthen we display only bindings that start with that prefix.\nThe optional argument MENUS, if non-nil, says to mention menu bindings.\n\\(Ordinarily these are omitted from the output.)",
            "fnname": "Fdescribe_buffer_bindings",
            "intspec": "0",
            "lname": "describe-buffer-bindings",
            "maxargs": 3,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Sdescribe_buffer_bindings"
        },
        {
            "args": [
                "vector",
                "describer"
            ],
            "attributes": null,
            "doc": "Insert a description of contents of VECTOR.\nThis is text showing the elements of vector matched against indices.\nDESCRIBER is the output function used; nil means use `princ'.",
            "fnname": "Fdescribe_vector",
            "intspec": "0",
            "lname": "describe-vector",
            "maxargs": 2,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Sdescribe_vector"
        },
        {
            "args": [
                "bitmap"
            ],
            "attributes": null,
            "doc": "Destroy fringe bitmap BITMAP.\nIf BITMAP overrides a standard fringe bitmap, the original bitmap is restored.",
            "fnname": "Fdestroy_fringe_bitmap",
            "intspec": "0",
            "lname": "destroy-fringe-bitmap",
            "maxargs": 1,
            "minargs": 1,
            "path": "fringe.c",
            "sname": "Sdestroy_fringe_bitmap"
        },
        {
            "args": [
                "start",
                "end",
                "highest"
            ],
            "attributes": null,
            "doc": "Detect coding system of the text in the region between START and END.\nReturn a list of possible coding systems ordered by priority.\nThe coding systems to try and their priorities follows what\nthe function `coding-system-priority-list' (which see) returns.\n\nIf only ASCII characters are found (except for such ISO-2022 control\ncharacters as ESC), it returns a list of single element `undecided'\nor its subsidiary coding system according to a detected end-of-line\nformat.\n\nIf optional argument HIGHEST is non-nil, return the coding system of\nhighest priority.",
            "fnname": "Fdetect_coding_region",
            "intspec": "0",
            "lname": "detect-coding-region",
            "maxargs": 3,
            "minargs": 2,
            "path": "coding.c",
            "sname": "Sdetect_coding_region"
        },
        {
            "args": [
                "string",
                "highest"
            ],
            "attributes": null,
            "doc": "Detect coding system of the text in STRING.\nReturn a list of possible coding systems ordered by priority.\nThe coding systems to try and their priorities follows what\nthe function `coding-system-priority-list' (which see) returns.\n\nIf only ASCII characters are found (except for such ISO-2022 control\ncharacters as ESC), it returns a list of single element `undecided'\nor its subsidiary coding system according to a detected end-of-line\nformat.\n\nIf optional argument HIGHEST is non-nil, return the coding system of\nhighest priority.",
            "fnname": "Fdetect_coding_string",
            "intspec": "0",
            "lname": "detect-coding-string",
            "maxargs": 2,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Sdetect_coding_string"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Beep, or flash the screen.\nAlso, unless an argument is given,\nterminate any keyboard macro currently executing.",
            "fnname": "Fding",
            "intspec": "0",
            "lname": "ding",
            "maxargs": 1,
            "minargs": 0,
            "path": "dispnew.c",
            "sname": "Sding"
        },
        {
            "args": [
                "directory"
            ],
            "attributes": null,
            "doc": "Returns the file name of the directory named DIRECTORY.\nThis is the name of the file that holds the data for the directory DIRECTORY.\nThis operation exists because a directory is also a file, but its name as\na directory is different from its name as a file.\nIn Unix-syntax, this function just removes the final slash.",
            "fnname": "Fdirectory_file_name",
            "intspec": "0",
            "lname": "directory-file-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sdirectory_file_name"
        },
        {
            "args": [
                "directory",
                "full",
                "match",
                "nosort",
                "count"
            ],
            "attributes": null,
            "doc": "Return a list of names of files in DIRECTORY.\nThere are four optional arguments:\nIf FULL is non-nil, return absolute file names.  Otherwise return names\n that are relative to the specified directory.\nIf MATCH is non-nil, mention only file names whose non-directory part\n matches the regexp MATCH.\nIf NOSORT is non-nil, the list is not sorted--its order is unpredictable.\n Otherwise, the list returned is sorted with `string-lessp'.\n NOSORT is useful if you plan to sort the result yourself.\nIf COUNT is non-nil and a natural number, the function will return\n COUNT number of file names (if so many are present).",
            "fnname": "Fdirectory_files",
            "intspec": "0",
            "lname": "directory-files",
            "maxargs": 5,
            "minargs": 1,
            "path": "dired.c",
            "sname": "Sdirectory_files"
        },
        {
            "args": [
                "directory",
                "full",
                "match",
                "nosort",
                "id_format",
                "count"
            ],
            "attributes": null,
            "doc": "Return a list of names of files and their attributes in DIRECTORY.\nValue is a list of the form:\n\n  ((FILE1 . FILE1-ATTRS) (FILE2 . FILE2-ATTRS) ...)\n\nwhere each FILEn-ATTRS is the attributes of FILEn as returned\nby `file-attributes'.\n\nThis function accepts five optional arguments:\nIf FULL is non-nil, return absolute file names.  Otherwise return names\n that are relative to the specified directory.\nIf MATCH is non-nil, mention only file names whose non-directory part\n matches the regexp MATCH.\nIf NOSORT is non-nil, the list is not sorted--its order is unpredictable.\n NOSORT is useful if you plan to sort the result yourself.\nID-FORMAT specifies the preferred format of attributes uid and gid, see\n `file-attributes' for further documentation.\nIf COUNT is non-nil and a natural number, the function will return\n COUNT number of file names (if so many are present).\nOn MS-Windows, performance depends on `w32-get-true-file-attributes',\nwhich see.",
            "fnname": "Fdirectory_files_and_attributes",
            "intspec": "0",
            "lname": "directory-files-and-attributes",
            "maxargs": 6,
            "minargs": 1,
            "path": "dired.c",
            "sname": "Sdirectory_files_and_attributes"
        },
        {
            "args": [
                "name"
            ],
            "attributes": null,
            "doc": "Return non-nil if NAME ends with a directory separator character.",
            "fnname": "Fdirectory_name_p",
            "intspec": "0",
            "lname": "directory-name-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sdirectory_name_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Discard the contents of the terminal input buffer.\nAlso end any kbd macro being defined.",
            "fnname": "Fdiscard_input",
            "intspec": "0",
            "lname": "discard-input",
            "maxargs": 0,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Sdiscard_input"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return non-nil if the current screen line is continued on display.",
            "fnname": "Fdisplay__line_is_continued_p",
            "intspec": "0",
            "lname": "display--line-is-continued-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "xdisp.c",
            "sname": "Sdisplay__line_is_continued_p"
        },
        {
            "args": [
                "mouse_x",
                "mouse_y"
            ],
            "attributes": null,
            "doc": "Handle mouse movement detected by Lisp code.\n\nThis function should be called when Lisp code detects the mouse has\nmoved, even if `track-mouse' is nil.  This handles updates that do not\nrely on input events such as updating display for mouse-face\nproperties or updating the help echo text.",
            "fnname": "Fdisplay__update_for_mouse_movement",
            "intspec": "0",
            "lname": "display--update-for-mouse-movement",
            "maxargs": 2,
            "minargs": 2,
            "path": "dispnew.c",
            "sname": "Sdisplay__update_for_mouse_movement"
        },
        {
            "args": [
                "attributes",
                "display"
            ],
            "attributes": null,
            "doc": "Return non-nil if all the face attributes in ATTRIBUTES are supported.\nThe optional argument DISPLAY can be a display name, a frame, or\nnil (meaning the selected frame's display).\n\nFor instance, to check whether the display supports underlining:\n\n  (display-supports-face-attributes-p \\\\='(:underline t))\n\nThe definition of `supported' is somewhat heuristic, but basically means\nthat a face containing all the attributes in ATTRIBUTES, when merged\nwith the default face for display, can be represented in a way that's\n\n (1) different in appearance from the default face, and\n (2) `close in spirit' to what the attributes specify, if not exact.\n\nPoint (2) implies that a `:weight black' attribute will be satisfied by\nany display that can display bold, and a `:foreground \\\"yellow\\\"' as long\nas it can display a yellowish color, but `:slant italic' will _not_ be\nsatisfied by the tty display code's automatic substitution of a `dim'\nface for italic.",
            "fnname": "Fdisplay_supports_face_attributes_p",
            "intspec": "0",
            "lname": "display-supports-face-attributes-p",
            "maxargs": 2,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sdisplay_supports_face_attributes_p"
        },
        {
            "args": [
                "no_message",
                "current_only"
            ],
            "attributes": null,
            "doc": "Auto-save all buffers that need it.\nThis auto-saves all buffers that have auto-saving enabled and\nwere changed since last auto-saved.\n\nAuto-saving writes the buffer into a file so that your edits are\nnot lost if the system crashes.\n\nThe auto-save file is not the file you visited; that changes only\nwhen you save.\n\nNormally, run the normal hook `auto-save-hook' before saving.\n\nA non-nil NO-MESSAGE argument means do not print any message if successful.\n\nA non-nil CURRENT-ONLY argument means save only current buffer.",
            "fnname": "Fdo_auto_save",
            "intspec": "",
            "lname": "do-auto-save",
            "maxargs": 2,
            "minargs": 0,
            "path": "fileio.c",
            "sname": "Sdo_auto_save"
        },
        {
            "args": [
                "function",
                "raw"
            ],
            "attributes": null,
            "doc": "Return the documentation string of FUNCTION.\nUnless a non-nil second argument RAW is given, the\nstring is passed through `substitute-command-keys'.",
            "fnname": "Fdocumentation",
            "intspec": "0",
            "lname": "documentation",
            "maxargs": 2,
            "minargs": 1,
            "path": "doc.c",
            "sname": "Sdocumentation"
        },
        {
            "args": [
                "symbol",
                "prop",
                "raw"
            ],
            "attributes": null,
            "doc": "Return the documentation string that is SYMBOL's PROP property.\nThird argument RAW omitted or nil means pass the result through\n`substitute-command-keys' if it is a string.\n\nThis differs from `get' in that it can refer to strings stored in the\n`etc/DOC' file; and that it evaluates documentation properties that\naren't strings.",
            "fnname": "Fdocumentation_property",
            "intspec": "0",
            "lname": "documentation-property",
            "maxargs": 3,
            "minargs": 2,
            "path": "doc.c",
            "sname": "Sdocumentation_property"
        },
        {
            "args": [
                "obj"
            ],
            "attributes": null,
            "doc": "Convert argument to lower case and return that.\nThe argument may be a character or string.  The result has the same type,\nincluding the multibyteness of the string.\n\nThis means that if this function is called with a unibyte string\nargument, and downcasing it would turn it into a multibyte string\n(according to the current locale), the downcasing is done using ASCII\n\\\"C\\\" rules instead.  To accurately downcase according to the current\nlocale, the string must be converted into multibyte first.\n\nThe argument object is not altered--the value is a copy.",
            "fnname": "Fdowncase",
            "intspec": "0",
            "lname": "downcase",
            "maxargs": 1,
            "minargs": 1,
            "path": "casefiddle.c",
            "sname": "Sdowncase"
        },
        {
            "args": [
                "beg",
                "end",
                "region_noncontiguous_p"
            ],
            "attributes": null,
            "doc": "Convert the region to lower case.  In programs, wants two arguments.\nThese arguments specify the starting and ending character numbers of\nthe region to operate on.  When used as a command, the text between\npoint and the mark is operated on.",
            "fnname": "Fdowncase_region",
            "intspec": "(list (region-beginning) (region-end) (region-noncontiguous-p))",
            "lname": "downcase-region",
            "maxargs": 3,
            "minargs": 2,
            "path": "casefiddle.c",
            "sname": "Sdowncase_region"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Convert to lower case from point to end of word, moving over.\n\nIf point is in the middle of a word, the part of that word before point\nis ignored when moving forward.\n\nWith negative argument, convert previous words but do not move.",
            "fnname": "Fdowncase_word",
            "intspec": "p",
            "lname": "downcase-word",
            "maxargs": 1,
            "minargs": 1,
            "path": "casefiddle.c",
            "sname": "Sdowncase_word"
        },
        {
            "args": [
                "font_object",
                "string"
            ],
            "attributes": null,
            "doc": "Draw STRING by FONT-OBJECT on the top left corner of the current frame.\nThe value is a number of glyphs drawn.\nType C-l to recover what previously shown.",
            "fnname": "Fdraw_string",
            "intspec": "0",
            "lname": "draw-string",
            "maxargs": 2,
            "minargs": 2,
            "path": "font.c",
            "sname": "Sdraw_string"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Dump currently allocated colors to stderr.",
            "fnname": "Fdump_colors",
            "intspec": "0",
            "lname": "dump-colors",
            "maxargs": 0,
            "minargs": 0,
            "path": "xfaces.c",
            "sname": "Sdump_colors"
        },
        {
            "args": [
                "filename",
                "symfile"
            ],
            "attributes": null,
            "doc": "Dump current state of Emacs into executable file FILENAME.\nTake symbols from SYMFILE (presumably the file you executed to run Emacs).\nThis is used in the file `loadup.el' when building Emacs.\n\nYou must run Emacs in batch mode in order to dump it.",
            "fnname": "Fdump_emacs",
            "intspec": "0",
            "lname": "dump-emacs",
            "maxargs": 2,
            "minargs": 2,
            "path": "emacs.c",
            "sname": "Sdump_emacs"
        },
        {
            "args": [
                "filename",
                "track_referrers"
            ],
            "attributes": null,
            "doc": "Dump current state of Emacs into dump file FILENAME.\nIf TRACK-REFERRERS is non-nil, keep additional debugging information\nthat can help track down the provenance of unsupported object\ntypes.",
            "fnname": "Fdump_emacs_portable",
            "intspec": "0",
            "lname": "dump-emacs-portable",
            "maxargs": 2,
            "minargs": 1,
            "path": "pdumper.c",
            "sname": "Sdump_emacs_portable"
        },
        {
            "args": [
                "a",
                "b"
            ],
            "attributes": null,
            "doc": "Internal relocation sorting function.",
            "fnname": "Fdump_emacs_portable__sort_predicate",
            "intspec": "0",
            "lname": "dump-emacs-portable--sort-predicate",
            "maxargs": 2,
            "minargs": 2,
            "path": "pdumper.c",
            "sname": "Sdump_emacs_portable__sort_predicate"
        },
        {
            "args": [
                "a",
                "b"
            ],
            "attributes": null,
            "doc": "Internal relocation sorting function.",
            "fnname": "Fdump_emacs_portable__sort_predicate_copied",
            "intspec": "0",
            "lname": "dump-emacs-portable--sort-predicate-copied",
            "maxargs": 2,
            "minargs": 2,
            "path": "pdumper.c",
            "sname": "Sdump_emacs_portable__sort_predicate_copied"
        },
        {
            "args": [
                "n"
            ],
            "attributes": null,
            "doc": "",
            "fnname": "Fdump_face",
            "intspec": "0",
            "lname": "dump-face",
            "maxargs": 1,
            "minargs": 0,
            "path": "xfaces.c",
            "sname": "Sdump_face"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Dump the current glyph matrix of the selected frame to stderr.\nOnly text-mode frames have frame glyph matrices.",
            "fnname": "Fdump_frame_glyph_matrix",
            "intspec": "",
            "lname": "dump-frame-glyph-matrix",
            "maxargs": 0,
            "minargs": 0,
            "path": "xdisp.c",
            "sname": "Sdump_frame_glyph_matrix"
        },
        {
            "args": [
                "glyphs"
            ],
            "attributes": null,
            "doc": "Dump the current matrix of the selected window to stderr.\nShows contents of glyph row structures.  With non-nil\nparameter GLYPHS, dump glyphs as well.  If GLYPHS is 1 show\nglyphs in short form, otherwise show glyphs in long form.\n\nInteractively, no argument means show glyphs in short form;\nwith numeric argument, its value is passed as the GLYPHS flag.",
            "fnname": "Fdump_glyph_matrix",
            "intspec": "p",
            "lname": "dump-glyph-matrix",
            "maxargs": 1,
            "minargs": 0,
            "path": "xdisp.c",
            "sname": "Sdump_glyph_matrix"
        },
        {
            "args": [
                "row",
                "glyphs"
            ],
            "attributes": null,
            "doc": "Dump glyph row ROW to stderr.\nInteractively, ROW is the prefix numeric argument and defaults to\nthe row which displays point.\nOptional argument GLYPHS 0 means don't dump glyphs.\nGLYPHS 1 means dump glyphs in short form.\nGLYPHS > 1 or omitted means dump glyphs in long form.",
            "fnname": "Fdump_glyph_row",
            "intspec": "P",
            "lname": "dump-glyph-row",
            "maxargs": 2,
            "minargs": 1,
            "path": "xdisp.c",
            "sname": "Sdump_glyph_row"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Dump redisplay history to stderr.",
            "fnname": "Fdump_redisplay_history",
            "intspec": "",
            "lname": "dump-redisplay-history",
            "maxargs": 0,
            "minargs": 0,
            "path": "dispnew.c",
            "sname": "Sdump_redisplay_history"
        },
        {
            "args": [
                "row",
                "glyphs"
            ],
            "attributes": null,
            "doc": "Dump glyph row ROW of the tab-bar of the current frame to stderr.\nInteractively, ROW is the prefix numeric argument and defaults to zero.\nGLYPHS 0 means don't dump glyphs.\nGLYPHS 1 means dump glyphs in short form.\nGLYPHS > 1 or omitted means dump glyphs in long form.\n\nIf there's no tab-bar, or if the tab-bar is not drawn by Emacs,\ndo nothing.",
            "fnname": "Fdump_tab_bar_row",
            "intspec": "P",
            "lname": "dump-tab-bar-row",
            "maxargs": 2,
            "minargs": 1,
            "path": "xdisp.c",
            "sname": "Sdump_tab_bar_row"
        },
        {
            "args": [
                "row",
                "glyphs"
            ],
            "attributes": null,
            "doc": "Dump glyph row ROW of the tool-bar of the current frame to stderr.\nInteractively, ROW is the prefix numeric argument and defaults to zero.\nGLYPHS 0 means don't dump glyphs.\nGLYPHS 1 means dump glyphs in short form.\nGLYPHS > 1 or omitted means dump glyphs in long form.\n\nIf there's no tool-bar, or if the tool-bar is not drawn by Emacs,\ndo nothing.",
            "fnname": "Fdump_tool_bar_row",
            "intspec": "P",
            "lname": "dump-tool-bar-row",
            "maxargs": 2,
            "minargs": 1,
            "path": "xdisp.c",
            "sname": "Sdump_tool_bar_row"
        },
        {
            "args": [
                "sequence",
                "n"
            ],
            "attributes": null,
            "doc": "Return element of SEQUENCE at index N.",
            "fnname": "Felt",
            "intspec": "0",
            "lname": "elt",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Selt"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the process ID of Emacs, as an integer.",
            "fnname": "Femacs_pid",
            "intspec": "0",
            "lname": "emacs-pid",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Semacs_pid"
        },
        {
            "args": [
                "ch"
            ],
            "attributes": null,
            "doc": "Encode the Big5 character CH to BIG5 coding system.\nReturn the corresponding character code in Big5.",
            "fnname": "Fencode_big5_char",
            "intspec": "0",
            "lname": "encode-big5-char",
            "maxargs": 1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Sencode_big5_char"
        },
        {
            "args": [
                "ch",
                "charset"
            ],
            "attributes": null,
            "doc": "Encode the character CH into a code-point of CHARSET.\nReturn the encoded code-point as an integer,\nor nil if CHARSET doesn't support CH.",
            "fnname": "Fencode_char",
            "intspec": "0",
            "lname": "encode-char",
            "maxargs": 2,
            "minargs": 2,
            "path": "charset.c",
            "sname": "Sencode_char"
        },
        {
            "args": [
                "start",
                "end",
                "coding_system",
                "destination"
            ],
            "attributes": null,
            "doc": "Encode the current region using th specified coding system.\nInteractively, prompt for the coding system to encode the region, and\nreplace the region with the bytes that are the result of the encoding.\n\nWhat's meant by \\\"encoding\\\" is transforming textual data (characters)\ninto bytes.  If, for instance, you have a region that contains the\nsingle character ?\\\\N{COPYRIGHT SIGN}, after calling this function with\nthe utf-8 coding system, the data in the region will represent the two\nbytes #xc2 #xa9.\n\nWhen called from a program, takes four arguments:\n        START, END, CODING-SYSTEM and DESTINATION.\nSTART and END are buffer positions.\n\nOptional 4th argument DESTINATION specifies where the encoded text goes.\nIf nil, the region between START and END is replaced by the encoded text.\nIf buffer, the encoded text is inserted in that buffer after point (point\ndoes not move).\nIn those cases, the length of the encoded text is returned.\nIf DESTINATION is t, the encoded text is returned.\n\nThis function sets `last-coding-system-used' to the precise coding system\nused (which may be different from CODING-SYSTEM if CODING-SYSTEM is\nnot fully specified.)",
            "fnname": "Fencode_coding_region",
            "intspec": "r\nzCoding system: ",
            "lname": "encode-coding-region",
            "maxargs": 4,
            "minargs": 3,
            "path": "coding.c",
            "sname": "Sencode_coding_region"
        },
        {
            "args": [
                "string",
                "coding_system",
                "nocopy",
                "buffer"
            ],
            "attributes": null,
            "doc": "Encode STRING to CODING-SYSTEM, and return the result.\n\nOptional third arg NOCOPY non-nil means it is OK to return STRING\nitself if the encoding operation is trivial.\n\nOptional fourth arg BUFFER non-nil means that the encoded text is\ninserted in that buffer after point (point does not move).  In this\ncase, the return value is the length of the encoded text.\n\nThis function sets `last-coding-system-used' to the precise coding system\nused (which may be different from CODING-SYSTEM if CODING-SYSTEM is\nnot fully specified.)  The function does not change the match data.",
            "fnname": "Fencode_coding_string",
            "intspec": "0",
            "lname": "encode-coding-string",
            "maxargs": 4,
            "minargs": 2,
            "path": "coding.c",
            "sname": "Sencode_coding_string"
        },
        {
            "args": [
                "ch"
            ],
            "attributes": null,
            "doc": "Encode a Japanese character CH to shift_jis encoding.\nReturn the corresponding code in SJIS.",
            "fnname": "Fencode_sjis_char",
            "intspec": "0",
            "lname": "encode-sjis-char",
            "maxargs": 1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Sencode_sjis_char"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Convert TIME to a timestamp.\n\nTIME is a list (SECOND MINUTE HOUR DAY MONTH YEAR IGNORED DST ZONE)\nin the style of `decode-time', so that (encode-time (decode-time ...)) works.\nIn this list, ZONE can be nil for Emacs local time, t for Universal\nTime, `wall' for system wall clock time, or a string as in the TZ\nenvironment variable.  ZONE can also be a list (as from\n`current-time-zone') or an integer (as from `decode-time') applied\nwithout consideration for daylight saving time.  If ZONE specifies a\ntime zone with daylight-saving transitions, DST is t for daylight\nsaving time, nil for standard time, and -1 to cause the daylight\nsaving flag to be guessed.\n\nTIME can also be a list (SECOND MINUTE HOUR DAY MONTH YEAR), which is\nequivalent to (SECOND MINUTE HOUR DAY MONTH YEAR nil -1 nil).\n\nAs an obsolescent calling convention, if this function is called with\n6 or more arguments, the first 6 arguments are SECOND, MINUTE, HOUR,\nDAY, MONTH, and YEAR, and specify the components of a decoded time.\nIf there are more than 6 arguments the *last* argument is used as ZONE\nand any other extra arguments are ignored, so that (apply\n#\\\\='encode-time (decode-time ...)) works.  In this obsolescent\nconvention, DST is -1 and ZONE defaults to nil.\n\nThe range of supported years is at least 1970 to the near future.\nOut-of-range values for SECOND through MONTH are brought into range\nvia date arithmetic.  This can be tricky especially when combined with\nDST; see Info node `(elisp)Time Conversion' for details and caveats.\n\nusage: (encode-time TIME &rest OBSOLESCENT-ARGUMENTS)",
            "fnname": "Fencode_time",
            "intspec": "0",
            "lname": "encode-time",
            "maxargs": -1,
            "minargs": 1,
            "path": "timefns.c",
            "sname": "Sencode_time"
        },
        {
            "args": [
                "repeat",
                "loopfunc"
            ],
            "attributes": null,
            "doc": "Finish defining a keyboard macro.\nThe definition was started by \\\\[start-kbd-macro].\nThe macro is now available for use via \\\\[call-last-kbd-macro],\nor it can be given a name with \\\\[name-last-kbd-macro] and then invoked\nunder that name.\n\nWith numeric arg, repeat macro now that many times,\ncounting the definition just completed as the first repetition.\nAn argument of zero means repeat until error.\n\nIn Lisp, optional second arg LOOPFUNC may be a function that is called prior to\neach iteration of the macro.  Iteration stops if LOOPFUNC returns nil.",
            "fnname": "Fend_kbd_macro",
            "intspec": "p",
            "lname": "end-kbd-macro",
            "maxargs": 2,
            "minargs": 0,
            "path": "macros.c",
            "sname": "Send_kbd_macro"
        },
        {
            "args": [
                "n"
            ],
            "attributes": null,
            "doc": "Move point to end of current line (in the logical order).\nWith argument N not nil or 1, move forward N - 1 lines first.\nIf point reaches the beginning or end of buffer, it stops there.\nTo ignore intangibility, bind `inhibit-point-motion-hooks' to t.\n\nThis function constrains point to the current field unless this moves\npoint to a different line from the original, unconstrained result.  If\nN is nil or 1, and a rear-sticky field ends at point, the point does\nnot move.  To ignore field boundaries bind `inhibit-field-text-motion'\nto t.",
            "fnname": "Fend_of_line",
            "intspec": "^p",
            "lname": "end-of-line",
            "maxargs": 1,
            "minargs": 0,
            "path": "cmds.c",
            "sname": "Send_of_line"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if point is at the end of the buffer.\nIf the buffer is narrowed, this means the end of the narrowed part.",
            "fnname": "Feobp",
            "intspec": "0",
            "lname": "eobp",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Seobp"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if point is at the end of a line.\n`End of a line' includes point being at the end of the buffer.",
            "fnname": "Feolp",
            "intspec": "0",
            "lname": "eolp",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Seolp"
        },
        {
            "args": [
                "obj1",
                "obj2"
            ],
            "attributes": "const",
            "doc": "Return t if the two args are the same Lisp object.",
            "fnname": "Feq",
            "intspec": "0",
            "lname": "eq",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Seq"
        },
        {
            "args": [
                "obj1",
                "obj2"
            ],
            "attributes": null,
            "doc": "Return t if the two args are `eq' or are indistinguishable numbers.\nIntegers with the same value are `eql'.\nFloating-point values with the same sign, exponent and fraction are `eql'.\nThis differs from numeric comparison: (eql 0.0 -0.0) returns nil and\n\\(eql 0.0e+NaN 0.0e+NaN) returns t, whereas `=' does the opposite.",
            "fnname": "Feql",
            "intspec": "0",
            "lname": "eql",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Seql"
        },
        {
            "args": [
                "o1",
                "o2"
            ],
            "attributes": null,
            "doc": "Return t if two Lisp objects have similar structure and contents.\nThey must have the same data type.\nConses are compared by comparing the cars and the cdrs.\nVectors and strings are compared element by element.\nNumbers are compared via `eql', so integers do not equal floats.\n\\(Use `=' if you want integers and floats to be able to be equal.)\nSymbols must match exactly.",
            "fnname": "Fequal",
            "intspec": "0",
            "lname": "equal",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sequal"
        },
        {
            "args": [
                "o1",
                "o2"
            ],
            "attributes": null,
            "doc": "Return t if two Lisp objects have similar structure and contents.\nThis is like `equal' except that it compares the text properties\nof strings.  (`equal' ignores text properties.)",
            "fnname": "Fequal_including_properties",
            "intspec": "0",
            "lname": "equal-including-properties",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sequal_including_properties"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Delete the entire contents of the current buffer.\nAny narrowing restriction in effect (see `narrow-to-region') is removed,\nso the buffer is truly empty after this.",
            "fnname": "Ferase_buffer",
            "intspec": "*",
            "lname": "erase-buffer",
            "maxargs": 0,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Serase_buffer"
        },
        {
            "args": [
                "obj"
            ],
            "attributes": null,
            "doc": "Convert an error value (ERROR-SYMBOL . DATA) to an error message.\nSee Info anchor `(elisp)Definition of signal' for some details on how this\nerror message is constructed.",
            "fnname": "Ferror_message_string",
            "intspec": "0",
            "lname": "error-message-string",
            "maxargs": 1,
            "minargs": 1,
            "path": "print.c",
            "sname": "Serror_message_string"
        },
        {
            "args": [
                "form",
                "lexical"
            ],
            "attributes": null,
            "doc": "Evaluate FORM and return its value.\nIf LEXICAL is t, evaluate using lexical scoping.\nLEXICAL can also be an actual lexical environment, in the form of an\nalist mapping symbols to their value.",
            "fnname": "Feval",
            "intspec": "0",
            "lname": "eval",
            "maxargs": 2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Seval"
        },
        {
            "args": [
                "buffer",
                "printflag",
                "filename",
                "unibyte",
                "do_allow_print"
            ],
            "attributes": null,
            "doc": "Execute the accessible portion of current buffer as Lisp code.\nYou can use \\\\[narrow-to-region] to limit the part of buffer to be evaluated.\nWhen called from a Lisp program (i.e., not interactively), this\nfunction accepts up to five optional arguments:\nBUFFER is the buffer to evaluate (nil means use current buffer),\n or a name of a buffer (a string).\nPRINTFLAG controls printing of output by any output functions in the\n evaluated code, such as `print', `princ', and `prin1':\n  a value of nil means discard it; anything else is the stream to print to.\n  See Info node `(elisp)Output Streams' for details on streams.\nFILENAME specifies the file name to use for `load-history'.\nUNIBYTE, if non-nil, specifies `load-convert-to-unibyte' for this\n invocation.\nDO-ALLOW-PRINT, if non-nil, specifies that output functions in the\n evaluated code should work normally even if PRINTFLAG is nil, in\n which case the output is displayed in the echo area.\n\nThis function ignores the current value of the `lexical-binding'\nvariable.  Instead it will heed any\n  -*- lexical-binding: t -*-\nsettings in the buffer, and if there is no such setting, the buffer\nwill be evaluated without lexical binding.\n\nThis function preserves the position of point.",
            "fnname": "Feval_buffer",
            "intspec": "",
            "lname": "eval-buffer",
            "maxargs": 5,
            "minargs": 0,
            "path": "lread.c",
            "sname": "Seval_buffer"
        },
        {
            "args": [
                "start",
                "end",
                "printflag",
                "read_function"
            ],
            "attributes": null,
            "doc": "Execute the region as Lisp code.\nWhen called from programs, expects two arguments,\ngiving starting and ending indices in the current buffer\nof the text to be executed.\nPrograms can pass third argument PRINTFLAG which controls output:\n a value of nil means discard it; anything else is stream for printing it.\n See Info node `(elisp)Output Streams' for details on streams.\nAlso the fourth argument READ-FUNCTION, if non-nil, is used\ninstead of `read' to read each expression.  It gets one argument\nwhich is the input stream for reading characters.\n\nThis function does not move point.",
            "fnname": "Feval_region",
            "intspec": "r",
            "lname": "eval-region",
            "maxargs": 4,
            "minargs": 2,
            "path": "lread.c",
            "sname": "Seval_region"
        },
        {
            "args": [
                "event_desc"
            ],
            "attributes": null,
            "doc": "Convert the event description list EVENT-DESC to an event type.\nEVENT-DESC should contain one base event type (a character or symbol)\nand zero or more modifier names (control, meta, hyper, super, shift, alt,\ndrag, down, double or triple).  The base must be last.\n\nThe return value is an event type (a character or symbol) which has\nessentially the same base event type and all the specified modifiers.\n(Some compatibility base types, like symbols that represent a\ncharacter, are not returned verbatim.)",
            "fnname": "Fevent_convert_list",
            "intspec": "0",
            "lname": "event-convert-list",
            "maxargs": 1,
            "minargs": 1,
            "path": "keyboard.c",
            "sname": "Sevent_convert_list"
        },
        {
            "args": [
                "macro",
                "count",
                "loopfunc"
            ],
            "attributes": null,
            "doc": "Execute MACRO as a sequence of events.\nIf MACRO is a string or vector, then the events in it are executed\nexactly as if they had been input by the user.\n\nIf MACRO is a symbol, its function definition is used.  If that is\nanother symbol, this process repeats.  Eventually the result should be\na string or vector.  If the result is not a symbol, string, or vector,\nan error is signaled.\n\nCOUNT is a repeat count, or nil for once, or 0 for infinite loop.\n\nOptional third arg LOOPFUNC may be a function that is called prior to\neach iteration of the macro.  Iteration stops if LOOPFUNC returns nil.\n\nThe buffer shown in the currently selected window will be made the current\nbuffer before the macro is executed.",
            "fnname": "Fexecute_kbd_macro",
            "intspec": "0",
            "lname": "execute-kbd-macro",
            "maxargs": 3,
            "minargs": 1,
            "path": "macros.c",
            "sname": "Sexecute_kbd_macro"
        },
        {
            "args": null,
            "attributes": "noreturn",
            "doc": "Exit from the innermost recursive edit or minibuffer.",
            "fnname": "Fexit_recursive_edit",
            "intspec": "",
            "lname": "exit-recursive-edit",
            "maxargs": 0,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Sexit_recursive_edit"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return the exponential base e of ARG.",
            "fnname": "Fexp",
            "intspec": "0",
            "lname": "exp",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sexp"
        },
        {
            "args": [
                "name",
                "default_directory"
            ],
            "attributes": null,
            "doc": "Convert filename NAME to absolute, and canonicalize it.\nSecond arg DEFAULT-DIRECTORY is directory to start with if NAME is relative\n\\(does not start with slash or tilde); both the directory name and\na directory's file name are accepted.  If DEFAULT-DIRECTORY is nil or\nmissing, the current buffer's value of `default-directory' is used.\nNAME should be a string that is a valid file name for the underlying\nfilesystem.\n\nFile name components that are `.' are removed, and so are file name\ncomponents followed by `..', along with the `..' itself; note that\nthese simplifications are done without checking the resulting file\nnames in the file system.\n\nMultiple consecutive slashes are collapsed into a single slash, except\nat the beginning of the file name when they are significant (e.g., UNC\nfile names on MS-Windows.)\n\nAn initial \\\"~\\\" in NAME expands to your home directory.\n\nAn initial \\\"~USER\\\" in NAME expands to USER's home directory.  If\nUSER doesn't exist, \\\"~USER\\\" is not expanded.\n\nTo do other file name substitutions, see `substitute-in-file-name'.\n\nFor technical reasons, this function can return correct but\nnon-intuitive results for the root directory; for instance,\n\\(expand-file-name \"..\" \"/\") returns \"/..\".  For this reason, use\n\\(directory-file-name (file-name-directory dirname)) to traverse a\nfilesystem tree, not (expand-file-name \"..\" dirname).  Note: make\nsure DIRNAME in this example doesn't end in a slash, unless it's\nthe root directory.",
            "fnname": "Fexpand_file_name",
            "intspec": "0",
            "lname": "expand-file-name",
            "maxargs": 2,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sexpand_file_name"
        },
        {
            "args": [
                "arg1",
                "arg2"
            ],
            "attributes": null,
            "doc": "Return the exponential ARG1 ** ARG2.",
            "fnname": "Fexpt",
            "intspec": "0",
            "lname": "expt",
            "maxargs": 2,
            "minargs": 2,
            "path": "floatfns.c",
            "sname": "Sexpt"
        },
        {
            "args": [
                "character"
            ],
            "attributes": null,
            "doc": "Write CHARACTER to stderr.\nYou can call `print' while debugging emacs, and pass it this function\nto make it write to the debugging output.",
            "fnname": "Fexternal_debugging_output",
            "intspec": "0",
            "lname": "external-debugging-output",
            "maxargs": 1,
            "minargs": 1,
            "path": "print.c",
            "sname": "Sexternal_debugging_output"
        },
        {
            "args": [
                "attribute",
                "value"
            ],
            "attributes": "const",
            "doc": "Check whether a face attribute value is relative.\nSpecifically, this function returns t if the attribute ATTRIBUTE\nwith the value VALUE is relative.\n\nA relative value is one that doesn't entirely override whatever is\ninherited from another face.  For most possible attributes,\nthe only relative value that users see is `unspecified'.\nHowever, for :height, floating point values are also relative.",
            "fnname": "Fface_attribute_relative_p",
            "intspec": "0",
            "lname": "face-attribute-relative-p",
            "maxargs": 2,
            "minargs": 2,
            "path": "xfaces.c",
            "sname": "Sface_attribute_relative_p"
        },
        {
            "args": [
                "plist"
            ],
            "attributes": null,
            "doc": "Return a vector of face attributes corresponding to PLIST.",
            "fnname": "Fface_attributes_as_vector",
            "intspec": "0",
            "lname": "face-attributes-as-vector",
            "maxargs": 1,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sface_attributes_as_vector"
        },
        {
            "args": [
                "face",
                "frame",
                "character"
            ],
            "attributes": null,
            "doc": "Return the font name of face FACE, or nil if it is unspecified.\nThe font name is, by default, for ASCII characters.\nIf the optional argument FRAME is given, report on face FACE in that frame.\nIf FRAME is t, report on the defaults for face FACE (for new frames).\n  The font default for a face is either nil, or a list\n  of the form (bold), (italic) or (bold italic).\nIf FRAME is omitted or nil, use the selected frame.\nIf FRAME is anything but t, and the optional third argument CHARACTER\nis given, return the font name used by FACE for CHARACTER on FRAME.",
            "fnname": "Fface_font",
            "intspec": "0",
            "lname": "face-font",
            "maxargs": 3,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sface_font"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Return t if SYMBOL's function definition is not void.",
            "fnname": "Ffboundp",
            "intspec": "0",
            "lname": "fboundp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sfboundp"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return the smallest integer no less than ARG, as a float.\n\\(Round toward +inf.)",
            "fnname": "Ffceiling",
            "intspec": "0",
            "lname": "fceiling",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sfceiling"
        },
        {
            "args": [
                "feature",
                "subfeature"
            ],
            "attributes": null,
            "doc": "Return t if FEATURE is present in this Emacs.\n\nUse this to conditionalize execution of lisp code based on the\npresence or absence of Emacs or environment extensions.\nUse `provide' to declare that a feature is available.  This function\nlooks at the value of the variable `features'.  The optional argument\nSUBFEATURE can be used to check a specific subfeature of FEATURE.",
            "fnname": "Ffeaturep",
            "intspec": "0",
            "lname": "featurep",
            "maxargs": 2,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sfeaturep"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "If byte-compiled OBJECT is lazy-loaded, fetch it now.",
            "fnname": "Ffetch_bytecode",
            "intspec": "0",
            "lname": "fetch-bytecode",
            "maxargs": 1,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sfetch_bytecode"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return the largest integer no greater than ARG, as a float.\n\\(Round toward -inf.)",
            "fnname": "Fffloor",
            "intspec": "0",
            "lname": "ffloor",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sffloor"
        },
        {
            "args": [
                "pos",
                "escape_from_edge",
                "limit"
            ],
            "attributes": null,
            "doc": "Return the beginning of the field surrounding POS.\nA field is a region of text with the same `field' property.\nIf POS is nil, the value of point is used for POS.\nIf ESCAPE-FROM-EDGE is non-nil and POS is at the beginning of its\nfield, then the beginning of the *previous* field is returned.\nIf LIMIT is non-nil, it is a buffer position; if the beginning of the field\nis before LIMIT, then LIMIT will be returned instead.",
            "fnname": "Ffield_beginning",
            "intspec": "0",
            "lname": "field-beginning",
            "maxargs": 3,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sfield_beginning"
        },
        {
            "args": [
                "pos",
                "escape_from_edge",
                "limit"
            ],
            "attributes": null,
            "doc": "Return the end of the field surrounding POS.\nA field is a region of text with the same `field' property.\nIf POS is nil, the value of point is used for POS.\nIf ESCAPE-FROM-EDGE is non-nil and POS is at the end of its field,\nthen the end of the *following* field is returned.\nIf LIMIT is non-nil, it is a buffer position; if the end of the field\nis after LIMIT, then LIMIT will be returned instead.",
            "fnname": "Ffield_end",
            "intspec": "0",
            "lname": "field-end",
            "maxargs": 3,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sfield_end"
        },
        {
            "args": [
                "pos"
            ],
            "attributes": null,
            "doc": "Return the contents of the field surrounding POS as a string.\nA field is a region of text with the same `field' property.\nIf POS is nil, the value of point is used for POS.",
            "fnname": "Ffield_string",
            "intspec": "0",
            "lname": "field-string",
            "maxargs": 1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sfield_string"
        },
        {
            "args": [
                "pos"
            ],
            "attributes": null,
            "doc": "Return the contents of the field around POS, without text properties.\nA field is a region of text with the same `field' property.\nIf POS is nil, the value of point is used for POS.",
            "fnname": "Ffield_string_no_properties",
            "intspec": "0",
            "lname": "field-string-no-properties",
            "maxargs": 1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sfield_string_no_properties"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return t if FILENAME names a directory you can open.\nThis means that FILENAME must specify the name of a directory, and the\ndirectory must allow you to open files in it.  If this isn't the case,\nreturn nil.\n\nFILENAME can either be a directory name (eg. \\\"/tmp/foo/\\\") or the\nfile name of a file which is a directory (eg. \\\"/tmp/foo\\\", without\nthe final slash).\n\nIn order to use a directory as a buffer's current directory, this\npredicate must return true.",
            "fnname": "Ffile_accessible_directory_p",
            "intspec": "0",
            "lname": "file-accessible-directory-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_accessible_directory_p"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return ACL entries of file named FILENAME.\nThe entries are returned in a format suitable for use in `set-file-acl'\nbut is otherwise undocumented and subject to change.\nReturn nil if file does not exist.",
            "fnname": "Ffile_acl",
            "intspec": "0",
            "lname": "file-acl",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_acl"
        },
        {
            "args": [
                "filename",
                "id_format"
            ],
            "attributes": null,
            "doc": "Return a list of attributes of file FILENAME.\nValue is nil if specified file does not exist.\n\nID-FORMAT specifies the preferred format of attributes uid and gid (see\nbelow) - valid values are `string' and `integer'.  The latter is the\ndefault, but we plan to change that, so you should specify a non-nil value\nfor ID-FORMAT if you use the returned uid or gid.\n\nTo access the elements returned, the following access functions are\nprovided: `file-attribute-type', `file-attribute-link-number',\n`file-attribute-user-id', `file-attribute-group-id',\n`file-attribute-access-time', `file-attribute-modification-time',\n`file-attribute-status-change-time', `file-attribute-size',\n`file-attribute-modes', `file-attribute-inode-number', and\n`file-attribute-device-number'.\n\nElements of the attribute list are:\n 0. t for directory, string (name linked to) for symbolic link, or nil.\n 1. Number of links to file.\n 2. File uid as a string or (if ID-FORMAT is `integer' or a string value\n  cannot be looked up) as an integer.\n 3. File gid, likewise.\n 4. Last access time, in the style of `current-time'.\n  (See a note below about access time on FAT-based filesystems.)\n 5. Last modification time, likewise.  This is the time of the last\n  change to the file's contents.\n 6. Last status change time, likewise.  This is the time of last change\n  to the file's attributes: owner and group, access mode bits, etc.\n 7. Size in bytes, as an integer.\n 8. File modes, as a string of ten letters or dashes as in ls -l.\n 9. An unspecified value, present only for backward compatibility.\n10. inode number, as a nonnegative integer.\n11. Filesystem device identifier, as an integer or a cons cell of integers.\n\nLarge integers are bignums, so `eq' might not work on them.\nOn most filesystems, the combination of the inode and the device\nidentifier uniquely identifies the file.  This unique file identification\nis provided by the access function `file-attribute-file-identifier'.\n\nOn MS-Windows, performance depends on `w32-get-true-file-attributes',\nwhich see.\n\nOn some FAT-based filesystems, only the date of last access is recorded,\nso last access time will always be midnight of that day.",
            "fnname": "Ffile_attributes",
            "intspec": "0",
            "lname": "file-attributes",
            "maxargs": 2,
            "minargs": 1,
            "path": "dired.c",
            "sname": "Sfile_attributes"
        },
        {
            "args": [
                "f1",
                "f2"
            ],
            "attributes": null,
            "doc": "Return t if first arg file attributes list is less than second.\nComparison is in lexicographic order and case is significant.",
            "fnname": "Ffile_attributes_lessp",
            "intspec": "0",
            "lname": "file-attributes-lessp",
            "maxargs": 2,
            "minargs": 2,
            "path": "dired.c",
            "sname": "Sfile_attributes_lessp"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return t if FILENAME names an existing directory.\nReturn nil if FILENAME does not name a directory, or if there\nwas trouble determining whether FILENAME is a directory.\n\nAs a special case, this function will also return t if FILENAME is the\nempty string (\\\"\\\").  This quirk is due to Emacs interpreting the\nempty string (in some cases) as the current directory.\n\nSymbolic links to directories count as directories.\nSee `file-symlink-p' to distinguish symlinks.",
            "fnname": "Ffile_directory_p",
            "intspec": "0",
            "lname": "file-directory-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_directory_p"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return t if FILENAME can be executed by you.\nFor a directory, this means you can access files in that directory.\n\\(It is generally better to use `file-accessible-directory-p' for that\npurpose, though.)",
            "fnname": "Ffile_executable_p",
            "intspec": "0",
            "lname": "file-executable-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_executable_p"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return t if file FILENAME exists (whether or not you can read it).\nReturn nil if FILENAME does not exist, or if there was trouble\ndetermining whether the file exists.\nSee also `file-readable-p' and `file-attributes'.\nThis returns nil for a symlink to a nonexistent file.\nUse `file-symlink-p' to test for such links.",
            "fnname": "Ffile_exists_p",
            "intspec": "0",
            "lname": "file-exists-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_exists_p"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return a value indicating whether FILENAME is locked.\nThe value is nil if the FILENAME is not locked,\nt if it is locked by you, else a string saying which user has locked it.",
            "fnname": "Ffile_locked_p",
            "intspec": "0",
            "lname": "file-locked-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "filelock.c",
            "sname": "Sfile_locked_p"
        },
        {
            "args": [
                "filename",
                "flag"
            ],
            "attributes": null,
            "doc": "Return mode bits of file named FILENAME, as an integer.\nReturn nil if FILENAME does not exist.  If optional FLAG is `nofollow',\ndo not follow FILENAME if it is a symbolic link.",
            "fnname": "Ffile_modes",
            "intspec": "0",
            "lname": "file-modes",
            "maxargs": 2,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_modes"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return t if FILENAME is an absolute file name.\nOn Unix, absolute file names start with `/'.  In Emacs, an absolute\nfile name can also start with an initial `~' or `~USER' component,\nwhere USER is a valid login name.",
            "fnname": "Ffile_name_absolute_p",
            "intspec": "0",
            "lname": "file-name-absolute-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_name_absolute_p"
        },
        {
            "args": [
                "file",
                "directory"
            ],
            "attributes": null,
            "doc": "Return a list of all completions of file name FILE in directory DIRECTORY.\nThese are all file names in directory DIRECTORY which begin with FILE.\n\nThis function ignores some of the possible completions as determined\nby `completion-regexp-list', which see.  `completion-regexp-list'\nis matched against file and directory names relative to DIRECTORY.",
            "fnname": "Ffile_name_all_completions",
            "intspec": "0",
            "lname": "file-name-all-completions",
            "maxargs": 2,
            "minargs": 2,
            "path": "dired.c",
            "sname": "Sfile_name_all_completions"
        },
        {
            "args": [
                "file"
            ],
            "attributes": null,
            "doc": "Return a string representing the file name FILE interpreted as a directory.\nThis operation exists because a directory is also a file, but its name as\na directory is different from its name as a file.\nThe result can be used as the value of `default-directory'\nor passed as second argument to `expand-file-name'.\nFor a Unix-syntax file name, just appends a slash unless a trailing slash\nis already present.",
            "fnname": "Ffile_name_as_directory",
            "intspec": "0",
            "lname": "file-name-as-directory",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_name_as_directory"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return t if file FILENAME is on a case-insensitive filesystem.\nReturn nil if FILENAME does not exist or is not on a case-insensitive\nfilesystem, or if there was trouble determining whether the filesystem\nis case-insensitive.",
            "fnname": "Ffile_name_case_insensitive_p",
            "intspec": "0",
            "lname": "file-name-case-insensitive-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_name_case_insensitive_p"
        },
        {
            "args": [
                "file",
                "directory",
                "predicate"
            ],
            "attributes": null,
            "doc": "Complete file name FILE in directory DIRECTORY.\nReturns the longest string\ncommon to all file names in DIRECTORY that start with FILE.\nIf there is only one and FILE matches it exactly, returns t.\nReturns nil if DIRECTORY contains no name starting with FILE.\n\nIf PREDICATE is non-nil, call PREDICATE with each possible\ncompletion (in absolute form) and ignore it if PREDICATE returns nil.\n\nThis function ignores some of the possible completions as determined\nby the variables `completion-regexp-list' and\n`completion-ignored-extensions', which see.  `completion-regexp-list'\nis matched against file and directory names relative to DIRECTORY.",
            "fnname": "Ffile_name_completion",
            "intspec": "0",
            "lname": "file-name-completion",
            "maxargs": 3,
            "minargs": 2,
            "path": "dired.c",
            "sname": "Sfile_name_completion"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Append COMPONENTS to DIRECTORY and return the resulting string.\nEach element in COMPONENTS must be a string or nil.\nDIRECTORY or the non-final elements in COMPONENTS may or may not end\nwith a slash -- if they don't end with a slash, a slash will be\ninserted before concatenating.\nusage: (record DIRECTORY &rest COMPONENTS)",
            "fnname": "Ffile_name_concat",
            "intspec": "0",
            "lname": "file-name-concat",
            "maxargs": -1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_name_concat"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return the directory component in file name FILENAME.\nReturn nil if FILENAME does not include a directory.\nOtherwise return a directory name.\nGiven a Unix syntax file name, returns a string ending in slash.",
            "fnname": "Ffile_name_directory",
            "intspec": "0",
            "lname": "file-name-directory",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_name_directory"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return file name FILENAME sans its directory.\nFor example, in a Unix-syntax file name,\nthis is everything after the last slash,\nor the entire name if it contains no slash.",
            "fnname": "Ffile_name_nondirectory",
            "intspec": "0",
            "lname": "file-name-nondirectory",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_name_nondirectory"
        },
        {
            "args": [
                "file1",
                "file2"
            ],
            "attributes": null,
            "doc": "Return t if file FILE1 is newer than file FILE2.\nIf FILE1 does not exist, the answer is nil;\notherwise, if FILE2 does not exist, the answer is t.",
            "fnname": "Ffile_newer_than_file_p",
            "intspec": "0",
            "lname": "file-newer-than-file-p",
            "maxargs": 2,
            "minargs": 2,
            "path": "fileio.c",
            "sname": "Sfile_newer_than_file_p"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return t if file FILENAME exists and you can read it.\nSee also `file-exists-p' and `file-attributes'.",
            "fnname": "Ffile_readable_p",
            "intspec": "0",
            "lname": "file-readable-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_readable_p"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return t if FILENAME names a regular file.\nThis is the sort of file that holds an ordinary stream of data bytes.\nReturn nil if FILENAME does not exist or is not a regular file,\nor there was trouble determining whether FILENAME is a regular file.\nSymbolic links to regular files count as regular files.\nSee `file-symlink-p' to distinguish symlinks.",
            "fnname": "Ffile_regular_p",
            "intspec": "0",
            "lname": "file-regular-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_regular_p"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return SELinux context of file named FILENAME.\nThe return value is a list (USER ROLE TYPE RANGE), where the list\nelements are strings naming the user, role, type, and range of the\nfile's SELinux security context.\n\nReturn (nil nil nil nil) if the file is nonexistent,\nor if SELinux is disabled, or if Emacs lacks SELinux support.",
            "fnname": "Ffile_selinux_context",
            "intspec": "0",
            "lname": "file-selinux-context",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_selinux_context"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return non-nil if file FILENAME is the name of a symbolic link.\nThe value is the link target, as a string.\nReturn nil if FILENAME does not exist or is not a symbolic link,\nof there was trouble determining whether the file is a symbolic link.\n\nThis function does not check whether the link target exists.",
            "fnname": "Ffile_symlink_p",
            "intspec": "0",
            "lname": "file-symlink-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_symlink_p"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return storage information about the file system FILENAME is on.\nValue is a list of numbers (TOTAL FREE AVAIL), where TOTAL is the total\nstorage of the file system, FREE is the free storage, and AVAIL is the\nstorage available to a non-superuser.  All 3 numbers are in bytes.\nIf the underlying system call fails, value is nil.\n\nSKIP: Real doc in fileio.c.",
            "fnname": "Ffile_system_info",
            "intspec": "0",
            "lname": "file-system-info",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_system_info"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return t if file FILENAME can be written or created by you.",
            "fnname": "Ffile_writable_p",
            "intspec": "0",
            "lname": "file-writable-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sfile_writable_p"
        },
        {
            "args": [
                "array",
                "item"
            ],
            "attributes": null,
            "doc": "Store each element of ARRAY with ITEM.\nARRAY is a vector, string, char-table, or bool-vector.",
            "fnname": "Ffillarray",
            "intspec": "0",
            "lname": "fillarray",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sfillarray"
        },
        {
            "args": [
                "beg",
                "end",
                "table"
            ],
            "attributes": null,
            "doc": "Return a list of charsets in the region between BEG and END.\nBEG and END are buffer positions.\nOptional arg TABLE if non-nil is a translation table to look up.\n\nIf the current buffer is unibyte, the returned list may contain\nonly `ascii', `eight-bit-control', and `eight-bit-graphic'.",
            "fnname": "Ffind_charset_region",
            "intspec": "0",
            "lname": "find-charset-region",
            "maxargs": 3,
            "minargs": 2,
            "path": "charset.c",
            "sname": "Sfind_charset_region"
        },
        {
            "args": [
                "str",
                "table"
            ],
            "attributes": null,
            "doc": "Return a list of charsets in STR.\nOptional arg TABLE if non-nil is a translation table to look up.\n\nIf STR is unibyte, the returned list may contain\nonly `ascii', `eight-bit-control', and `eight-bit-graphic'.",
            "fnname": "Ffind_charset_string",
            "intspec": "0",
            "lname": "find-charset-string",
            "maxargs": 2,
            "minargs": 1,
            "path": "charset.c",
            "sname": "Sfind_charset_string"
        },
        {
            "args": [
                "start",
                "end",
                "exclude"
            ],
            "attributes": null,
            "doc": "Internal use only.",
            "fnname": "Ffind_coding_systems_region_internal",
            "intspec": "0",
            "lname": "find-coding-systems-region-internal",
            "maxargs": 3,
            "minargs": 2,
            "path": "coding.c",
            "sname": "Sfind_coding_systems_region_internal"
        },
        {
            "args": [
                "pos",
                "limit",
                "string",
                "detail_p"
            ],
            "attributes": null,
            "doc": "Internal use only.\n\nReturn information about composition at or nearest to position POS.\nSee `find-composition' for more details.",
            "fnname": "Ffind_composition_internal",
            "intspec": "0",
            "lname": "find-composition-internal",
            "maxargs": 4,
            "minargs": 4,
            "path": "composite.c",
            "sname": "Sfind_composition_internal"
        },
        {
            "args": [
                "filename",
                "operation"
            ],
            "attributes": null,
            "doc": "Return FILENAME's handler function for OPERATION, if it has one.\nOtherwise, return nil.\nA file name is handled if one of the regular expressions in\n`file-name-handler-alist' matches it.\n\nIf OPERATION equals `inhibit-file-name-operation', then ignore\nany handlers that are members of `inhibit-file-name-handlers',\nbut still do run any other handlers.  This lets handlers\nuse the standard functions without calling themselves recursively.",
            "fnname": "Ffind_file_name_handler",
            "intspec": "0",
            "lname": "find-file-name-handler",
            "maxargs": 2,
            "minargs": 2,
            "path": "fileio.c",
            "sname": "Sfind_file_name_handler"
        },
        {
            "args": [
                "font_spec",
                "frame"
            ],
            "attributes": null,
            "doc": "Return a font-entity matching with FONT-SPEC on the current frame.\nOptional 2nd argument FRAME, if non-nil, specifies the target frame.",
            "fnname": "Ffind_font",
            "intspec": "0",
            "lname": "find-font",
            "maxargs": 2,
            "minargs": 1,
            "path": "font.c",
            "sname": "Sfind_font"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Choose a coding system for an operation based on the target name.\nThe value names a pair of coding systems: (DECODING-SYSTEM . ENCODING-SYSTEM).\nDECODING-SYSTEM is the coding system to use for decoding\n\\(in case OPERATION does decoding), and ENCODING-SYSTEM is the coding system\nfor encoding (in case OPERATION does encoding).\n\nThe first argument OPERATION specifies an I/O primitive:\n  For file I/O, `insert-file-contents' or `write-region'.\n  For process I/O, `call-process', `call-process-region', or `start-process'.\n  For network I/O, `open-network-stream'.\n\nThe remaining arguments should be the same arguments that were passed\nto the primitive.  Depending on which primitive, one of those arguments\nis selected as the TARGET.  For example, if OPERATION does file I/O,\nwhichever argument specifies the file name is TARGET.\n\nTARGET has a meaning which depends on OPERATION:\n  For file I/O, TARGET is a file name (except for the special case below).\n  For process I/O, TARGET is a process name.\n  For network I/O, TARGET is a service name or a port number.\n\nThis function looks up what is specified for TARGET in\n`file-coding-system-alist', `process-coding-system-alist',\nor `network-coding-system-alist' depending on OPERATION.\nThey may specify a coding system, a cons of coding systems,\nor a function symbol to call.\nIn the last case, we call the function with one argument,\nwhich is a list of all the arguments given to this function.\nIf the function can't decide a coding system, it can return\n`undecided' so that the normal code-detection is performed.\n\nIf OPERATION is `insert-file-contents', the argument corresponding to\nTARGET may be a cons (FILENAME . BUFFER).  In that case, FILENAME is a\nfile name to look up, and BUFFER is a buffer that contains the file's\ncontents (not yet decoded).  If `file-coding-system-alist' specifies a\nfunction to call for FILENAME, that function should examine the\ncontents of BUFFER instead of reading the file.\n\nusage: (find-operation-coding-system OPERATION ARGUMENTS...)",
            "fnname": "Ffind_operation_coding_system",
            "intspec": "0",
            "lname": "find-operation-coding-system",
            "maxargs": -1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Sfind_operation_coding_system"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return the floating point number equal to ARG.",
            "fnname": "Ffloat",
            "intspec": "0",
            "lname": "float",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sfloat"
        },
        {
            "args": [
                "specified_time"
            ],
            "attributes": null,
            "doc": "Return the current time, as a float number of seconds since the epoch.\nIf SPECIFIED-TIME is given, it is a time value to convert to float\ninstead of the current time.  See `format-time-string' for the various\nforms of a time value.\n\nWARNING: Since the result is floating point, it may not be exact.\nIf precise time stamps are required, use either `time-convert',\nor (if you need time as a string) `format-time-string'.",
            "fnname": "Ffloat_time",
            "intspec": "0",
            "lname": "float-time",
            "maxargs": 1,
            "minargs": 0,
            "path": "timefns.c",
            "sname": "Sfloat_time"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is a floating point number.",
            "fnname": "Ffloatp",
            "intspec": "0",
            "lname": "floatp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sfloatp"
        },
        {
            "args": [
                "arg",
                "divisor"
            ],
            "attributes": null,
            "doc": "Return the largest integer no greater than ARG.\nThis rounds the value towards -inf.\nWith optional DIVISOR, return the largest integer no greater than ARG/DIVISOR.",
            "fnname": "Ffloor",
            "intspec": "0",
            "lname": "floor",
            "maxargs": 2,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sfloor"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Flush standard-output.\nThis can be useful after using `princ' and the like in scripts.",
            "fnname": "Fflush_standard_output",
            "intspec": "0",
            "lname": "flush-standard-output",
            "maxargs": 0,
            "minargs": 0,
            "path": "print.c",
            "sname": "Sflush_standard_output"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Make SYMBOL's function definition be void.\nReturn SYMBOL.\n\nIf a function definition is void, trying to call a function by that\nname will cause a `void-function' error.  For more details, see Info\nnode `(elisp) Function Cells'.\n\nSee also `makunbound'.",
            "fnname": "Ffmakunbound",
            "intspec": "0",
            "lname": "fmakunbound",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sfmakunbound"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the character following point, as a number.\nAt the end of the buffer or accessible region, return 0.",
            "fnname": "Ffollowing_char",
            "intspec": "0",
            "lname": "following-char",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sfollowing_char"
        },
        {
            "args": [
                "position",
                "window",
                "string"
            ],
            "attributes": null,
            "doc": "Return a font-object for displaying a character at POSITION.\nOptional second arg WINDOW, if non-nil, is a window displaying\nthe current buffer.  It defaults to the currently selected window.\nOptional third arg STRING, if non-nil, is a string containing the target\ncharacter at index specified by POSITION.",
            "fnname": "Ffont_at",
            "intspec": "0",
            "lname": "font-at",
            "maxargs": 3,
            "minargs": 1,
            "path": "font.c",
            "sname": "Sfont_at"
        },
        {
            "args": [
                "otf_features",
                "gstring_in",
                "from",
                "to",
                "gstring_out",
                "index"
            ],
            "attributes": null,
            "doc": "Apply OpenType features on glyph-string GSTRING-IN.\nOTF-FEATURES specifies which features to apply in this format:\n  (SCRIPT LANGSYS GSUB GPOS)\nwhere\n  SCRIPT is a symbol specifying a script tag of OpenType,\n  LANGSYS is a symbol specifying a langsys tag of OpenType,\n  GSUB and GPOS, if non-nil, are lists of symbols specifying feature tags.\n\nIf LANGSYS is nil, the default langsys is selected.\n\nThe features are applied in the order they appear in the list.  The\nsymbol `*' means to apply all available features not present in this\nlist, and the remaining features are ignored.  For instance, (vatu\npstf * haln) is to apply vatu and pstf in this order, then to apply\nall available features other than vatu, pstf, and haln.\n\nThe features are applied to the glyphs in the range FROM and TO of\nthe glyph-string GSTRING-IN.\n\nIf some feature is actually applicable, the resulting glyphs are\nproduced in the glyph-string GSTRING-OUT from the index INDEX.  In\nthis case, the value is the number of produced glyphs.\n\nIf no feature is applicable, no glyph is produced in GSTRING-OUT, and\nthe value is 0.\n\nIf GSTRING-OUT is too short to hold produced glyphs, no glyphs are\nproduced in GSTRING-OUT, and the value is nil.\n\nSee the documentation of `composition-get-gstring' for the format of\nglyph-string.",
            "fnname": "Ffont_drive_otf",
            "intspec": "0",
            "lname": "font-drive-otf",
            "maxargs": 6,
            "minargs": 6,
            "path": "font.c",
            "sname": "Sfont_drive_otf"
        },
        {
            "args": [
                "font",
                "frame"
            ],
            "attributes": null,
            "doc": "Return a plist of face attributes generated by FONT.\nFONT is a font name, a font-spec, a font-entity, or a font-object.\nThe return value is a list of the form\n\n\\(:family FAMILY :height HEIGHT :weight WEIGHT :slant SLANT :width WIDTH)\n\nwhere FAMILY, HEIGHT, WEIGHT, SLANT, and WIDTH are face attribute values\ncompatible with `set-face-attribute'.  Some of these key-attribute pairs\nmay be omitted from the list if they are not specified by FONT.\n\nThe optional argument FRAME specifies the frame that the face attributes\nare to be displayed on.  If omitted, the selected frame is used.",
            "fnname": "Ffont_face_attributes",
            "intspec": "0",
            "lname": "font-face-attributes",
            "maxargs": 2,
            "minargs": 1,
            "path": "font.c",
            "sname": "Sfont_face_attributes"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "List available font families on the current frame.\nIf FRAME is omitted or nil, the selected frame is used.",
            "fnname": "Ffont_family_list",
            "intspec": "0",
            "lname": "font-family-list",
            "maxargs": 1,
            "minargs": 0,
            "path": "font.c",
            "sname": "Sfont_family_list"
        },
        {
            "args": [
                "font",
                "key"
            ],
            "attributes": null,
            "doc": "Return the value of FONT's property KEY.\nFONT is a font-spec, a font-entity, or a font-object.\nKEY can be any symbol, but these are reserved for specific meanings:\n  :foundry, :family, :adstyle, :registry, :weight, :slant, :width,\n  :size, :dpi, :spacing, :avgwidth, :script, :lang, :otf\nSee the documentation of `font-spec' for their meanings.\n\nIf FONT is a font-entity or a font-object, then values of\n:script and :otf properties are different from those of a font-spec\nas below:\n\n  The value of :script may be a list of scripts that are supported by\n  the font.\n\n  The value of :otf is a cons (GSUB . GPOS) where GSUB and GPOS are\n  lists representing the OpenType features supported by the font, of\n  this form: ((SCRIPT (LANGSYS FEATURE ...) ...) ...), where\n  SCRIPT, LANGSYS, and FEATURE are all symbols representing OpenType\n  Layout tags.  See `otf-script-alist' for the OpenType script tags.\n\nIn addition to the keys listed above, the following keys are reserved\nfor the specific meanings as below:\n\n  The value of :type is a symbol that identifies the font backend to be\n  used, such as `ftcrhb' or `xfthb' on X , `harfbuzz' or `uniscribe' on\n  MS-Windows, `ns' on Cocoa/GNUstep, etc.\n\n  The value of :combining-capability is non-nil if the font-backend of\n  FONT supports rendering of combining characters for non-OTF fonts.",
            "fnname": "Ffont_get",
            "intspec": "0",
            "lname": "font-get",
            "maxargs": 2,
            "minargs": 2,
            "path": "font.c",
            "sname": "Sfont_get"
        },
        {
            "args": [
                "font_object",
                "from",
                "to",
                "object"
            ],
            "attributes": null,
            "doc": "Return a vector of FONT-OBJECT's glyphs for the specified characters.\nFROM and TO are positions (integers or markers) specifying a region\nof the current buffer, and can be in either order.  If the optional\nfourth arg OBJECT is not nil, it is a string or a vector containing\nthe target characters between indices FROM and TO, which are treated\nas in `substring'.\n\nEach element is a vector containing information of a glyph in this format:\n  [FROM-IDX TO-IDX C CODE WIDTH LBEARING RBEARING ASCENT DESCENT ADJUSTMENT]\nwhere\n  FROM is an index numbers of a character the glyph corresponds to.\n  TO is the same as FROM.\n  C is the character of the glyph.\n  CODE is the glyph-code of C in FONT-OBJECT.\n  WIDTH thru DESCENT are the metrics (in pixels) of the glyph.\n  ADJUSTMENT is always nil.\n\nIf FONT-OBJECT doesn't have a glyph for a character, the corresponding\nelement is nil.\n\nAlso see `font-has-char-p', which is more efficient than this function\nif you just want to check whether FONT-OBJECT has a glyph for a\ncharacter.",
            "fnname": "Ffont_get_glyphs",
            "intspec": "0",
            "lname": "font-get-glyphs",
            "maxargs": 4,
            "minargs": 3,
            "path": "font.c",
            "sname": "Sfont_get_glyphs"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Get the system default fixed width font.\nThe font is returned as either a font-spec or font name.",
            "fnname": "Ffont_get_system_font",
            "intspec": "0",
            "lname": "font-get-system-font",
            "maxargs": 0,
            "minargs": 0,
            "path": "xsettings.c",
            "sname": "Sfont_get_system_font"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Get the system default application font.\nThe font is returned as either a font-spec or font name.",
            "fnname": "Ffont_get_system_normal_font",
            "intspec": "0",
            "lname": "font-get-system-normal-font",
            "maxargs": 0,
            "minargs": 0,
            "path": "xsettings.c",
            "sname": "Sfont_get_system_normal_font"
        },
        {
            "args": [
                "font",
                "ch",
                "frame"
            ],
            "attributes": null,
            "doc": "Return non-nil if FONT on FRAME has a glyph for character CH.\nFONT can be either a font-entity or a font-object.  If it is\na font-entity and the result is nil, it means the font needs to be\nopened (with `open-font') to check.\nFRAME defaults to the selected frame if it is nil or omitted.",
            "fnname": "Ffont_has_char_p",
            "intspec": "0",
            "lname": "font-has-char-p",
            "maxargs": 3,
            "minargs": 2,
            "path": "font.c",
            "sname": "Sfont_has_char_p"
        },
        {
            "args": [
                "name",
                "frame"
            ],
            "attributes": null,
            "doc": "Return information about a font named NAME on frame FRAME.\nIf FRAME is omitted or nil, use the selected frame.\n\nThe returned value is a vector of 14 elements:\n  [ OPENED-NAME FULL-NAME SIZE HEIGHT BASELINE-OFFSET RELATIVE-COMPOSE\n    DEFAULT-ASCENT MAX-WIDTH ASCENT DESCENT SPACE-WIDTH AVERAGE-WIDTH\n    FILENAME CAPABILITY ]\nwhere\n  OPENED-NAME is the name used for opening the font,\n  FULL-NAME is the full name of the font,\n  SIZE is the pixelsize of the font,\n  HEIGHT is the pixel-height of the font (i.e., ascent + descent),\n  BASELINE-OFFSET is the upward offset pixels from ASCII baseline,\n  RELATIVE-COMPOSE and DEFAULT-ASCENT are the numbers controlling\n    how to compose characters,\n  MAX-WIDTH is the maximum advance width of the font,\n  ASCENT, DESCENT, SPACE-WIDTH, and AVERAGE-WIDTH are metrics of\n    the font in pixels,\n  FILENAME is the font file name, a string (or nil if the font backend\n    doesn't provide a file name).\n  CAPABILITY is a list whose first element is a symbol representing the\n    font format, one of `x', `opentype', `truetype', `type1', `pcf', or `bdf'.\n    The remaining elements describe the details of the font capabilities,\n    as follows:\n\n      If the font is OpenType font, the form of the list is\n        (opentype GSUB GPOS)\n      where GSUB shows which \"GSUB\" features the font supports, and GPOS\n      shows which \"GPOS\" features the font supports.  Both GSUB and GPOS are\n      lists of the form:\n        ((SCRIPT (LANGSYS FEATURE ...) ...) ...)\n\n      where\n        SCRIPT is a symbol representing OpenType script tag.\n        LANGSYS is a symbol representing OpenType langsys tag, or nil\n         representing the default langsys.\n        FEATURE is a symbol representing OpenType feature tag.\n\n      If the font is not an OpenType font, there are no elements\n      in CAPABILITY except the font format symbol.\n\nIf the named font cannot be opened and loaded, return nil.",
            "fnname": "Ffont_info",
            "intspec": "0",
            "lname": "font-info",
            "maxargs": 2,
            "minargs": 1,
            "path": "font.c",
            "sname": "Sfont_info"
        },
        {
            "args": [
                "spec",
                "font"
            ],
            "attributes": null,
            "doc": "Return t if and only if font-spec SPEC matches with FONT.\nFONT is a font-spec, font-entity, or font-object.",
            "fnname": "Ffont_match_p",
            "intspec": "0",
            "lname": "font-match-p",
            "maxargs": 2,
            "minargs": 2,
            "path": "font.c",
            "sname": "Sfont_match_p"
        },
        {
            "args": [
                "font_object",
                "character",
                "otf_features"
            ],
            "attributes": null,
            "doc": "Return a list of alternate glyphs of CHARACTER in FONT-OBJECT.\nOTF-FEATURES specifies which features of the font FONT-OBJECT to apply\nin this format:\n  (SCRIPT LANGSYS FEATURE ...)\nSee the documentation of `font-drive-otf' for more detail.\n\nThe value is a list of cons cells of the format (GLYPH-ID . CHARACTER),\nwhere GLYPH-ID is a glyph index of the font, and CHARACTER is a\ncharacter code corresponding to the glyph or nil if there's no\ncorresponding character.",
            "fnname": "Ffont_otf_alternates",
            "intspec": "0",
            "lname": "font-otf-alternates",
            "maxargs": 3,
            "minargs": 3,
            "path": "font.c",
            "sname": "Sfont_otf_alternates"
        },
        {
            "args": [
                "font",
                "prop",
                "val"
            ],
            "attributes": null,
            "doc": "Set one property of FONT: give property KEY value VAL.\nFONT is a font-spec, a font-entity, or a font-object.\n\nIf FONT is a font-spec, KEY can be any symbol.  But if KEY is the one\naccepted by the function `font-spec' (which see), VAL must be what\nallowed in `font-spec'.\n\nIf FONT is a font-entity or a font-object, KEY must not be the one\naccepted by `font-spec'.\n\nSee also `font-get' for KEYs that have special meanings.",
            "fnname": "Ffont_put",
            "intspec": "0",
            "lname": "font-put",
            "maxargs": 3,
            "minargs": 3,
            "path": "font.c",
            "sname": "Sfont_put"
        },
        {
            "args": [
                "gstring",
                "direction"
            ],
            "attributes": null,
            "doc": "Shape the glyph-string GSTRING subject to bidi DIRECTION.\nShaping means substituting glyphs and/or adjusting positions of glyphs\nto get the correct visual image of character sequences set in the\nheader of the glyph-string.\n\nDIRECTION should be produced by the UBA, the Unicode Bidirectional\nAlgorithm, and should be a symbol, either L2R or R2L.  It can also\nbe nil if the bidi context is unknown.\n\nIf the shaping was successful, the value is GSTRING itself or a newly\ncreated glyph-string.  Otherwise, the value is nil.\n\nSee the documentation of `composition-get-gstring' for the format of\nGSTRING.",
            "fnname": "Ffont_shape_gstring",
            "intspec": "0",
            "lname": "font-shape-gstring",
            "maxargs": 2,
            "minargs": 2,
            "path": "font.c",
            "sname": "Sfont_shape_gstring"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a newly created font-spec with arguments as properties.\n\nARGS must come in pairs KEY VALUE of font properties.  KEY must be a\nvalid font property name listed below:\n\n`:family', `:weight', `:slant', `:width'\n\nThey are the same as face attributes of the same name.  See\n`set-face-attribute'.\n\n`:foundry'\n\nVALUE must be a string or a symbol specifying the font foundry, e.g. `misc'.\n\n`:adstyle'\n\nVALUE must be a string or a symbol specifying the additional\ntypographic style information of a font, e.g. `sans'.\n\n`:registry'\n\nVALUE must be a string or a symbol specifying the charset registry and\nencoding of a font, e.g. `iso8859-1'.\n\n`:size'\n\nVALUE must be a non-negative integer or a floating point number\nspecifying the font size.  It specifies the font size in pixels (if\nVALUE is an integer), or in points (if VALUE is a float).\n\n`:dpi'\n\nVALUE must be a non-negative number that specifies the resolution\n(dot per inch) for which the font is designed.\n\n`:spacing'\n\nVALUE specifies the spacing of the font: mono, proportional, charcell,\nor dual.  It can be either a number (0 for proportional, 90 for dual,\n100 for mono, 110 for charcell) or a 1-letter symbol: `P', `D', `M',\nor `C' (lower-case variants are also accepted).\n\n`:avgwidth'\n\nVALUE must be a non-negative integer specifying the average width of\nthe font in 1/10 pixel units.\n\n`:name'\n\nVALUE must be a string of XLFD-style or fontconfig-style font name.\n\n`:script'\n\nVALUE must be a symbol representing a script that the font must\nsupport.  It may be a symbol representing a subgroup of a script\nlisted in the variable `script-representative-chars'.\n\n`:lang'\n\nVALUE must be a symbol whose name is a two-letter ISO-639 language\nname, e.g. `ja'.  The value is matched against the \"Additional Style\"\nfield of the XLFD spec of a font, if it's non-empty, on X, and\nagainst the codepages supported by the font on w32.\n\n`:otf'\n\nVALUE must be a list (SCRIPT-TAG LANGSYS-TAG GSUB [ GPOS ]) to specify\nrequired OpenType features.\n\n  SCRIPT-TAG: OpenType script tag symbol (e.g. `deva').\n  LANGSYS-TAG: OpenType language system tag symbol,\n     or nil for the default language system.\n  GSUB: List of OpenType GSUB feature tag symbols, or nil if none required.\n  GPOS: List of OpenType GPOS feature tag symbols, or nil if none required.\n\nGSUB and GPOS may contain nil elements.  In such a case, the font\nmust not have any of the remaining elements.\n\nFor instance, if the VALUE is `(thai nil nil (mark))', the font must\nbe an OpenType font whose GPOS table of `thai' script's default\nlanguage system must contain `mark' feature.\n\nusage: (font-spec ARGS...)",
            "fnname": "Ffont_spec",
            "intspec": "0",
            "lname": "font-spec",
            "maxargs": -1,
            "minargs": 0,
            "path": "font.c",
            "sname": "Sfont_spec"
        },
        {
            "args": [
                "font_object",
                "character"
            ],
            "attributes": null,
            "doc": "Return a list of variation glyphs for CHARACTER in FONT-OBJECT.\nEach element of the value is a cons (VARIATION-SELECTOR . GLYPH-ID),\nwhere\n  VARIATION-SELECTOR is a character code of variation selector\n    (#xFE00..#xFE0F or #xE0100..#xE01EF).\n  GLYPH-ID is a glyph code of the corresponding variation glyph, an integer.",
            "fnname": "Ffont_variation_glyphs",
            "intspec": "0",
            "lname": "font-variation-glyphs",
            "maxargs": 2,
            "minargs": 2,
            "path": "font.c",
            "sname": "Sfont_variation_glyphs"
        },
        {
            "args": [
                "font",
                "fold_wildcards",
                "long_xlfds"
            ],
            "attributes": null,
            "doc": "Return XLFD name of FONT.\nFONT is a font-spec, font-entity, or font-object.\n\nIf the name is too long to be represented as an XLFD (maximum 255\nchars) and LONG_XLFDS is nil, return nil.\n\nIf the 2nd optional arg FOLD-WILDCARDS is non-nil,\nthe consecutive wildcards are folded into one.",
            "fnname": "Ffont_xlfd_name",
            "intspec": "0",
            "lname": "font-xlfd-name",
            "maxargs": 3,
            "minargs": 1,
            "path": "font.c",
            "sname": "Sfont_xlfd_name"
        },
        {
            "args": [
                "object",
                "extra_type"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a font-spec, font-entity, or font-object.\nReturn nil otherwise.\nOptional 2nd argument EXTRA-TYPE, if non-nil, specifies to check\nwhich kind of font it is.  It must be one of `font-spec', `font-entity',\n`font-object'.",
            "fnname": "Ffontp",
            "intspec": "0",
            "lname": "fontp",
            "maxargs": 2,
            "minargs": 1,
            "path": "font.c",
            "sname": "Sfontp"
        },
        {
            "args": [
                "name",
                "ch",
                "all"
            ],
            "attributes": null,
            "doc": "Return a font name pattern for character CH in fontset NAME.\nIf NAME is t, find a pattern in the default fontset.\nIf NAME is nil, find a pattern in the fontset of the selected frame.\n\nThe value has the form (FAMILY . REGISTRY), where FAMILY is a font\nfamily name and REGISTRY is a font registry name.  This is actually\nthe first font name pattern for CH in the fontset or in the default\nfontset.\n\nIf the 2nd optional arg ALL is non-nil, return a list of all font name\npatterns.",
            "fnname": "Ffontset_font",
            "intspec": "0",
            "lname": "fontset-font",
            "maxargs": 3,
            "minargs": 2,
            "path": "fontset.c",
            "sname": "Sfontset_font"
        },
        {
            "args": [
                "fontset",
                "frame"
            ],
            "attributes": null,
            "doc": "Return information about a fontset FONTSET on frame FRAME.\n\nFONTSET is a fontset name string, nil for the fontset of FRAME, or t\nfor the default fontset.  FRAME nil means the selected frame.\n\nThe value is a char-table whose elements have this form:\n\n    ((FONT OPENED-FONT ...) ...)\n\nFONT is a name of font specified for a range of characters.\n\nOPENED-FONT is a name of a font actually opened.\n\nThe char-table has one extra slot.  If FONTSET is not the default\nfontset, the value the extra slot is a char-table containing the\ninformation about the derived fonts from the default fontset.  The\nformat is the same as above.",
            "fnname": "Ffontset_info",
            "intspec": "0",
            "lname": "fontset-info",
            "maxargs": 2,
            "minargs": 1,
            "path": "fontset.c",
            "sname": "Sfontset_info"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of all defined fontset names.",
            "fnname": "Ffontset_list",
            "intspec": "0",
            "lname": "fontset-list",
            "maxargs": 0,
            "minargs": 0,
            "path": "fontset.c",
            "sname": "Sfontset_list"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a brief summary of all fontsets for debug use.",
            "fnname": "Ffontset_list_all",
            "intspec": "0",
            "lname": "fontset-list-all",
            "maxargs": 0,
            "minargs": 0,
            "path": "fontset.c",
            "sname": "Sfontset_list_all"
        },
        {
            "args": [
                "all"
            ],
            "attributes": null,
            "doc": "Force redisplay of the current buffer's mode line and header line.\nWith optional non-nil ALL, force redisplay of all mode lines, tab lines and\nheader lines.  This function also forces recomputation of the\nmenu bar menus and the frame title.",
            "fnname": "Fforce_mode_line_update",
            "intspec": "0",
            "lname": "force-mode-line-update",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sforce_mode_line_update"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Force all windows to be updated on next redisplay.\nIf optional arg OBJECT is a window, force redisplay of that window only.\nIf OBJECT is a buffer or buffer name, force redisplay of all windows\ndisplaying that buffer.",
            "fnname": "Fforce_window_update",
            "intspec": "0",
            "lname": "force-window-update",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sforce_window_update"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Format a string out of a format-string and arguments.\nThe first argument is a format control string.\nThe other arguments are substituted into it to make the result, a string.\n\nThe format control string may contain %-sequences meaning to substitute\nthe next available argument, or the argument explicitly specified:\n\n%s means produce a string argument.  Actually, produces any object with `princ'.\n%d means produce as signed number in decimal.\n%o means produce a number in octal.\n%x means produce a number in hex.\n%X is like %x, but uses upper case.\n%e means produce a number in exponential notation.\n%f means produce a number in decimal-point notation.\n%g means produce a number in exponential notation if the exponent would be\n   less than -4 or greater than or equal to the precision (default: 6);\n   otherwise it produces in decimal-point notation.\n%c means produce a number as a single character.\n%S means produce any object as an s-expression (using `prin1').\n\nThe argument used for %d, %o, %x, %e, %f, %g or %c must be a number.\n%o, %x, and %X treat arguments as unsigned if `binary-as-unsigned' is t\n  (this is experimental; email 32252@debbugs.gnu.org if you need it).\nUse %% to put a single % into the output.\n\nA %-sequence other than %% may contain optional field number, flag,\nwidth, and precision specifiers, as follows:\n\n  %<field><flags><width><precision>character\n\nwhere field is [0-9]+ followed by a literal dollar \"$\", flags is\n[+ #0-]+, width is [0-9]+, and precision is a literal period \".\"\nfollowed by [0-9]+.\n\nIf a %-sequence is numbered with a field with positive value N, the\nNth argument is substituted instead of the next one.  A format can\ncontain either numbered or unnumbered %-sequences but not both, except\nthat %% can be mixed with numbered %-sequences.\n\nThe + flag character inserts a + before any nonnegative number, while a\nspace inserts a space before any nonnegative number; these flags\naffect only numeric %-sequences, and the + flag takes precedence.\nThe - and 0 flags affect the width specifier, as described below.\n\nThe # flag means to use an alternate display form for %o, %x, %X, %e,\n%f, and %g sequences: for %o, it ensures that the result begins with\n\\\"0\\\"; for %x and %X, it prefixes nonzero results with \\\"0x\\\" or \\\"0X\\\";\nfor %e and %f, it causes a decimal point to be included even if the\nprecision is zero; for %g, it causes a decimal point to be\nincluded even if the precision is zero, and also forces trailing\nzeros after the decimal point to be left in place.\n\nThe width specifier supplies a lower limit for the length of the\nproduced representation.  The padding, if any, normally goes on the\nleft, but it goes on the right if the - flag is present.  The padding\ncharacter is normally a space, but it is 0 if the 0 flag is present.\nThe 0 flag is ignored if the - flag is present, or the format sequence\nis something other than %d, %o, %x, %e, %f, and %g.\n\nFor %e and %f sequences, the number after the \".\" in the precision\nspecifier says how many decimal places to show; if zero, the decimal\npoint itself is omitted.  For %g, the precision specifies how many\nsignificant digits to produce; zero or omitted are treated as 1.\nFor %s and %S, the precision specifier truncates the string to the\ngiven width.\n\nText properties, if any, are copied from the format-string to the\nproduced text.\n\nusage: (format STRING &rest OBJECTS)",
            "fnname": "Fformat",
            "intspec": "0",
            "lname": "format",
            "maxargs": -1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Sformat"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Format a string out of a format-string and arguments.\nThe first argument is a format control string.\nThe other arguments are substituted into it to make the result, a string.\n\nThis acts like `format', except it also replaces each grave accent (\\\\=`)\nby a left quote, and each apostrophe (\\\\=') by a right quote.  The left\nand right quote replacement characters are specified by\n`text-quoting-style'.\n\nusage: (format-message STRING &rest OBJECTS)",
            "fnname": "Fformat_message",
            "intspec": "0",
            "lname": "format-message",
            "maxargs": -1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Sformat_message"
        },
        {
            "args": [
                "format",
                "face",
                "window",
                "buffer"
            ],
            "attributes": null,
            "doc": "Format a string out of a mode line format specification.\nFirst arg FORMAT specifies the mode line format (see `mode-line-format'\nfor details) to use.\n\nBy default, the format is evaluated for the currently selected window.\n\nOptional second arg FACE specifies the face property to put on all\ncharacters for which no face is specified.  The value nil means the\ndefault face.  The value t means whatever face the window's mode line\ncurrently uses (either `mode-line' or `mode-line-inactive',\ndepending on whether the window is the selected window or not).\nAn integer value means the value string has no text\nproperties.\n\nOptional third and fourth args WINDOW and BUFFER specify the window\nand buffer to use as the context for the formatting (defaults\nare the selected window and the WINDOW's buffer).",
            "fnname": "Fformat_mode_line",
            "intspec": "0",
            "lname": "format-mode-line",
            "maxargs": 4,
            "minargs": 1,
            "path": "xdisp.c",
            "sname": "Sformat_mode_line"
        },
        {
            "args": [
                "address",
                "omit_port"
            ],
            "attributes": null,
            "doc": "Convert network ADDRESS from internal format to a string.\nA 4 or 5 element vector represents an IPv4 address (with port number).\nAn 8 or 9 element vector represents an IPv6 address (with port number).\nIf optional second argument OMIT-PORT is non-nil, don't include a port\nnumber in the string, even when present in ADDRESS.\nReturn nil if format of ADDRESS is invalid.",
            "fnname": "Fformat_network_address",
            "intspec": "0",
            "lname": "format-network-address",
            "maxargs": 2,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sformat_network_address"
        },
        {
            "args": [
                "format_string",
                "timeval",
                "zone"
            ],
            "attributes": null,
            "doc": "Use FORMAT-STRING to format the time value TIME.\nA time value that is omitted or nil stands for the current time,\na number stands for that many seconds, an integer pair (TICKS . HZ)\nstands for TICKS/HZ seconds, and an integer list (HI LO US PS) stands\nfor HI*2**16 + LO + US/10**6 + PS/10**12 seconds.  This function\ntreats seconds as time since the epoch of 1970-01-01 00:00:00 UTC.\n\nThe optional ZONE is omitted or nil for Emacs local time, t for\nUniversal Time, `wall' for system wall clock time, or a string as in\nthe TZ environment variable.  It can also be a list (as from\n`current-time-zone') or an integer (as from `decode-time') applied\nwithout consideration for daylight saving time.\n\nThe value is a copy of FORMAT-STRING, but with certain constructs replaced\nby text that describes the specified date and time in TIME:\n\n%Y is the year, %y year without century, %C the century.\n%G is the year corresponding to the ISO week, %g year corresponding\n to the ISO week, without century.\n%m is the numeric month.\n%b and %h are the locale's abbreviated month name, %B the full name.\n (%h is not supported on MS-Windows.)\n%d is the day of the month, zero-padded, %e is blank-padded.\n%u is the numeric day of week from 1 (Monday) to 7, %w from 0 (Sunday) to 6.\n%a is the locale's abbreviated name of the day of week, %A the full name.\n%U is the week number starting on Sunday, %W starting on Monday,\n %V the week number according to ISO 8601.\n%j is the day of the year.\n\n%H is the hour on a 24-hour clock, %I is on a 12-hour clock, %k is like %H\n only blank-padded, %l is like %I blank-padded.\n%p is the locale's equivalent of either AM or PM.\n%q is the calendar quarter (1\u20134).\n%M is the minute (00-59).\n%S is the second (00-59; 00-60 on platforms with leap seconds)\n%s is the number of seconds since 1970-01-01 00:00:00 +0000.\n%N is the nanosecond, %6N the microsecond, %3N the millisecond, etc.\n%Z is the time zone abbreviation, %z is the numeric form.\n\n%c is the locale's date and time format.\n%x is the locale's \"preferred\" date format.\n%D is like \"%m/%d/%y\".\n%F is the ISO 8601 date format (like \"%+4Y-%m-%d\").\n\n%R is like \"%H:%M\", %T is like \"%H:%M:%S\", %r is like \"%I:%M:%S %p\".\n%X is the locale's \"preferred\" time format.\n\nFinally, %n is a newline, %t is a tab, %% is a literal %, and\nunrecognized %-sequences stand for themselves.\n\nA %-sequence can contain optional flags, field width, and a modifier\n(in that order) after the `%'.  The flags are:\n\n`-' Do not pad the field.\n`_' Pad with spaces.\n`0' Pad with zeros.\n`+' Pad with zeros and put `+' before nonnegative year numbers with >4 digits.\n`^' Use upper case characters if possible.\n`#' Use opposite case characters if possible.\n\nA field width N is an unsigned decimal integer with a leading digit\nnonzero.  %NX is like %X, but takes up at least N positions.  The\nfield width is (on GNU/Linux and some other systems) in measured in\nbytes, not characters.  It depends on the locale what the width (in\ncharacters) %NX will end up being, especially when there are non-ASCII\ncharacters in %X.\n\nThe modifiers are:\n\n`E' Use the locale's alternative version.\n`O' Use the locale's number symbols.\n\nFor example, to produce full ISO 8601 format, use \"%FT%T%z\".\n\nusage: (format-time-string FORMAT-STRING &optional TIME ZONE)",
            "fnname": "Fformat_time_string",
            "intspec": "0",
            "lname": "format-time-string",
            "maxargs": 3,
            "minargs": 1,
            "path": "timefns.c",
            "sname": "Sformat_time_string"
        },
        {
            "args": [
                "n"
            ],
            "attributes": null,
            "doc": "Move point N characters forward (backward if N is negative).\nOn reaching end or beginning of buffer, stop and signal error.\nInteractively, N is the numeric prefix argument.\nIf N is omitted or nil, move point 1 character forward.\n\nDepending on the bidirectional context, the movement may be to the\nright or to the left on the screen.  This is in contrast with\n\\\\[right-char], which see.",
            "fnname": "Fforward_char",
            "intspec": "^p",
            "lname": "forward-char",
            "maxargs": 1,
            "minargs": 0,
            "path": "cmds.c",
            "sname": "Sforward_char"
        },
        {
            "args": [
                "count"
            ],
            "attributes": null,
            "doc": "Move forward across up to COUNT comments.  If COUNT is negative, move backward.\nStop scanning if we find something other than a comment or whitespace.\nSet point to where scanning stops.\nIf COUNT comments are found as expected, with nothing except whitespace\nbetween them, return t; otherwise return nil.",
            "fnname": "Fforward_comment",
            "intspec": "0",
            "lname": "forward-comment",
            "maxargs": 1,
            "minargs": 1,
            "path": "syntax.c",
            "sname": "Sforward_comment"
        },
        {
            "args": [
                "n"
            ],
            "attributes": null,
            "doc": "Move N lines forward (backward if N is negative).\nPrecisely, if point is on line I, move to the start of line I + N\n\\(\"start of line\" in the logical order).\nIf there isn't room, go as far as possible (no error).\nInteractively, N is the numeric prefix argument and defaults to 1.\n\nReturns the count of lines left to move.  If moving forward,\nthat is N minus number of lines moved; if backward, N plus number\nmoved.\n\nException: With positive N, a non-empty line at the end of the\nbuffer, or of its accessible portion, counts as one line\nsuccessfully moved (for the return value).  This means that the\nfunction will move point to the end of such a line and will count\nit as a line moved across, even though there is no next line to\ngo to its beginning.",
            "fnname": "Fforward_line",
            "intspec": "^p",
            "lname": "forward-line",
            "maxargs": 1,
            "minargs": 0,
            "path": "cmds.c",
            "sname": "Sforward_line"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Move point forward ARG words (backward if ARG is negative).\nIf ARG is omitted or nil, move point forward one word.\nNormally returns t.\nIf an edge of the buffer or a field boundary is reached, point is\nleft there and the function returns nil.  Field boundaries are not\nnoticed if `inhibit-field-text-motion' is non-nil.\n\nThe word boundaries are normally determined by the buffer's syntax\ntable and character script (according to `char-script-table'), but\n`find-word-boundary-function-table', such as set up by `subword-mode',\ncan change that.  If a Lisp program needs to move by words determined\nstrictly by the syntax table, it should use `forward-word-strictly'\ninstead.  See Info node `(elisp) Word Motion' for details.",
            "fnname": "Fforward_word",
            "intspec": "^p",
            "lname": "forward-word",
            "maxargs": 1,
            "minargs": 0,
            "path": "syntax.c",
            "sname": "Sforward_word"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return a hash table of frame-local faces defined on FRAME.\nFor internal use only.",
            "fnname": "Fframe_face_hash_table",
            "intspec": "0",
            "lname": "frame--face-hash-table",
            "maxargs": 1,
            "minargs": 0,
            "path": "xfaces.c",
            "sname": "Sframe_face_hash_table"
        },
        {
            "args": [
                "frame",
                "was_invisible"
            ],
            "attributes": null,
            "doc": "Set FRAME's was-invisible flag if WAS-INVISIBLE is non-nil.\nThis function is for internal use only.",
            "fnname": "Fframe__set_was_invisible",
            "intspec": "0",
            "lname": "frame--set-was-invisible",
            "maxargs": 2,
            "minargs": 2,
            "path": "frame.c",
            "sname": "Sframe__set_was_invisible"
        },
        {
            "args": [
                "frame",
                "made"
            ],
            "attributes": null,
            "doc": "Mark FRAME as made.\nFRAME nil means use the selected frame.  Second argument MADE non-nil\nmeans functions on `window-configuration-change-hook' are called\nwhenever the window configuration of FRAME changes.  MADE nil means\nthese functions are not called.\n\nThis function is currently called by `make-frame' only and should be\notherwise used with utter care to avoid that running functions on\n`window-configuration-change-hook' is impeded forever.",
            "fnname": "Fframe_after_make_frame",
            "intspec": "0",
            "lname": "frame-after-make-frame",
            "maxargs": 2,
            "minargs": 2,
            "path": "frame.c",
            "sname": "Sframe_after_make_frame"
        },
        {
            "args": [
                "ancestor",
                "descendant"
            ],
            "attributes": null,
            "doc": "Return non-nil if ANCESTOR is an ancestor of DESCENDANT.\nANCESTOR is an ancestor of DESCENDANT when it is either DESCENDANT's\nparent frame or it is an ancestor of DESCENDANT's parent frame.  Both,\nANCESTOR and DESCENDANT must be live frames and default to the selected\nframe.",
            "fnname": "Fframe_ancestor_p",
            "intspec": "0",
            "lname": "frame-ancestor-p",
            "maxargs": 2,
            "minargs": 2,
            "path": "frame.c",
            "sname": "Sframe_ancestor_p"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return width (in pixels) of horizontal window dividers on FRAME.",
            "fnname": "Fbottom_divider_width",
            "intspec": "0",
            "lname": "frame-bottom-divider-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sbottom_divider_width"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Height in pixels of a line in the font in frame FRAME.\nIf FRAME is omitted or nil, the selected frame is used.\nFor a terminal frame, the value is always 1.",
            "fnname": "Fframe_char_height",
            "intspec": "0",
            "lname": "frame-char-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_char_height"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Width in pixels of characters in the font in frame FRAME.\nIf FRAME is omitted or nil, the selected frame is used.\nOn a graphical screen, the width is the standard width of the default font.\nFor a terminal screen, the value is always 1.",
            "fnname": "Fframe_char_width",
            "intspec": "0",
            "lname": "frame-char-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_char_width"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return width of FRAME's child-frame border in pixels.\n If FRAME's `child-frame-border-width' parameter is nil, return FRAME's\n internal border width instead.",
            "fnname": "Fframe_child_frame_border_width",
            "intspec": "0",
            "lname": "frame-child-frame-border-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_child_frame_border_width"
        },
        {
            "args": [
                "frame_or_window"
            ],
            "attributes": null,
            "doc": "Return the topmost, leftmost live window on FRAME-OR-WINDOW.\nIf omitted, FRAME-OR-WINDOW defaults to the currently selected frame.\nElse if FRAME-OR-WINDOW denotes a valid window, return the first window\nof that window's frame.  If FRAME-OR-WINDOW denotes a live frame, return\nthe first window of that frame.",
            "fnname": "Fframe_first_window",
            "intspec": "0",
            "lname": "frame-first-window",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sframe_first_window"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return the frame to which FRAME's keystrokes are currently being sent.\nIf FRAME is omitted or nil, the selected frame is used.\nReturn nil if FRAME's focus is not redirected.\nSee `redirect-frame-focus'.",
            "fnname": "Fframe_focus",
            "intspec": "0",
            "lname": "frame-focus",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_focus"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return FRAME's font cache.  Mainly used for debugging.\nIf FRAME is omitted or nil, use the selected frame.",
            "fnname": "Fframe_font_cache",
            "intspec": "0",
            "lname": "frame-font-cache",
            "maxargs": 1,
            "minargs": 0,
            "path": "font.c",
            "sname": "Sframe_font_cache"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return fringe width of FRAME in pixels.",
            "fnname": "Ffringe_width",
            "intspec": "0",
            "lname": "frame-fringe-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sfringe_width"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return width of FRAME's internal border in pixels.",
            "fnname": "Fframe_internal_border_width",
            "intspec": "0",
            "lname": "frame-internal-border-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_internal_border_width"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of all live frames.\nThe return value does not include any tooltip frame.",
            "fnname": "Fframe_list",
            "intspec": "0",
            "lname": "frame-list",
            "maxargs": 0,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_list"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return non-nil if OBJECT is a frame which has not been deleted.\nValue is nil if OBJECT is not a live frame.  If object is a live\nframe, the return value indicates what sort of terminal device it is\ndisplayed on.  See the documentation of `framep' for possible\nreturn values.",
            "fnname": "Fframe_live_p",
            "intspec": "0",
            "lname": "frame-live-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "frame.c",
            "sname": "Sframe_live_p"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return FRAME's native height in pixels.\nIf FRAME is omitted or nil, the selected frame is used.  The exact value\nof the result depends on the window-system and toolkit in use:\n\nIn the Gtk+ and NS versions, it includes only any window (including the\nminibuffer or echo area), mode line, and header line.  It does not\ninclude the tool bar or menu bar.  With other graphical versions, it may\nalso include the tool bar and the menu bar.\n\nIf you're interested only in the height of the text portion of the\nframe, see `frame-text-height' instead.\n\nFor a text terminal, it includes the menu bar.  In this case, the\nresult is really in characters rather than pixels (i.e., is identical\nto `frame-height').",
            "fnname": "Fframe_native_height",
            "intspec": "0",
            "lname": "frame-native-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_native_height"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return FRAME's native width in pixels.\nFor a terminal frame, the result really gives the width in characters.\nIf FRAME is omitted or nil, the selected frame is used.\n\nIf you're interested only in the width of the text portion of the\nframe, see `frame-text-width' instead.",
            "fnname": "Fframe_native_width",
            "intspec": "0",
            "lname": "frame-native-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_native_width"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return old selected window of FRAME.\nFRAME must be a live frame and defaults to the selected one.\n\nThe return value is the window selected on FRAME the last time window\nchange functions were run for FRAME.",
            "fnname": "Fframe_old_selected_window",
            "intspec": "0",
            "lname": "frame-old-selected-window",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sframe_old_selected_window"
        },
        {
            "args": [
                "variable"
            ],
            "attributes": null,
            "doc": "Return non-nil if the frame and buffer state appears to have changed.\nVARIABLE is a variable name whose value is either nil or a state vector\nthat will be updated to contain all frames and buffers,\naside from buffers whose names start with space,\nalong with the buffers' read-only and modified flags.  This allows a fast\ncheck to see whether buffer menus might need to be recomputed.\nIf this function returns non-nil, it updates the internal vector to reflect\nthe current state.\n\nIf VARIABLE is nil, an internal variable is used.  Users should not\npass nil for VARIABLE.",
            "fnname": "Fframe_or_buffer_changed_p",
            "intspec": "0",
            "lname": "frame-or-buffer-changed-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "dispnew.c",
            "sname": "Sframe_or_buffer_changed_p"
        },
        {
            "args": [
                "frame",
                "parameter"
            ],
            "attributes": null,
            "doc": "Return FRAME's value for parameter PARAMETER.\nIf FRAME is nil, describe the currently selected frame.",
            "fnname": "Fframe_parameter",
            "intspec": "0",
            "lname": "frame-parameter",
            "maxargs": 2,
            "minargs": 2,
            "path": "frame.c",
            "sname": "Sframe_parameter"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return the parameters-alist of frame FRAME.\nIt is a list of elements of the form (PARM . VALUE), where PARM is a symbol.\nThe meaningful PARMs depend on the kind of frame.\nIf FRAME is omitted or nil, return information on the currently selected frame.",
            "fnname": "Fframe_parameters",
            "intspec": "0",
            "lname": "frame-parameters",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_parameters"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return the parent frame of FRAME.\nThe parent frame of FRAME is the Emacs frame whose window-system window\nis the parent window of FRAME's window-system window.  When such a frame\nexists, FRAME is considered a child frame of that frame.\n\nReturn nil if FRAME has no parent frame.  This means that FRAME's\nwindow-system window is either a \"top-level\" window (a window whose\nparent window is the window-system's root window) or an embedded window\n\\(a window whose parent window is owned by some other application).",
            "fnname": "Fframe_parent",
            "intspec": "0",
            "lname": "frame-parent",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_parent"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return t if the mouse pointer displayed on FRAME is visible.\nOtherwise it returns nil.  FRAME omitted or nil means the\nselected frame.  This is useful when `make-pointer-invisible' is set.",
            "fnname": "Fframe_pointer_visible_p",
            "intspec": "0",
            "lname": "frame-pointer-visible-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_pointer_visible_p"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return top left corner of FRAME in pixels.\nFRAME must be a live frame and defaults to the selected one.  The return\nvalue is a cons (x, y) of the coordinates of the top left corner of\nFRAME's outer frame, in pixels relative to an origin (0, 0) of FRAME's\ndisplay.\n\nNote that the values returned are not guaranteed to be accurate: The\nvalues depend on the underlying window system, and some systems add a\nconstant offset to the values.",
            "fnname": "Fframe_position",
            "intspec": "0",
            "lname": "frame-position",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_position"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return width (in pixels) of vertical window dividers on FRAME.",
            "fnname": "Fright_divider_width",
            "intspec": "0",
            "lname": "frame-right-divider-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sright_divider_width"
        },
        {
            "args": [
                "frame_or_window"
            ],
            "attributes": null,
            "doc": "Return the root window of FRAME-OR-WINDOW.\nIf omitted, FRAME-OR-WINDOW defaults to the currently selected frame.\nWith a frame argument, return that frame's root window.\nWith a window argument, return the root window of that window's frame.",
            "fnname": "Fframe_root_window",
            "intspec": "0",
            "lname": "frame-root-window",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sframe_root_window"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return FRAMEs scale factor.\nIf FRAME is omitted or nil, the selected frame is used.\nThe scale factor is the amount by which a logical pixel size must be\nmultiplied to find the real number of pixels.",
            "fnname": "Fframe_scale_factor",
            "intspec": "0",
            "lname": "frame-scale-factor",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_scale_factor"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return scroll bar height of FRAME in pixels.",
            "fnname": "Fscroll_bar_height",
            "intspec": "0",
            "lname": "frame-scroll-bar-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sscroll_bar_height"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return scroll bar width of FRAME in pixels.",
            "fnname": "Fscroll_bar_width",
            "intspec": "0",
            "lname": "frame-scroll-bar-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sscroll_bar_width"
        },
        {
            "args": [
                "frame_or_window"
            ],
            "attributes": null,
            "doc": "Return the selected window of FRAME-OR-WINDOW.\nIf omitted, FRAME-OR-WINDOW defaults to the currently selected frame.\nElse if FRAME-OR-WINDOW denotes a valid window, return the selected\nwindow of that window's frame.  If FRAME-OR-WINDOW denotes a live frame,\nreturn the selected window of that frame.",
            "fnname": "Fframe_selected_window",
            "intspec": "0",
            "lname": "frame-selected-window",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sframe_selected_window"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return the terminal that FRAME is displayed on.\nIf FRAME is nil, use the selected frame.\n\nThe terminal device is represented by its integer identifier.",
            "fnname": "Fframe_terminal",
            "intspec": "0",
            "lname": "frame-terminal",
            "maxargs": 1,
            "minargs": 0,
            "path": "terminal.c",
            "sname": "Sframe_terminal"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return width in columns of FRAME's text area.",
            "fnname": "Fframe_text_cols",
            "intspec": "0",
            "lname": "frame-text-cols",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_text_cols"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return text area height of FRAME in pixels.",
            "fnname": "Fframe_text_height",
            "intspec": "0",
            "lname": "frame-text-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_text_height"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return height in lines of FRAME's text area.",
            "fnname": "Fframe_text_lines",
            "intspec": "0",
            "lname": "frame-text-lines",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_text_lines"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return text area width of FRAME in pixels.",
            "fnname": "Fframe_text_width",
            "intspec": "0",
            "lname": "frame-text-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_text_width"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return number of total columns of FRAME.",
            "fnname": "Fframe_total_cols",
            "intspec": "0",
            "lname": "frame-total-cols",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_total_cols"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return number of total lines of FRAME.",
            "fnname": "Fframe_total_lines",
            "intspec": "0",
            "lname": "frame-total-lines",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_total_lines"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return t if FRAME is \\\"visible\\\" (actually in use for display).\nReturn the symbol `icon' if FRAME is iconified or \\\"minimized\\\".\nReturn nil if FRAME was made invisible, via `make-frame-invisible'.\nOn graphical displays, invisible frames are not updated and are\nusually not displayed at all, even in a window system's \\\"taskbar\\\".\n\nIf FRAME is a text terminal frame, this always returns t.\nSuch frames are always considered visible, whether or not they are\ncurrently being displayed on the terminal.",
            "fnname": "Fframe_visible_p",
            "intspec": "0",
            "lname": "frame-visible-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "frame.c",
            "sname": "Sframe_visible_p"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return t if FRAME's window state change flag is set, nil otherwise.\nFRAME must be a live frame and defaults to the selected one.\n\nIf FRAME's window state change flag is set, the default values of\n`window-state-change-functions' and `window-state-change-hook' will be\nrun during next redisplay, regardless of whether a window state change\nactually occurred on FRAME or not.  After that, the value of this flag\nis reset.",
            "fnname": "Fframe_window_state_change",
            "intspec": "0",
            "lname": "frame-window-state-change",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sframe_window_state_change"
        },
        {
            "args": [
                "frame",
                "horizontal",
                "ignore",
                "pixelwise"
            ],
            "attributes": "const",
            "doc": "SKIP: real doc in window.el.",
            "fnname": "Fframe_windows_min_size",
            "intspec": "0",
            "lname": "frame-windows-min-size",
            "maxargs": 4,
            "minargs": 4,
            "path": "frame.c",
            "sname": "Sframe_windows_min_size"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return non-nil if OBJECT is a frame.\nValue is:\n  t for a termcap frame (a character-only terminal),\n `x' for an Emacs frame that is really an X window,\n `w32' for an Emacs frame that is a window on MS-Windows display,\n `ns' for an Emacs frame on a GNUstep or Macintosh Cocoa display,\n `pc' for a direct-write MS-DOS frame,\n `pgtk' for an Emacs frame running on pure GTK.\n `haiku' for an Emacs frame running in Haiku.\n `android' for an Emacs frame running in Android.\nSee also `frame-live-p'.",
            "fnname": "Fframep",
            "intspec": "0",
            "lname": "framep",
            "maxargs": 1,
            "minargs": 1,
            "path": "frame.c",
            "sname": "Sframep"
        },
        {
            "args": [
                "x"
            ],
            "attributes": null,
            "doc": "Get significand and exponent of a floating point number.\nBreaks the floating point number X into its binary significand SGNFCAND\n\\(a floating point value between 0.5 (included) and 1.0 (excluded))\nand an integral exponent EXP for 2, such that:\n\n  X = SGNFCAND * 2^EXP\n\nThe function returns the cons cell (SGNFCAND . EXP).\nIf X is zero, both parts (SGNFCAND and EXP) are zero.",
            "fnname": "Ffrexp",
            "intspec": "0",
            "lname": "frexp",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sfrexp"
        },
        {
            "args": [
                "pos",
                "window"
            ],
            "attributes": null,
            "doc": "Return fringe bitmaps of row containing position POS in window WINDOW.\nIf WINDOW is nil, use selected window.  If POS is nil, use value of point\nin that window.  Return value is a list (LEFT RIGHT OV), where LEFT\nis the symbol for the bitmap in the left fringe (or nil if no bitmap),\nRIGHT is similar for the right fringe, and OV is non-nil if there is an\noverlay arrow in the left fringe.\nReturn nil if POS is not visible in WINDOW.",
            "fnname": "Ffringe_bitmaps_at_pos",
            "intspec": "0",
            "lname": "fringe-bitmaps-at-pos",
            "maxargs": 2,
            "minargs": 0,
            "path": "fringe.c",
            "sname": "Sfringe_bitmaps_at_pos"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return the nearest integer to ARG, as a float.",
            "fnname": "Ffround",
            "intspec": "0",
            "lname": "fround",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sfround"
        },
        {
            "args": [
                "symbol",
                "definition"
            ],
            "attributes": null,
            "doc": "Set SYMBOL's function definition to DEFINITION, and return DEFINITION.\nIf the resulting chain of function definitions would contain a loop,\nsignal a `cyclic-function-indirection' error.",
            "fnname": "Ffset",
            "intspec": "0",
            "lname": "fset",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sfset"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Truncate a floating point number to an integral float value.\n\\(Round toward zero.)",
            "fnname": "Fftruncate",
            "intspec": "0",
            "lname": "ftruncate",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sftruncate"
        },
        {
            "args": [
                "function"
            ],
            "attributes": null,
            "doc": "Return minimum and maximum number of args allowed for FUNCTION.\nFUNCTION must be a function of some kind.\nThe returned value is a cons cell (MIN . MAX).  MIN is the minimum number\nof args.  MAX is the maximum number, or the symbol `many', for a\nfunction with `&rest' args, or `unevalled' for a special form.",
            "fnname": "Ffunc_arity",
            "intspec": "0",
            "lname": "func-arity",
            "maxargs": 1,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sfunc_arity"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Call first argument as a function, passing remaining arguments to it.\nReturn the value that function returns.\nThus, (funcall \\\\='cons \\\\='x \\\\='y) returns (x . y).\nusage: (funcall FUNCTION &rest ARGUMENTS)",
            "fnname": "Ffuncall",
            "intspec": "0",
            "lname": "funcall",
            "maxargs": -1,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sfuncall"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Like `funcall' but marks the call as interactive.\nI.e. arrange that within the called function `called-interactively-p' will\nreturn non-nil.\nusage: (funcall-interactively FUNCTION &rest ARGUMENTS)",
            "fnname": "Ffuncall_interactively",
            "intspec": "0",
            "lname": "funcall-interactively",
            "maxargs": -1,
            "minargs": 1,
            "path": "callint.c",
            "sname": "Sfuncall_interactively"
        },
        {
            "args": [
                "timeout",
                "message",
                "function"
            ],
            "attributes": null,
            "doc": "Like `funcall', but display MESSAGE if FUNCTION takes longer than TIMEOUT.\nTIMEOUT is a number of seconds, and can be an integer or a floating\npoint number.\n\nIf FUNCTION takes less time to execute than TIMEOUT seconds, MESSAGE\nis not displayed.",
            "fnname": "Ffuncall_with_delayed_message",
            "intspec": "0",
            "lname": "funcall-with-delayed-message",
            "maxargs": 3,
            "minargs": 3,
            "path": "eval.c",
            "sname": "Sfuncall_with_delayed_message"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Like `quote', but preferred for objects which are functions.\nIn byte compilation, `function' causes its argument to be handled by\nthe byte compiler.  Similarly, when expanding macros and expressions,\nARG can be examined and possibly expanded.  If `quote' is used\ninstead, this doesn't happen.\n\nusage: (function ARG)",
            "fnname": "Ffunction",
            "intspec": "0",
            "lname": "function",
            "maxargs": -2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sfunction"
        },
        {
            "args": [
                "f1",
                "f2"
            ],
            "attributes": null,
            "doc": "Return non-nil if F1 and F2 come from the same source.\nUsed to determine if different closures are just different instances of\nthe same lambda expression, or are really unrelated function.",
            "fnname": "Ffunction_equal",
            "intspec": "0",
            "lname": "function-equal",
            "maxargs": 2,
            "minargs": 2,
            "path": "profiler.c",
            "sname": "Sfunction_equal"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a function.\n\nAn object is a function if it is callable via `funcall'; this includes\nsymbols with function bindings, but excludes macros and special forms.\n\nOrdinarily return nil if OBJECT is not a function, although t might be\nreturned in rare cases.",
            "fnname": "Ffunctionp",
            "intspec": "0",
            "lname": "functionp",
            "maxargs": 1,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sfunctionp"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the position of the gap, in the current buffer.\nSee also `gap-size'.",
            "fnname": "Fgap_position",
            "intspec": "0",
            "lname": "gap-position",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sgap_position"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the size of the current buffer's gap.\nSee also `gap-position'.",
            "fnname": "Fgap_size",
            "intspec": "0",
            "lname": "gap-size",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sgap_size"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Reclaim storage for Lisp objects no longer needed.\nGarbage collection happens automatically if you cons more than\n`gc-cons-threshold' bytes of Lisp data since previous garbage collection.\n`garbage-collect' normally returns a list with info on amount of space in use,\nwhere each entry has the form (NAME SIZE USED FREE), where:\n- NAME is a symbol describing the kind of objects this entry represents,\n- SIZE is the number of bytes used by each one,\n- USED is the number of those objects that were found live in the heap,\n- FREE is the number of those objects that are not live but that Emacs\n  keeps around for future allocations (maybe because it does not know how\n  to return them to the OS).\n\nHowever, if there was overflow in pure space, and Emacs was dumped\nusing the \\\"unexec\\\" method, `garbage-collect' returns nil, because\nreal GC can't be done.\n\nNote that calling this function does not guarantee that absolutely all\nunreachable objects will be garbage-collected.  Emacs uses a\nmark-and-sweep garbage collector, but is conservative when it comes to\ncollecting objects in some circumstances.\n\nFor further details, see Info node `(elisp)Garbage Collection'.",
            "fnname": "Fgarbage_collect",
            "intspec": "",
            "lname": "garbage-collect",
            "maxargs": 0,
            "minargs": 0,
            "path": "alloc.c",
            "sname": "Sgarbage_collect"
        },
        {
            "args": [
                "factor"
            ],
            "attributes": null,
            "doc": "Call `garbage-collect' if enough allocation happened.\nFACTOR determines what \"enough\" means here:\nIf FACTOR is a positive number N, it means to run GC if more than\n1/Nth of the allocations needed to trigger automatic allocation took\nplace.\nTherefore, as N gets higher, this is more likely to perform a GC.\nReturns non-nil if GC happened, and nil otherwise.",
            "fnname": "Fgarbage_collect_maybe",
            "intspec": "0",
            "lname": "garbage-collect-maybe",
            "maxargs": 1,
            "minargs": 1,
            "path": "alloc.c",
            "sname": "Sgarbage_collect_maybe"
        },
        {
            "args": [
                "name",
                "ignore"
            ],
            "attributes": null,
            "doc": "Return a string that is the name of no existing buffer based on NAME.\nIf there is no live buffer named NAME, then return NAME.\nOtherwise modify name by appending `<NUMBER>', incrementing NUMBER\n\\(starting at 2) until an unused name is found, and then return that name.\nOptional second argument IGNORE specifies a name that is okay to use (if\nit is in the sequence to be tried) even if a buffer with that name exists.\n\nIf NAME begins with a space (i.e., a buffer that is not normally\nvisible to users), then if buffer NAME already exists a random number\nis first appended to NAME, to speed up finding a non-existent buffer.",
            "fnname": "Fgenerate_new_buffer_name",
            "intspec": "0",
            "lname": "generate-new-buffer-name",
            "maxargs": 2,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sgenerate_new_buffer_name"
        },
        {
            "args": [
                "symbol",
                "propname"
            ],
            "attributes": null,
            "doc": "Return the value of SYMBOL's PROPNAME property.\nThis is the last value stored with `(put SYMBOL PROPNAME VALUE)'.",
            "fnname": "Fget",
            "intspec": "0",
            "lname": "get",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sget"
        },
        {
            "args": [
                "buffer_or_name"
            ],
            "attributes": null,
            "doc": "Return the buffer named BUFFER-OR-NAME.\nBUFFER-OR-NAME must be either a string or a buffer.  If BUFFER-OR-NAME\nis a string and there is no buffer with that name, return nil.  If\nBUFFER-OR-NAME is a buffer, return it as given.",
            "fnname": "Fget_buffer",
            "intspec": "0",
            "lname": "get-buffer",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sget_buffer"
        },
        {
            "args": [
                "buffer_or_name",
                "inhibit_buffer_hooks"
            ],
            "attributes": null,
            "doc": "Return the buffer specified by BUFFER-OR-NAME, creating a new one if needed.\nIf BUFFER-OR-NAME is a string and a live buffer with that name exists,\nreturn that buffer.  If no such buffer exists, create a new buffer with\nthat name and return it.\n\nIf BUFFER-OR-NAME starts with a space, the new buffer does not keep undo\ninformation.  If optional argument INHIBIT-BUFFER-HOOKS is non-nil, the\nnew buffer does not run the hooks `kill-buffer-hook',\n`kill-buffer-query-functions', and `buffer-list-update-hook'.  This\navoids slowing down internal or temporary buffers that are never\npresented to users or passed on to other applications.\n\nIf BUFFER-OR-NAME is a buffer instead of a string, return it as given,\neven if it is dead.  The return value is never nil.",
            "fnname": "Fget_buffer_create",
            "intspec": "0",
            "lname": "get-buffer-create",
            "maxargs": 2,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sget_buffer_create"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return the (or a) live process associated with BUFFER.\nBUFFER may be a buffer or the name of one.\nReturn nil if all processes associated with BUFFER have been\ndeleted or killed.",
            "fnname": "Fget_buffer_process",
            "intspec": "0",
            "lname": "get-buffer-process",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sget_buffer_process"
        },
        {
            "args": [
                "buffer_or_name",
                "all_frames"
            ],
            "attributes": null,
            "doc": "Return a window currently displaying BUFFER-OR-NAME, or nil if none.\nBUFFER-OR-NAME may be a buffer or a buffer name and defaults to\nthe current buffer.\n\nThe optional argument ALL-FRAMES specifies the frames to consider:\n\n- t means consider all windows on all existing frames.\n\n- `visible' means consider all windows on all visible frames.\n\n- 0 (the number zero) means consider all windows on all visible\n    and iconified frames.\n\n- A frame means consider all windows on that frame only.\n\nAny other value of ALL-FRAMES means consider all windows on the\nselected frame and no others.",
            "fnname": "Fget_buffer_window",
            "intspec": "0",
            "lname": "get-buffer-window",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sget_buffer_window"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return a list of xwidgets associated with BUFFER.\nBUFFER may be a buffer or the name of one.",
            "fnname": "Fget_buffer_xwidgets",
            "intspec": "0",
            "lname": "get-buffer-xwidgets",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sget_buffer_xwidgets"
        },
        {
            "args": [
                "position",
                "string"
            ],
            "attributes": null,
            "doc": "Return a byte value of a character at point.\nOptional 1st arg POSITION, if non-nil, is a position of a character to get\na byte value.\nOptional 2nd arg STRING, if non-nil, is a string of which first\ncharacter is a target to get a byte value.  In this case, POSITION, if\nnon-nil, is an index of a target character in the string.\n\nIf the current buffer (or STRING) is multibyte, and the target\ncharacter is not ASCII nor 8-bit character, an error is signaled.",
            "fnname": "Fget_byte",
            "intspec": "0",
            "lname": "get-byte",
            "maxargs": 2,
            "minargs": 0,
            "path": "character.c",
            "sname": "Sget_byte"
        },
        {
            "args": [
                "position",
                "prop",
                "object"
            ],
            "attributes": null,
            "doc": "Return the value of POSITION's property PROP, in OBJECT.\nBoth overlay properties and text properties are checked.\nOBJECT is optional and defaults to the current buffer.\nIf POSITION is at the end of OBJECT, the value is nil.\nIf OBJECT is a buffer, then overlay properties are considered as well as\ntext properties.\nIf OBJECT is a window, then that window's buffer is used, but window-specific\noverlays are considered only if they are associated with OBJECT.",
            "fnname": "Fget_char_property",
            "intspec": "0",
            "lname": "get-char-property",
            "maxargs": 3,
            "minargs": 2,
            "path": "textprop.c",
            "sname": "Sget_char_property"
        },
        {
            "args": [
                "position",
                "prop",
                "object"
            ],
            "attributes": null,
            "doc": "Like `get-char-property', but with extra overlay information.\nThe value is a cons cell.  Its car is the return value of `get-char-property'\nwith the same arguments--that is, the value of POSITION's property\nPROP in OBJECT.  Its cdr is the overlay in which the property was\nfound, or nil, if it was found as a text property or not found at all.\n\nOBJECT is optional and defaults to the current buffer.  OBJECT may be\na string, a buffer or a window.  For strings, the cdr of the return\nvalue is always nil, since strings do not have overlays.  If OBJECT is\na window, then that window's buffer is used, but window-specific\noverlays are considered only if they are associated with OBJECT.  If\nPOSITION is at the end of OBJECT, both car and cdr are nil.",
            "fnname": "Fget_char_property_and_overlay",
            "intspec": "0",
            "lname": "get-char-property-and-overlay",
            "maxargs": 3,
            "minargs": 2,
            "path": "textprop.c",
            "sname": "Sget_char_property_and_overlay"
        },
        {
            "args": [
                "position",
                "prop",
                "object",
                "properties"
            ],
            "attributes": null,
            "doc": "Get the value of the `display' property PROP at POSITION.\nIf OBJECT, this should be a buffer or string where the property is\nfetched from.  If omitted, OBJECT defaults to the current buffer.\n\nIf PROPERTIES, look for value of PROP in PROPERTIES instead of the\nproperties at POSITION.",
            "fnname": "Fget_display_property",
            "intspec": "0",
            "lname": "get-display-property",
            "maxargs": 4,
            "minargs": 2,
            "path": "xdisp.c",
            "sname": "Sget_display_property"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return the buffer visiting file FILENAME (a string).\nThe buffer's `buffer-file-name' must match exactly the expansion of FILENAME.\nIf there is no such live buffer, return nil.\nSee also `find-buffer-visiting'.",
            "fnname": "Fget_file_buffer",
            "intspec": "0",
            "lname": "get-file-buffer",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sget_file_buffer"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Don't use this yourself.",
            "fnname": "Fget_file_char",
            "intspec": "0",
            "lname": "get-file-char",
            "maxargs": 0,
            "minargs": 0,
            "path": "lread.c",
            "sname": "Sget_file_char"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current run time used by Emacs.\nThe time is returned as in the style of `current-time'.\n\nOn systems that can't determine the run time, `get-internal-run-time'\ndoes the same thing as `current-time'.",
            "fnname": "Fget_internal_run_time",
            "intspec": "0",
            "lname": "get-internal-run-time",
            "maxargs": 0,
            "minargs": 0,
            "path": "sysdep.c",
            "sname": "Sget_internal_run_time"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the suffixes that `load' should try if a suffix is \\\nrequired.\nThis uses the variables `load-suffixes' and `load-file-rep-suffixes'.",
            "fnname": "Fget_load_suffixes",
            "intspec": "0",
            "lname": "get-load-suffixes",
            "maxargs": 0,
            "minargs": 0,
            "path": "lread.c",
            "sname": "Sget_load_suffixes"
        },
        {
            "args": [
                "position",
                "prop",
                "object"
            ],
            "attributes": null,
            "doc": "Return the value of POSITION's property PROP, in OBJECT.\nAlmost identical to `get-char-property' except for the following difference:\nWhereas `get-char-property' returns the property of the char at (i.e. right\nafter) POSITION, this pays attention to properties's stickiness and overlays's\nadvancement settings, in order to find the property of POSITION itself,\ni.e. the property that a char would inherit if it were inserted\nat POSITION.",
            "fnname": "Fget_pos_property",
            "intspec": "0",
            "lname": "get-pos-property",
            "maxargs": 3,
            "minargs": 2,
            "path": "editfns.c",
            "sname": "Sget_pos_property"
        },
        {
            "args": [
                "name"
            ],
            "attributes": null,
            "doc": "Return the process named NAME, or nil if there is none.",
            "fnname": "Fget_process",
            "intspec": "0",
            "lname": "get-process",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sget_process"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Get color indices of the current screen foreground and background.\n\nThe colors are returned as a list of 2 indices (FOREGROUND BACKGROUND).\nSee w32console.el and `tty-defined-color-alist' for mapping of indices\nto colors.",
            "fnname": "Fget_screen_color",
            "intspec": "0",
            "lname": "get-screen-color",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32console.c",
            "sname": "Sget_screen_color"
        },
        {
            "args": [
                "position",
                "prop",
                "object"
            ],
            "attributes": null,
            "doc": "Return the value of POSITION's property PROP, in OBJECT.\nOBJECT should be a buffer or a string; if omitted or nil, it defaults\nto the current buffer.\n\nIf POSITION is at the end of OBJECT, the value is nil, but note that\nbuffer narrowing does not affect the value.  That is, if the buffer is\nnarrowed and POSITION is at the end of the narrowed buffer, the result\nmay be non-nil.",
            "fnname": "Fget_text_property",
            "intspec": "0",
            "lname": "get-text-property",
            "maxargs": 3,
            "minargs": 2,
            "path": "textprop.c",
            "sname": "Sget_text_property"
        },
        {
            "args": [
                "char_table",
                "ch"
            ],
            "attributes": null,
            "doc": "Return an element of CHAR-TABLE for character CH.\nCHAR-TABLE must be what returned by `unicode-property-table-internal'.",
            "fnname": "Fget_unicode_property_internal",
            "intspec": "0",
            "lname": "get-unicode-property-internal",
            "maxargs": 2,
            "minargs": 2,
            "path": "chartab.c",
            "sname": "Sget_unicode_property_internal"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Return a category which is not yet defined in TABLE.\nIf no category remains available, return nil.\nThe optional argument TABLE specifies which category table to modify;\nit defaults to the current buffer's category table.",
            "fnname": "Fget_unused_category",
            "intspec": "0",
            "lname": "get-unused-category",
            "maxargs": 1,
            "minargs": 0,
            "path": "category.c",
            "sname": "Sget_unused_category"
        },
        {
            "args": [
                "dimension",
                "chars"
            ],
            "attributes": null,
            "doc": "Return an unused ISO final char for a charset of DIMENSION and CHARS.\nDIMENSION is the number of bytes to represent a character: 1 or 2.\nCHARS is the number of characters in a dimension: 94 or 96.\n\nThis final char is for private use, thus the range is `0' (48) .. `?' (63).\nIf there's no unused final char for the specified kind of charset,\nreturn nil.",
            "fnname": "Fget_unused_iso_final_char",
            "intspec": "0",
            "lname": "get-unused-iso-final-char",
            "maxargs": 2,
            "minargs": 2,
            "path": "charset.c",
            "sname": "Sget_unused_iso_final_char"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Return a list of SYMBOL's active watchers.",
            "fnname": "Fget_variable_watchers",
            "intspec": "0",
            "lname": "get-variable-watchers",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sget_variable_watchers"
        },
        {
            "args": [
                "variable",
                "env"
            ],
            "attributes": null,
            "doc": "Get the value of environment variable VARIABLE.\nVARIABLE should be a string.  Value is nil if VARIABLE is undefined in\nthe environment.  Otherwise, value is a string.\n\nThis function searches `process-environment' for VARIABLE.\n\nIf optional parameter ENV is a list, then search this list instead of\n`process-environment', and return t when encountering a negative entry\n\\(an entry for a variable with no value).",
            "fnname": "Fgetenv_internal",
            "intspec": "0",
            "lname": "getenv-internal",
            "maxargs": 2,
            "minargs": 1,
            "path": "callproc.c",
            "sname": "Sgetenv_internal"
        },
        {
            "args": [
                "key",
                "table",
                "dflt"
            ],
            "attributes": null,
            "doc": "Look up KEY in TABLE and return its associated value.\nIf KEY is not found, return DFLT which defaults to nil.",
            "fnname": "Fgethash",
            "intspec": "0",
            "lname": "gethash",
            "maxargs": 3,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sgethash"
        },
        {
            "args": [
                "file",
                "flags",
                "callback"
            ],
            "attributes": null,
            "doc": "Add a watch for filesystem events pertaining to FILE.\n\nThis arranges for filesystem events pertaining to FILE to be reported\nto Emacs.  Use `gfile-rm-watch' to cancel the watch.\n\nValue is a descriptor for the added watch.  If the file cannot be\nwatched for some reason, this function signals a `file-notify-error' error.\n\nFLAGS is a list of conditions to set what will be watched for.  It can\ninclude the following symbols:\n\n  `change'           -- watch for file changes\n  `attribute-change' -- watch for file attributes changes, like\n                        permissions or modification time\n  `watch-mounts'     -- watch for mount events\n  `send-moved'       -- pair `deleted' and `created' events caused by\n                        file renames and send a single `renamed' event\n                        instead\n\nWhen any event happens, Emacs will call the CALLBACK function passing\nit a single argument EVENT, which is of the form\n\n  (DESCRIPTOR ACTION FILE [FILE1])\n\nDESCRIPTOR is the same object as the one returned by this function.\nACTION is the description of the event.  It could be any one of the\nfollowing:\n\n  `changed'           -- FILE has changed\n  `changes-done-hint' -- a hint that this was probably the last change\n                         in a set of changes\n  `deleted'           -- FILE was deleted\n  `created'           -- FILE was created\n  `attribute-changed' -- a FILE attribute was changed\n  `pre-unmount'       -- the FILE location will soon be unmounted\n  `unmounted'         -- the FILE location was unmounted\n  `moved'             -- FILE was moved to FILE1\n\nFILE is the name of the file whose event is being reported.  FILE1\nwill be reported only in case of the `moved' event.",
            "fnname": "Fgfile_add_watch",
            "intspec": "0",
            "lname": "gfile-add-watch",
            "maxargs": 3,
            "minargs": 3,
            "path": "gfilenotify.c",
            "sname": "Sgfile_add_watch"
        },
        {
            "args": [
                "watch_descriptor"
            ],
            "attributes": null,
            "doc": "Return the internal monitor name for WATCH-DESCRIPTOR.\n\nThe result is a symbol, either `GInotifyFileMonitor',\n`GKqueueFileMonitor', `GFamFileMonitor', or `GPollFileMonitor'.\n\nWATCH-DESCRIPTOR should be an object returned by `gfile-add-watch'.\nIf WATCH-DESCRIPTOR is not valid, nil is returned.",
            "fnname": "Fgfile_monitor_name",
            "intspec": "0",
            "lname": "gfile-monitor-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "gfilenotify.c",
            "sname": "Sgfile_monitor_name"
        },
        {
            "args": [
                "watch_descriptor"
            ],
            "attributes": null,
            "doc": "Remove an existing WATCH-DESCRIPTOR.\n\nWATCH-DESCRIPTOR should be an object returned by `gfile-add-watch'.",
            "fnname": "Fgfile_rm_watch",
            "intspec": "0",
            "lname": "gfile-rm-watch",
            "maxargs": 1,
            "minargs": 1,
            "path": "gfilenotify.c",
            "sname": "Sgfile_rm_watch"
        },
        {
            "args": [
                "watch_descriptor"
            ],
            "attributes": null,
            "doc": "Check a watch specified by its WATCH-DESCRIPTOR.\n\nWATCH-DESCRIPTOR should be an object returned by `gfile-add-watch'.\n\nA watch can become invalid if the file or directory it watches is\ndeleted, or if the watcher thread exits abnormally for any other\nreason.  Removing the watch by calling `gfile-rm-watch' also makes it\ninvalid.",
            "fnname": "Fgfile_valid_p",
            "intspec": "0",
            "lname": "gfile-valid-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "gfilenotify.c",
            "sname": "Sgfile_valid_p"
        },
        {
            "args": [
                "proc",
                "params"
            ],
            "attributes": null,
            "doc": "Mark this process as being a pre-init GnuTLS process.\nThe second parameter is the list of parameters to feed to gnutls-boot\nto finish setting up the connection.",
            "fnname": "Fgnutls_asynchronous_parameters",
            "intspec": "0",
            "lname": "gnutls-asynchronous-parameters",
            "maxargs": 2,
            "minargs": 2,
            "path": "gnutls.c",
            "sname": "Sgnutls_asynchronous_parameters"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return list of capabilities if GnuTLS is available in this instance of Emacs.\n\n...if supported         : then...\nGnuTLS 3 or higher      : the list will contain `gnutls3'.\nGnuTLS MACs             : the list will contain `macs'.\nGnuTLS digests          : the list will contain `digests'.\nGnuTLS symmetric ciphers: the list will contain `ciphers'.\nGnuTLS AEAD ciphers     : the list will contain `AEAD-ciphers'.\n%DUMBFW                 : the list will contain `ClientHello\\\\ Padding'.\nAny GnuTLS extension with ID up to 100\n                        : the list will contain its name.",
            "fnname": "Fgnutls_available_p",
            "intspec": "0",
            "lname": "gnutls-available-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "gnutls.c",
            "sname": "Sgnutls_available_p"
        },
        {
            "args": [
                "proc",
                "type",
                "proplist"
            ],
            "attributes": null,
            "doc": "Initialize GnuTLS client for process PROC with TYPE+PROPLIST.\nCurrently only client mode is supported.  Return a success/failure\nvalue you can check with `gnutls-errorp'.\n\nTYPE is a symbol, either `gnutls-anon' or `gnutls-x509pki'.\nPROPLIST is a property list with the following keys:\n\n:hostname is a string naming the remote host.\n\n:priority is a GnuTLS priority string, defaults to \"NORMAL\".\n\n:trustfiles is a list of PEM-encoded trust files for `gnutls-x509pki'.\n\n:crlfiles is a list of PEM-encoded CRL lists for `gnutls-x509pki'.\n\n:keylist is an alist of PEM-encoded key files and PEM-encoded\ncertificates for `gnutls-x509pki'.\n\n:callbacks is an alist of callback functions, see below.\n\n:loglevel is the debug level requested from GnuTLS, try 4.\n\n:verify-flags is a bitset as per GnuTLS'\ngnutls_certificate_set_verify_flags.\n\n:verify-hostname-error is ignored.  Pass :hostname in :verify-error\ninstead.\n\n:verify-error is a list of symbols to express verification checks or\nt to do all checks.  Currently it can contain `:trustfiles' and\n`:hostname' to verify the certificate or the hostname respectively.\n\n:min-prime-bits is the minimum accepted number of bits the client will\naccept in Diffie-Hellman key exchange.\n\n:complete-negotiation, if non-nil, will make negotiation complete\nbefore returning even on non-blocking sockets.\n\n:pass, the password of the private key as per GnuTLS'\ngnutls_certificate_set_x509_key_file2.  Specify as nil to have a NULL\npassword.\n\n:flags, a list of symbols relating to :pass, each specifying a flag:\nGNUTLS_PKCS_PLAIN, GNUTLS_PKCS_PKCS12_3DES,\nGNUTLS_PKCS_PKCS12_ARCFOUR, GNUTLS_PKCS_PKCS12_RC2_40,\nGNUTLS_PKCS_PBES2_3DES, GNUTLS_PKCS_PBES2_AES_128,\nGNUTLS_PKCS_PBES2_AES_192, GNUTLS_PKCS_PBES2_AES_256,\nGNUTLS_PKCS_NULL_PASSWORD, GNUTLS_PKCS_PBES2_DES,\nGNUTLS_PKCS_PBES2_DES_MD5, GNUTLS_PKCS_PBES2_GOST_TC26Z,\nGNUTLS_PKCS_PBES2_GOST_CPA, GNUTLS_PKCS_PBES2_GOST_CPB,\nGNUTLS_PKCS_PBES2_GOST_CPC, GNUTLS_PKCS_PBES2_GOST_CPD.  If not\nspecified, or if nil, the bitflag with value 0 is used.\nNote that some of these are only supported since GnuTLS 3.6.3.\n\nThe debug level will be set for this process AND globally for GnuTLS.\nSo if you set it higher or lower at any point, it affects global\ndebugging.\n\nNote that the priority is set on the client.  The server does not use\nthe protocols's priority except for disabling protocols that were not\nspecified.\n\nProcesses must be initialized with this function before other GnuTLS\nfunctions are used.  This function allocates resources which can only\nbe deallocated by calling `gnutls-deinit' or by calling it again.\n\nThe :pass and :flags keys are ignored with old versions of GnuTLS, and\n:flags is ignored if :pass is not specified.\n\nThe callbacks alist can have a `verify' key, associated with a\nverification function (UNUSED).\n\nEach authentication type may need additional information in order to\nwork.  For X.509 PKI (`gnutls-x509pki'), you probably need at least\none trustfile (usually a CA bundle).",
            "fnname": "Fgnutls_boot",
            "intspec": "0",
            "lname": "gnutls-boot",
            "maxargs": 3,
            "minargs": 3,
            "path": "gnutls.c",
            "sname": "Sgnutls_boot"
        },
        {
            "args": [
                "proc",
                "cont"
            ],
            "attributes": null,
            "doc": "Terminate current GnuTLS connection for process PROC.\nThe connection should have been initiated using `gnutls-handshake'.\n\nIf CONT is not nil the TLS connection gets terminated and further\nreceives and sends will be disallowed.  If the return value is zero you\nmay continue using the connection.  If CONT is nil, GnuTLS actually\nsends an alert containing a close request and waits for the peer to\nreply with the same message.  In order to reuse the connection you\nshould wait for an EOF from the peer.\n\nThis function may also return `gnutls-e-again', or\n`gnutls-e-interrupted'.",
            "fnname": "Fgnutls_bye",
            "intspec": "0",
            "lname": "gnutls-bye",
            "maxargs": 2,
            "minargs": 2,
            "path": "gnutls.c",
            "sname": "Sgnutls_bye"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return alist of GnuTLS symmetric cipher descriptions as plists.\nThe alist key is the cipher name.",
            "fnname": "Fgnutls_ciphers",
            "intspec": "0",
            "lname": "gnutls-ciphers",
            "maxargs": 0,
            "minargs": 0,
            "path": "gnutls.c",
            "sname": "Sgnutls_ciphers"
        },
        {
            "args": [
                "proc"
            ],
            "attributes": null,
            "doc": "Deallocate GnuTLS resources associated with process PROC.\nSee also `gnutls-boot'.",
            "fnname": "Fgnutls_deinit",
            "intspec": "0",
            "lname": "gnutls-deinit",
            "maxargs": 1,
            "minargs": 1,
            "path": "gnutls.c",
            "sname": "Sgnutls_deinit"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return alist of GnuTLS digest-algorithm method descriptions as plists.\n\nUse the value of the alist (extract it with `alist-get' for instance)\nwith `gnutls-hash-digest'.  The alist key is the digest-algorithm\nmethod name.",
            "fnname": "Fgnutls_digests",
            "intspec": "0",
            "lname": "gnutls-digests",
            "maxargs": 0,
            "minargs": 0,
            "path": "gnutls.c",
            "sname": "Sgnutls_digests"
        },
        {
            "args": [
                "err"
            ],
            "attributes": null,
            "doc": "Return non-nil if ERROR is fatal.\nERROR is an integer or a symbol with an integer `gnutls-code' property.\nUsage: (gnutls-error-fatalp ERROR)",
            "fnname": "Fgnutls_error_fatalp",
            "intspec": "0",
            "lname": "gnutls-error-fatalp",
            "maxargs": 1,
            "minargs": 1,
            "path": "gnutls.c",
            "sname": "Sgnutls_error_fatalp"
        },
        {
            "args": [
                "err"
            ],
            "attributes": null,
            "doc": "Return a description of ERROR.\nERROR is an integer or a symbol with an integer `gnutls-code' property.\nusage: (gnutls-error-string ERROR)",
            "fnname": "Fgnutls_error_string",
            "intspec": "0",
            "lname": "gnutls-error-string",
            "maxargs": 1,
            "minargs": 1,
            "path": "gnutls.c",
            "sname": "Sgnutls_error_string"
        },
        {
            "args": [
                "err"
            ],
            "attributes": "const",
            "doc": "Return t if ERROR indicates a GnuTLS problem.\nERROR is an integer or a symbol with an integer `gnutls-code' property.\nusage: (gnutls-errorp ERROR)",
            "fnname": "Fgnutls_errorp",
            "intspec": "0",
            "lname": "gnutls-errorp",
            "maxargs": 1,
            "minargs": 1,
            "path": "gnutls.c",
            "sname": "Sgnutls_errorp"
        },
        {
            "args": [
                "cert"
            ],
            "attributes": null,
            "doc": "Format a X.509 certificate to a string.\n\nGiven a PEM-encoded X.509 certificate CERT, returns a human-readable\nstring representation.",
            "fnname": "Fgnutls_format_certificate",
            "intspec": "0",
            "lname": "gnutls-format-certificate",
            "maxargs": 1,
            "minargs": 1,
            "path": "gnutls.c",
            "sname": "Sgnutls_format_certificate"
        },
        {
            "args": [
                "proc"
            ],
            "attributes": null,
            "doc": "Return the GnuTLS init stage of process PROC.\nSee also `gnutls-boot'.",
            "fnname": "Fgnutls_get_initstage",
            "intspec": "0",
            "lname": "gnutls-get-initstage",
            "maxargs": 1,
            "minargs": 1,
            "path": "gnutls.c",
            "sname": "Sgnutls_get_initstage"
        },
        {
            "args": [
                "digest_method",
                "input"
            ],
            "attributes": null,
            "doc": "Digest INPUT with DIGEST-METHOD into a unibyte string.\n\nReturn nil on error.\n\nThe INPUT can be specified as a buffer or string or in other\nways (see Info node `(elisp)Format of GnuTLS Cryptography Inputs').\n\nThe alist of digest algorithms can be obtained with `gnutls-digests'.\nThe DIGEST-METHOD may be a string or symbol matching a key in that\nalist, or a plist with the `:digest-algorithm-id' numeric property, or\nthe number itself.",
            "fnname": "Fgnutls_hash_digest",
            "intspec": "0",
            "lname": "gnutls-hash-digest",
            "maxargs": 2,
            "minargs": 2,
            "path": "gnutls.c",
            "sname": "Sgnutls_hash_digest"
        },
        {
            "args": [
                "hash_method",
                "key",
                "input"
            ],
            "attributes": null,
            "doc": "Hash INPUT with HASH-METHOD and KEY into a unibyte string.\n\nReturn nil on error.\n\nThe KEY can be specified as a buffer or string or in other ways (see\nInfo node `(elisp)Format of GnuTLS Cryptography Inputs').  The KEY\nwill be wiped after use if it's a string.\n\nThe INPUT can also be specified as a buffer or string or in other\nways.\n\nThe alist of MAC algorithms can be obtained with `gnutls-macs'.  The\nHASH-METHOD may be a string or symbol matching a key in that alist, or\na plist with the `:mac-algorithm-id' numeric property, or the number\nitself.",
            "fnname": "Fgnutls_hash_mac",
            "intspec": "0",
            "lname": "gnutls-hash-mac",
            "maxargs": 3,
            "minargs": 3,
            "path": "gnutls.c",
            "sname": "Sgnutls_hash_mac"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return alist of GnuTLS mac-algorithm method descriptions as plists.\n\nUse the value of the alist (extract it with `alist-get' for instance)\nwith `gnutls-hash-mac'.  The alist key is the mac-algorithm method\nname.",
            "fnname": "Fgnutls_macs",
            "intspec": "0",
            "lname": "gnutls-macs",
            "maxargs": 0,
            "minargs": 0,
            "path": "gnutls.c",
            "sname": "Sgnutls_macs"
        },
        {
            "args": [
                "proc"
            ],
            "attributes": null,
            "doc": "Describe a GnuTLS PROC peer certificate and any warnings about it.\n\nThe return value is a property list with top-level keys :warnings and\n:certificates.\n\nThe :warnings entry is a list of symbols you can get a description of\nwith `gnutls-peer-status-warning-describe', and :certificates is the\ncertificate chain for the connection, with the host certificate\nfirst, and intermediary certificates (if any) following it.\n\nIn addition, for backwards compatibility, the host certificate is also\nreturned as the :certificate entry.",
            "fnname": "Fgnutls_peer_status",
            "intspec": "0",
            "lname": "gnutls-peer-status",
            "maxargs": 1,
            "minargs": 1,
            "path": "gnutls.c",
            "sname": "Sgnutls_peer_status"
        },
        {
            "args": [
                "status_symbol"
            ],
            "attributes": null,
            "doc": "Describe the warning of a GnuTLS peer status from `gnutls-peer-status'.",
            "fnname": "Fgnutls_peer_status_warning_describe",
            "intspec": "0",
            "lname": "gnutls-peer-status-warning-describe",
            "maxargs": 1,
            "minargs": 1,
            "path": "gnutls.c",
            "sname": "Sgnutls_peer_status_warning_describe"
        },
        {
            "args": [
                "cipher",
                "key",
                "iv",
                "input",
                "aead_auth"
            ],
            "attributes": null,
            "doc": "Decrypt INPUT with symmetric CIPHER, KEY+AEAD_AUTH, and IV to a unibyte string.\n\nReturn nil on error.\n\nThe KEY can be specified as a buffer or string or in other ways (see\nInfo node `(elisp)Format of GnuTLS Cryptography Inputs').  The KEY\nwill be wiped after use if it's a string.\n\nThe IV and INPUT and the optional AEAD_AUTH can also be specified as a\nbuffer or string or in other ways.\n\nThe alist of symmetric ciphers can be obtained with `gnutls-ciphers'.\nThe CIPHER may be a string or symbol matching a key in that alist, or\na plist with the `:cipher-id' numeric property, or the number itself.\n\nAEAD ciphers: these ciphers will have a `gnutls-ciphers' entry with\n:cipher-aead-capable set to t.  AEAD_AUTH can be supplied for\nthese AEAD ciphers, but it may still be omitted (nil) as well.",
            "fnname": "Fgnutls_symmetric_decrypt",
            "intspec": "0",
            "lname": "gnutls-symmetric-decrypt",
            "maxargs": 5,
            "minargs": 4,
            "path": "gnutls.c",
            "sname": "Sgnutls_symmetric_decrypt"
        },
        {
            "args": [
                "cipher",
                "key",
                "iv",
                "input",
                "aead_auth"
            ],
            "attributes": null,
            "doc": "Encrypt INPUT with symmetric CIPHER, KEY+AEAD_AUTH, and IV to a unibyte string.\n\nReturn nil on error.\n\nThe KEY can be specified as a buffer or string or in other ways (see\nInfo node `(elisp)Format of GnuTLS Cryptography Inputs').  The KEY\nwill be wiped after use if it's a string.\n\nThe IV and INPUT and the optional AEAD_AUTH can also be specified as a\nbuffer or string or in other ways.\n\nThe alist of symmetric ciphers can be obtained with `gnutls-ciphers'.\nThe CIPHER may be a string or symbol matching a key in that alist, or\na plist with the :cipher-id numeric property, or the number itself.\n\nAEAD ciphers: these ciphers will have a `gnutls-ciphers' entry with\n:cipher-aead-capable set to t.  AEAD_AUTH can be supplied for\nthese AEAD ciphers, but it may still be omitted (nil) as well.",
            "fnname": "Fgnutls_symmetric_encrypt",
            "intspec": "0",
            "lname": "gnutls-symmetric-encrypt",
            "maxargs": 5,
            "minargs": 4,
            "path": "gnutls.c",
            "sname": "Sgnutls_symmetric_encrypt"
        },
        {
            "args": [
                "position"
            ],
            "attributes": null,
            "doc": "Set point to POSITION, a number or marker.\nBeginning of buffer is position (point-min), end is (point-max).\n\nThe return value is POSITION.\n\nIf called interactively, a numeric prefix argument specifies\nPOSITION; without a numeric prefix argument, read POSITION from the\nminibuffer.  The default value is the number at point (if any).",
            "fnname": "Fgoto_char",
            "intspec": "(goto-char--read-natnum-interactive \"Go to char: \")",
            "lname": "goto-char",
            "maxargs": 1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Sgoto_char"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Open a connection to Gpm.\nGpm-mouse can only be activated for one tty at a time.",
            "fnname": "Fgpm_mouse_start",
            "intspec": "0",
            "lname": "gpm-mouse-start",
            "maxargs": 0,
            "minargs": 0,
            "path": "term.c",
            "sname": "Sgpm_mouse_start"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Close a connection to Gpm.",
            "fnname": "Fgpm_mouse_stop",
            "intspec": "0",
            "lname": "gpm-mouse-stop",
            "maxargs": 0,
            "minargs": 0,
            "path": "term.c",
            "sname": "Sgpm_mouse_stop"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the effective gid of Emacs, as an integer.",
            "fnname": "Fgroup_gid",
            "intspec": "0",
            "lname": "group-gid",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sgroup_gid"
        },
        {
            "args": [
                "gid"
            ],
            "attributes": null,
            "doc": "Return the name of the group whose numeric group ID is GID.\nThe argument GID should be an integer or a float.\nReturn nil if a group with such GID does not exists or is not known.",
            "fnname": "Fgroup_name",
            "intspec": "0",
            "lname": "group-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Sgroup_name"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the real gid of Emacs, as an integer.",
            "fnname": "Fgroup_real_gid",
            "intspec": "0",
            "lname": "group-real-gid",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sgroup_real_gid"
        },
        {
            "args": [
                "event"
            ],
            "attributes": null,
            "doc": "Handle the save_yourself event from a session manager.\nA session manager can tell Emacs that the window system is shutting down\nby sending Emacs a save_yourself message.  Emacs executes this function when\nsuch an event occurs.  This function then executes `emacs-session-save'.\nAfter that, this function informs the session manager that it can continue\nor abort shutting down the window system depending on the return value\nfrom `emacs-session-save'  If the return value is non-nil the session manager\nis told to abort the window system shutdown.\n\nDo not call this function yourself.",
            "fnname": "Fhandle_save_session",
            "intspec": "e",
            "lname": "handle-save-session",
            "maxargs": 1,
            "minargs": 1,
            "path": "xsmfns.c",
            "sname": "Shandle_save_session"
        },
        {
            "args": [
                "event"
            ],
            "attributes": null,
            "doc": "Handle a switch-frame event EVENT.\nSwitch-frame events are usually bound to this function.\nA switch-frame event is an event Emacs sends itself to\nindicate that input is arriving in a new frame. It does not\nnecessarily represent user-visible input focus.",
            "fnname": "Fhandle_switch_frame",
            "intspec": "^e",
            "lname": "handle-switch-frame",
            "maxargs": 1,
            "minargs": 1,
            "path": "frame.c",
            "sname": "Shandle_switch_frame"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Return the number of elements in TABLE.",
            "fnname": "Fhash_table_count",
            "intspec": "0",
            "lname": "hash-table-count",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Shash_table_count"
        },
        {
            "args": [
                "obj"
            ],
            "attributes": null,
            "doc": "Return t if OBJ is a Lisp hash table object.",
            "fnname": "Fhash_table_p",
            "intspec": "0",
            "lname": "hash-table-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Shash_table_p"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Return the current rehash size of TABLE.",
            "fnname": "Fhash_table_rehash_size",
            "intspec": "0",
            "lname": "hash-table-rehash-size",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Shash_table_rehash_size"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Return the current rehash threshold of TABLE.",
            "fnname": "Fhash_table_rehash_threshold",
            "intspec": "0",
            "lname": "hash-table-rehash-threshold",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Shash_table_rehash_threshold"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Return the size of TABLE.\nThe size can be used as an argument to `make-hash-table' to create\na hash table than can hold as many elements as TABLE holds\nwithout need for resizing.",
            "fnname": "Fhash_table_size",
            "intspec": "0",
            "lname": "hash-table-size",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Shash_table_size"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Return the test TABLE uses.",
            "fnname": "Fhash_table_test",
            "intspec": "0",
            "lname": "hash-table-test",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Shash_table_test"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Return the weakness of TABLE.",
            "fnname": "Fhash_table_weakness",
            "intspec": "0",
            "lname": "hash-table-weakness",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Shash_table_weakness"
        },
        {
            "args": [
                "vector",
                "prefix",
                "describer",
                "partial",
                "shadow",
                "entire_map",
                "mention_shadow"
            ],
            "attributes": null,
            "doc": "Insert in the current buffer a description of the contents of VECTOR.\nCall DESCRIBER to insert the description of one value found in VECTOR.\n\nPREFIX is a string describing the key which leads to the keymap that\nthis vector is in.\n\nIf PARTIAL, it means do not mention suppressed commands.\n\nSHADOW is a list of keymaps that shadow this map.\nIf it is non-nil, look up the key in those maps and don't mention it\nif it is defined by any of them.\n\nENTIRE-MAP is the keymap in which this vector appears.\nIf the definition in effect in the whole map does not match\nthe one in this keymap, we ignore this one.",
            "fnname": "Fhelp__describe_vector",
            "intspec": "0",
            "lname": "help--describe-vector",
            "maxargs": 7,
            "minargs": 7,
            "path": "keymap.c",
            "sname": "Shelp__describe_vector"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Make the frame FRAME into an icon.\nIf omitted, FRAME defaults to the currently selected frame.\n\nIf FRAME is a child frame, consult the variable `iconify-child-frame'\nfor how to proceed.",
            "fnname": "Ficonify_frame",
            "intspec": "",
            "lname": "iconify-frame",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Siconify_frame"
        },
        {
            "args": [
                "argument"
            ],
            "attributes": "const",
            "doc": "Return the ARGUMENT unchanged.",
            "fnname": "Fidentity",
            "intspec": "0",
            "lname": "identity",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sidentity"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "If COND yields non-nil, do THEN, else do ELSE...\nReturns the value of THEN or the value of the last of the ELSE's.\nTHEN must be one expression, but ELSE... can be zero or more expressions.\nIf COND yields nil, and there are no ELSE's, the value is nil.\nusage: (if COND THEN ELSE...)",
            "fnname": "Fif",
            "intspec": "0",
            "lname": "if",
            "maxargs": -2,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Sif"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the size of the image cache.",
            "fnname": "Fimage_cache_size",
            "intspec": "0",
            "lname": "image-cache-size",
            "maxargs": 0,
            "minargs": 0,
            "path": "image.c",
            "sname": "Simage_cache_size"
        },
        {
            "args": [
                "spec",
                "frame"
            ],
            "attributes": null,
            "doc": "Flush the image with specification SPEC on frame FRAME.\nThis removes the image from the Emacs image cache.  If SPEC specifies\nan image file, the next redisplay of this image will read from the\ncurrent contents of that file.\n\nFRAME nil or omitted means use the selected frame.\nFRAME t means refresh the image on all frames.",
            "fnname": "Fimage_flush",
            "intspec": "0",
            "lname": "image-flush",
            "maxargs": 2,
            "minargs": 1,
            "path": "image.c",
            "sname": "Simage_flush"
        },
        {
            "args": [
                "spec",
                "frame"
            ],
            "attributes": null,
            "doc": "Return t if image SPEC has a mask bitmap.\nFRAME is the frame on which the image will be displayed.  FRAME nil\nor omitted means use the selected frame.",
            "fnname": "Fimage_mask_p",
            "intspec": "0",
            "lname": "image-mask-p",
            "maxargs": 2,
            "minargs": 1,
            "path": "image.c",
            "sname": "Simage_mask_p"
        },
        {
            "args": [
                "spec",
                "frame"
            ],
            "attributes": null,
            "doc": "Return metadata for image SPEC.\nFRAME is the frame on which the image will be displayed.  FRAME nil\nor omitted means use the selected frame.",
            "fnname": "Fimage_metadata",
            "intspec": "0",
            "lname": "image-metadata",
            "maxargs": 2,
            "minargs": 1,
            "path": "image.c",
            "sname": "Simage_metadata"
        },
        {
            "args": [
                "spec",
                "pixels",
                "frame"
            ],
            "attributes": null,
            "doc": "Return the size of image SPEC as pair (WIDTH . HEIGHT).\nPIXELS non-nil means return the size in pixels, otherwise return the\nsize in canonical character units.\n\nFRAME is the frame on which the image will be displayed.  FRAME nil\nor omitted means use the selected frame.\n\nCalling this function will result in the image being stored in the\nimage cache.  If this is not desirable, call `image-flush' after\ncalling this function.",
            "fnname": "Fimage_size",
            "intspec": "0",
            "lname": "image-size",
            "maxargs": 3,
            "minargs": 1,
            "path": "image.c",
            "sname": "Simage_size"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Test whether FRAME supports image transformation.\nReturn list of capabilities if FRAME supports native transforms, nil otherwise.\nFRAME defaults to the selected frame.\nThe list of capabilities can include one or more of the following:\n\n - the symbol `scale' if FRAME supports image scaling\n - the symbol `rotate90' if FRAME supports image rotation only by angles\n    that are integral multiples of 90 degrees.",
            "fnname": "Fimage_transforms_p",
            "intspec": "0",
            "lname": "image-transforms-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "image.c",
            "sname": "Simage_transforms_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of image types supported by ImageMagick.\nEach entry in this list is a symbol named after an ImageMagick format\ntag.  See the ImageMagick manual for a list of ImageMagick formats and\ntheir descriptions (https://www.imagemagick.org/script/formats.php).\nYou can also try the shell command: `identify -list format'.\n\nNote that ImageMagick recognizes many file-types that Emacs does not\nrecognize as images, such as C.  See `imagemagick-enabled-types'\nand `imagemagick-types-inhibit'.",
            "fnname": "Fimagemagick_types",
            "intspec": "0",
            "lname": "imagemagick-types",
            "maxargs": 0,
            "minargs": 0,
            "path": "image.c",
            "sname": "Simagemagick_types"
        },
        {
            "args": [
                "spec"
            ],
            "attributes": null,
            "doc": "Value is non-nil if SPEC is a valid image specification.",
            "fnname": "Fimagep",
            "intspec": "0",
            "lname": "imagep",
            "maxargs": 1,
            "minargs": 1,
            "path": "image.c",
            "sname": "Simagep"
        },
        {
            "args": [
                "column",
                "minimum"
            ],
            "attributes": null,
            "doc": "Indent from point with tabs and spaces until COLUMN is reached.\nOptional second argument MINIMUM says always do at least MINIMUM spaces\neven if that goes past COLUMN; by default, MINIMUM is zero.\n\nWhether this uses tabs or spaces depends on `indent-tabs-mode'.\n\nThe return value is the column where the insertion ends.",
            "fnname": "Findent_to",
            "intspec": "NIndent to column: ",
            "lname": "indent-to",
            "maxargs": 2,
            "minargs": 1,
            "path": "indent.c",
            "sname": "Sindent_to"
        },
        {
            "args": [
                "object",
                "noerror"
            ],
            "attributes": null,
            "doc": "Return the function at the end of OBJECT's function chain.\nIf OBJECT is not a symbol, just return it.  Otherwise, follow all\nfunction indirections to find the final function binding and return it.",
            "fnname": "Findirect_function",
            "intspec": "0",
            "lname": "indirect-function",
            "maxargs": 2,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sindirect_function"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return the variable at the end of OBJECT's variable chain.\nIf OBJECT is a symbol, follow its variable indirections (if any), and\nreturn the variable at the end of the chain of aliases.  See Info node\n`(elisp)Variable Aliases'.\n\nIf OBJECT is not a symbol, just return it.",
            "fnname": "Findirect_variable",
            "intspec": "0",
            "lname": "indirect-variable",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sindirect_variable"
        },
        {
            "args": [
                "type"
            ],
            "attributes": null,
            "doc": "Initialize image library implementing image type TYPE.\nReturn t if TYPE is a supported image type.\n\nIf image libraries are loaded dynamically (currently the case only on\nMS-Windows), load the library for TYPE if it is not yet loaded, using\nthe library file(s) specified by `dynamic-library-alist'.",
            "fnname": "Finit_image_library",
            "intspec": "0",
            "lname": "init-image-library",
            "maxargs": 1,
            "minargs": 1,
            "path": "image.c",
            "sname": "Sinit_image_library"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return t if BUFFER is the most nested active minibuffer.\nNo argument or nil as argument means use the current buffer as BUFFER.",
            "fnname": "Finnermost_minibuffer_p",
            "intspec": "0",
            "lname": "innermost-minibuffer-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "minibuf.c",
            "sname": "Sinnermost_minibuffer_p"
        },
        {
            "args": [
                "filename",
                "aspect",
                "callback"
            ],
            "attributes": null,
            "doc": "Add a watch for FILE-NAME to inotify.\n\nReturn a watch descriptor.  The watch will look for ASPECT events and\ninvoke CALLBACK when an event occurs.\n\nASPECT might be one of the following symbols or a list of those symbols:\n\naccess\nattrib\nclose-write\nclose-nowrite\ncreate\ndelete\ndelete-self\nmodify\nmove-self\nmoved-from\nmoved-to\nopen\n\nall-events or t\nmove\nclose\n\nASPECT can also contain the following symbols, which control whether\nthe watch descriptor will be created:\n\ndont-follow\nonlydir\n\nWatching a directory is not recursive.  CALLBACK is passed a single argument\nEVENT which contains an event structure of the format\n\n\\(WATCH-DESCRIPTOR ASPECTS NAME COOKIE)\n\nWATCH-DESCRIPTOR is the same object that was returned by this function.  It can\nbe tested for equality using `equal'.  ASPECTS describes the event.  It is a\nlist of ASPECT symbols described above and can also contain one of the following\nsymbols\n\nignored\nisdir\nq-overflow\nunmount\n\nIf a directory is watched then NAME is the name of file that caused the event.\n\nCOOKIE is an object that can be compared using `equal' to identify two matching\nrenames (moved-from and moved-to).\n\nSee inotify(7) and inotify_add_watch(2) for further information.  The\ninotify fd is managed internally and there is no corresponding\ninotify_init.  Use `inotify-rm-watch' to remove a watch.\n\nThe following inotify bit-masks cannot be used because descriptors are\nshared across different callers.\n\nIN_EXCL_UNLINK\nIN_MASK_ADD\nIN_ONESHOT",
            "fnname": "Finotify_add_watch",
            "intspec": "0",
            "lname": "inotify-add-watch",
            "maxargs": 3,
            "minargs": 3,
            "path": "inotify.c",
            "sname": "Sinotify_add_watch"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return non-nil, if an inotify instance is allocated.",
            "fnname": "Finotify_allocated_p",
            "intspec": "0",
            "lname": "inotify-allocated-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "inotify.c",
            "sname": "Sinotify_allocated_p"
        },
        {
            "args": [
                "watch_descriptor"
            ],
            "attributes": null,
            "doc": "Remove an existing WATCH-DESCRIPTOR.\n\nWATCH-DESCRIPTOR should be an object returned by `inotify-add-watch'.\n\nSee inotify_rm_watch(2) for more information.",
            "fnname": "Finotify_rm_watch",
            "intspec": "0",
            "lname": "inotify-rm-watch",
            "maxargs": 1,
            "minargs": 1,
            "path": "inotify.c",
            "sname": "Sinotify_rm_watch"
        },
        {
            "args": [
                "watch_descriptor"
            ],
            "attributes": null,
            "doc": "Check a watch specified by its WATCH-DESCRIPTOR.\n\nWATCH-DESCRIPTOR should be an object returned by `inotify-add-watch'.\n\nA watch can become invalid if the file or directory it watches is\ndeleted, or if the watcher thread exits abnormally for any other\nreason.  Removing the watch by calling `inotify-rm-watch' also makes\nit invalid.",
            "fnname": "Finotify_valid_p",
            "intspec": "0",
            "lname": "inotify-valid-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "inotify.c",
            "sname": "Sinotify_valid_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a copy of the internal watch_list.",
            "fnname": "Finotify_watch_list",
            "intspec": "0",
            "lname": "inotify-watch-list",
            "maxargs": 0,
            "minargs": 0,
            "path": "inotify.c",
            "sname": "Sinotify_watch_list"
        },
        {
            "args": [
                "check_timers"
            ],
            "attributes": null,
            "doc": "Return t if command input is currently available with no wait.\nActually, the value is nil only if we can be sure that no input is available;\nif there is a doubt, the value is t.\n\nIf CHECK-TIMERS is non-nil, timers that are ready to run will do so.",
            "fnname": "Finput_pending_p",
            "intspec": "0",
            "lname": "input-pending-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Sinput_pending_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Insert the arguments, either strings or characters, at point.\nPoint and after-insertion markers move forward to end up\n after the inserted text.\nAny other markers at the point of insertion remain before the text.\n\nIf the current buffer is multibyte, unibyte strings are converted\nto multibyte for insertion (see `string-make-multibyte').\nIf the current buffer is unibyte, multibyte strings are converted\nto unibyte for insertion (see `string-make-unibyte').\n\nWhen operating on binary data, it may be necessary to preserve the\noriginal bytes of a unibyte string when inserting it into a multibyte\nbuffer; to accomplish this, apply `string-as-multibyte' to the string\nand insert the result.\n\nusage: (insert &rest ARGS)",
            "fnname": "Finsert",
            "intspec": "0",
            "lname": "insert",
            "maxargs": -1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sinsert"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Insert the arguments at point, inheriting properties from adjoining text.\nPoint and after-insertion markers move forward to end up\n after the inserted text.\nAny other markers at the point of insertion remain before the text.\n\nIf the current buffer is multibyte, unibyte strings are converted\nto multibyte for insertion (see `unibyte-char-to-multibyte').\nIf the current buffer is unibyte, multibyte strings are converted\nto unibyte for insertion.\n\nusage: (insert-and-inherit &rest ARGS)",
            "fnname": "Finsert_and_inherit",
            "intspec": "0",
            "lname": "insert-and-inherit",
            "maxargs": -1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sinsert_and_inherit"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Insert strings or characters at point, relocating markers after the text.\nPoint and markers move forward to end up after the inserted text.\n\nIf the current buffer is multibyte, unibyte strings are converted\nto multibyte for insertion (see `unibyte-char-to-multibyte').\nIf the current buffer is unibyte, multibyte strings are converted\nto unibyte for insertion.\n\nIf an overlay begins at the insertion point, the inserted text falls\noutside the overlay; if a nonempty overlay ends at the insertion\npoint, the inserted text falls inside that overlay.\n\nusage: (insert-before-markers &rest ARGS)",
            "fnname": "Finsert_before_markers",
            "intspec": "0",
            "lname": "insert-before-markers",
            "maxargs": -1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sinsert_before_markers"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Insert text at point, relocating markers and inheriting properties.\nPoint and markers move forward to end up after the inserted text.\n\nIf the current buffer is multibyte, unibyte strings are converted\nto multibyte for insertion (see `unibyte-char-to-multibyte').\nIf the current buffer is unibyte, multibyte strings are converted\nto unibyte for insertion.\n\nusage: (insert-before-markers-and-inherit &rest ARGS)",
            "fnname": "Finsert_and_inherit_before_markers",
            "intspec": "0",
            "lname": "insert-before-markers-and-inherit",
            "maxargs": -1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sinsert_and_inherit_before_markers"
        },
        {
            "args": [
                "buffer",
                "start",
                "end"
            ],
            "attributes": null,
            "doc": "Insert before point a substring of the contents of BUFFER.\nBUFFER may be a buffer or a buffer name.\nArguments START and END are character positions specifying the substring.\nThey default to the values of (point-min) and (point-max) in BUFFER.\n\nPoint and before-insertion markers move forward to end up after the\ninserted text.\nAny other markers at the point of insertion remain before the text.\n\nIf the current buffer is multibyte and BUFFER is unibyte, or vice\nversa, strings are converted from unibyte to multibyte or vice versa\nusing `string-make-multibyte' or `string-make-unibyte', which see.",
            "fnname": "Finsert_buffer_substring",
            "intspec": "0",
            "lname": "insert-buffer-substring",
            "maxargs": 3,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Sinsert_buffer_substring"
        },
        {
            "args": [
                "byte",
                "count",
                "inherit"
            ],
            "attributes": null,
            "doc": "Insert COUNT (second arg) copies of BYTE (first arg).\nBoth arguments are required.\nBYTE is a number of the range 0..255.\n\nIf BYTE is 128..255 and the current buffer is multibyte, the\ncorresponding eight-bit character is inserted.\n\nPoint, and before-insertion markers, are relocated as in the function `insert'.\nThe optional third arg INHERIT, if non-nil, says to inherit text properties\nfrom adjoining text, if those properties are sticky.",
            "fnname": "Finsert_byte",
            "intspec": "0",
            "lname": "insert-byte",
            "maxargs": 3,
            "minargs": 2,
            "path": "editfns.c",
            "sname": "Sinsert_byte"
        },
        {
            "args": [
                "character",
                "count",
                "inherit"
            ],
            "attributes": null,
            "doc": "Insert COUNT copies of CHARACTER.\nInteractively, prompt for CHARACTER using `read-char-by-name'.\nYou can specify CHARACTER in one of these ways:\n\n - As its Unicode character name, e.g. \\\"LATIN SMALL LETTER A\\\".\n   Completion is available; if you type a substring of the name\n   preceded by an asterisk `*', Emacs shows all names which include\n   that substring, not necessarily at the beginning of the name.\n\n - As a hexadecimal code point, e.g. 263A.  Note that code points in\n   Emacs are equivalent to Unicode up to 10FFFF (which is the limit of\n   the Unicode code space).\n\n - As a code point with a radix specified with #, e.g. #o21430\n   (octal), #x2318 (hex), or #10r8984 (decimal).\n\nIf called interactively, COUNT is given by the prefix argument.  If\nomitted or nil, it defaults to 1.\n\nInserting the character(s) relocates point and before-insertion\nmarkers in the same ways as the function `insert'.\n\nThe optional third argument INHERIT, if non-nil, says to inherit text\nproperties from adjoining text, if those properties are sticky.  If\ncalled interactively, INHERIT is t.",
            "fnname": "Finsert_char",
            "intspec": "(list (read-char-by-name \"Insert character (Unicode name or hex): \")\\\n              (prefix-numeric-value current-prefix-arg)\\\n              t))",
            "lname": "insert-char",
            "maxargs": 3,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Sinsert_char"
        },
        {
            "args": [
                "filename",
                "visit",
                "beg",
                "end",
                "replace"
            ],
            "attributes": null,
            "doc": "Insert contents of file FILENAME after point.\nReturns list of absolute file name and number of characters inserted.\nIf second argument VISIT is non-nil, the buffer's visited filename and\nlast save file modtime are set, and it is marked unmodified.  If\nvisiting and the file does not exist, visiting is completed before the\nerror is signaled.\n\nThe optional third and fourth arguments BEG and END specify what portion\nof the file to insert.  These arguments count bytes in the file, not\ncharacters in the buffer.  If VISIT is non-nil, BEG and END must be nil.\n\nWhen inserting data from a special file (e.g., /dev/urandom), you\ncan't specify VISIT or BEG, and END should be specified to avoid\ninserting unlimited data into the buffer from some special files\nwhich otherwise could supply infinite amounts of data.\n\nIf optional fifth argument REPLACE is non-nil and FILENAME names a\nregular file, replace the current buffer contents (in the accessible\nportion) with the file's contents.  This is better than simply\ndeleting and inserting the whole thing because (1) it preserves some\nmarker positions (in unchanged portions at the start and end of the\nbuffer) and (2) it puts less data in the undo list.  When REPLACE is\nnon-nil, the second element of the return value is the number of\ncharacters that replace the previous buffer contents.\n\nIf FILENAME is not a regular file and REPLACE is `if-regular', erase\nthe accessible portion of the buffer and insert the new contents.  Any\nother non-nil value of REPLACE will signal an error if FILENAME is not\na regular file.\n\nThis function does code conversion according to the value of\n`coding-system-for-read' or `file-coding-system-alist', and sets the\nvariable `last-coding-system-used' to the coding system actually used.\n\nIn addition, this function decodes the inserted text from known formats\nby calling `format-decode', which see.",
            "fnname": "Finsert_file_contents",
            "intspec": "0",
            "lname": "insert-file-contents",
            "maxargs": 5,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sinsert_file_contents"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is an integer or a marker (editor pointer).",
            "fnname": "Finteger_or_marker_p",
            "intspec": "0",
            "lname": "integer-or-marker-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sinteger_or_marker_p"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is an integer.",
            "fnname": "Fintegerp",
            "intspec": "0",
            "lname": "integerp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sintegerp"
        },
        {
            "args": [
                "args"
            ],
            "attributes": "const",
            "doc": "Specify a way of parsing arguments for interactive use of a function.\nFor example, write\n (defun foo (arg buf) \"Doc string\" (interactive \"P\\\\nbbuffer: \") .... )\n to make ARG be the raw prefix argument, and set BUF to an existing buffer,\n when `foo' is called as a command.\n\nThe \"call\" to `interactive' is actually a declaration rather than a\n function; it tells `call-interactively' how to read arguments to pass\n to the function.  When actually called, `interactive' just returns\n nil.\n\nUsually the argument of `interactive' is a string containing a code\n letter followed optionally by a prompt.  (Some code letters do not\n use I/O to get the argument and do not use prompts.)  To pass several\n arguments to the command, concatenate the individual strings,\n separating them by newline characters.\n\nPrompts are passed to `format', and may use %s escapes to print the\n arguments that have already been read.\n\nIf the argument is not a string, it is evaluated to get a list of\n arguments to pass to the command.\n\nJust `(interactive)' means pass no arguments to the command when\n calling interactively.\n\nCode letters available are:\na -- Function name: symbol with a function definition.\nb -- Name of existing buffer.\nB -- Name of buffer, possibly nonexistent.\nc -- Character (no input method is used).\nC -- Command name: symbol with interactive function definition.\nd -- Value of point as number.  Does not do I/O.\nD -- Directory name.\ne -- Parameterized event (i.e., one that's a list) that invoked this command.\n     If used more than once, the Nth `e' returns the Nth parameterized event.\n     This skips events that are integers or symbols.\nf -- Existing file name.\nF -- Possibly nonexistent file name.\nG -- Possibly nonexistent file name, defaulting to just directory name.\ni -- Ignored, i.e. always nil.  Does not do I/O.\nk -- Key sequence (downcase the last event if needed to get a definition).\nK -- Key sequence to be redefined (do not downcase the last event).\nm -- Value of mark as number.  Does not do I/O.\nM -- Any string.  Inherits the current input method.\nn -- Number read using minibuffer.\nN -- Numeric prefix arg, or if none, do like code `n'.\np -- Prefix arg converted to number.  Does not do I/O.\nP -- Prefix arg in raw form.  Does not do I/O.\nr -- Region: point and mark as 2 numeric args, smallest first.  Does no I/O.\ns -- Any string.  Does not inherit the current input method.\nS -- Any symbol.\nU -- Mouse up event discarded by a previous k or K argument.\nv -- Variable name: symbol that is `custom-variable-p'.\nx -- Lisp expression read but not evaluated.\nX -- Lisp expression read and evaluated.\nz -- Coding system.\nZ -- Coding system, nil if no prefix arg.\n\nIn addition, if the string begins with `*', an error is signaled if\n  the buffer is read-only.\nIf `@' appears at the beginning of the string, and if the key sequence\n used to invoke the command includes any mouse events, then the window\n associated with the first of those events is selected before the\n command is run.\nIf the string begins with `^' and `shift-select-mode' is non-nil,\n Emacs first calls the function `handle-shift-selection'.\nYou may use `@', `*', and `^' together.  They are processed in the\n order that they appear, before reading any arguments.\n\nIf MODES is present, it should be one or more mode names (symbols)\nfor which this command is applicable.  This is so that `M-x TAB'\nwill be able to exclude this command from the list of completion\ncandidates if the current buffer's mode doesn't match the list.\nWhich commands are excluded from the list of completion\ncandidates based on this information is controlled by the value\nof `read-extended-command-predicate', which see.\n\nusage: (interactive &optional ARG-DESCRIPTOR &rest MODES)",
            "fnname": "Finteractive",
            "intspec": "0",
            "lname": "interactive",
            "maxargs": -2,
            "minargs": 0,
            "path": "callint.c",
            "sname": "Sinteractive"
        },
        {
            "args": [
                "cmd"
            ],
            "attributes": null,
            "doc": "Return the interactive form of CMD or nil if none.\nIf CMD is not a command, the return value is nil.\nValue, if non-nil, is a list (interactive SPEC).",
            "fnname": "Finteractive_form",
            "intspec": "0",
            "lname": "interactive-form",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sinteractive_form"
        },
        {
            "args": [
                "string",
                "obarray"
            ],
            "attributes": null,
            "doc": "Return the canonical symbol whose name is STRING.\nIf there is none, one is created by this function and returned.\nA second optional argument specifies the obarray to use;\nit defaults to the value of `obarray'.",
            "fnname": "Fintern",
            "intspec": "0",
            "lname": "intern",
            "maxargs": 2,
            "minargs": 1,
            "path": "lread.c",
            "sname": "Sintern"
        },
        {
            "args": [
                "name",
                "obarray"
            ],
            "attributes": null,
            "doc": "Return the canonical symbol named NAME, or nil if none exists.\nNAME may be a string or a symbol.  If it is a symbol, that exact\nsymbol is searched for.\nA second optional argument specifies the obarray to use;\nit defaults to the value of `obarray'.",
            "fnname": "Fintern_soft",
            "intspec": "0",
            "lname": "intern-soft",
            "maxargs": 2,
            "minargs": 1,
            "path": "lread.c",
            "sname": "Sintern_soft"
        },
        {
            "args": [
                "symbol",
                "doc"
            ],
            "attributes": null,
            "doc": "Define SYMBOL as a variable, with DOC as its docstring.\nThis is like `defvar' and `defconst' but without affecting the variable's\nvalue.",
            "fnname": "Finternal__define_uninitialized_variable",
            "intspec": "0",
            "lname": "internal--define-uninitialized-variable",
            "maxargs": 2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sinternal__define_uninitialized_variable"
        },
        {
            "args": [
                "start",
                "end",
                "label"
            ],
            "attributes": null,
            "doc": "Restrict this buffer to START-END, and label the restriction with LABEL.\n\nThis is an internal function used by `with-restriction'.",
            "fnname": "Finternal__labeled_narrow_to_region",
            "intspec": "0",
            "lname": "internal--labeled-narrow-to-region",
            "maxargs": 3,
            "minargs": 3,
            "path": "editfns.c",
            "sname": "Sinternal__labeled_narrow_to_region"
        },
        {
            "args": [
                "label"
            ],
            "attributes": null,
            "doc": "Remove the current restriction if it is labeled with LABEL, and widen.\n\nThis is an internal function used by `without-restriction'.",
            "fnname": "Finternal__labeled_widen",
            "intspec": "0",
            "lname": "internal--labeled-widen",
            "maxargs": 1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Sinternal__labeled_widen"
        },
        {
            "args": [
                "tick",
                "buffer"
            ],
            "attributes": null,
            "doc": "Set BUFFER's tick counter to TICK.\nNo argument or nil as argument means use current buffer as BUFFER.",
            "fnname": "Finternal__set_buffer_modified_tick",
            "intspec": "0",
            "lname": "internal--set-buffer-modified-tick",
            "maxargs": 2,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sinternal__set_buffer_modified_tick"
        },
        {
            "args": [
                "bodyfun"
            ],
            "attributes": null,
            "doc": "Call BODYFUN with mouse movement events enabled.",
            "fnname": "Finternal_track_mouse",
            "intspec": "0",
            "lname": "internal--track-mouse",
            "maxargs": 1,
            "minargs": 1,
            "path": "keyboard.c",
            "sname": "Sinternal_track_mouse"
        },
        {
            "args": [
                "position",
                "ch"
            ],
            "attributes": null,
            "doc": "For internal use only.",
            "fnname": "Finternal_char_font",
            "intspec": "0",
            "lname": "internal-char-font",
            "maxargs": 2,
            "minargs": 1,
            "path": "font.c",
            "sname": "Sinternal_char_font"
        },
        {
            "args": [
                "string",
                "predicate",
                "flag"
            ],
            "attributes": null,
            "doc": "Perform completion on buffer names.\nSTRING and PREDICATE have the same meanings as in `try-completion',\n`all-completions', and `test-completion'.\n\nIf FLAG is nil, invoke `try-completion'; if it is t, invoke\n`all-completions'; otherwise invoke `test-completion'.",
            "fnname": "Finternal_complete_buffer",
            "intspec": "0",
            "lname": "internal-complete-buffer",
            "maxargs": 3,
            "minargs": 3,
            "path": "minibuf.c",
            "sname": "Sinternal_complete_buffer"
        },
        {
            "args": [
                "from",
                "to",
                "frame",
                "new_frame"
            ],
            "attributes": null,
            "doc": "Copy face FROM to TO.\nIf FRAME is t, copy the global face definition of FROM.\nOtherwise, copy the frame-local definition of FROM on FRAME.\nIf NEW-FRAME is a frame, copy that data into the frame-local\ndefinition of TO on NEW-FRAME.  If NEW-FRAME is nil,\nFRAME controls where the data is copied to.\n\nThe value is TO.",
            "fnname": "Finternal_copy_lisp_face",
            "intspec": "0",
            "lname": "internal-copy-lisp-face",
            "maxargs": 4,
            "minargs": 4,
            "path": "xfaces.c",
            "sname": "Sinternal_copy_lisp_face"
        },
        {
            "args": [
                "string",
                "buffer",
                "nocopy",
                "handle_8_bit",
                "handle_over_uni",
                "decode_method",
                "count"
            ],
            "attributes": null,
            "doc": "Internal use only.",
            "fnname": "Finternal_decode_string_utf_8",
            "intspec": "0",
            "lname": "internal-decode-string-utf-8",
            "maxargs": 7,
            "minargs": 7,
            "path": "coding.c",
            "sname": "Sinternal_decode_string_utf_8"
        },
        {
            "args": [
                "process",
                "current_group"
            ],
            "attributes": null,
            "doc": "Default function to interrupt process PROCESS.\nIt shall be the last element in list `interrupt-process-functions'.\nSee function `interrupt-process' for more details on usage.",
            "fnname": "Finternal_default_interrupt_process",
            "intspec": "0",
            "lname": "internal-default-interrupt-process",
            "maxargs": 2,
            "minargs": 0,
            "path": "process.c",
            "sname": "Sinternal_default_interrupt_process"
        },
        {
            "args": [
                "proc",
                "text"
            ],
            "attributes": null,
            "doc": "Function used as default process filter.\nThis inserts the process's output into its buffer, if there is one.\nOtherwise it discards the output.",
            "fnname": "Finternal_default_process_filter",
            "intspec": "0",
            "lname": "internal-default-process-filter",
            "maxargs": 2,
            "minargs": 2,
            "path": "process.c",
            "sname": "Sinternal_default_process_filter"
        },
        {
            "args": [
                "proc",
                "msg"
            ],
            "attributes": null,
            "doc": "Function used as default sentinel for processes.\nThis inserts a status message into the process's buffer, if there is one.",
            "fnname": "Finternal_default_process_sentinel",
            "intspec": "0",
            "lname": "internal-default-process-sentinel",
            "maxargs": 2,
            "minargs": 2,
            "path": "process.c",
            "sname": "Sinternal_default_process_sentinel"
        },
        {
            "args": [
                "process",
                "sigcode",
                "remote"
            ],
            "attributes": null,
            "doc": "Default function to send PROCESS the signal with code SIGCODE.\nIt shall be the last element in list `signal-process-functions'.\nSee function `signal-process' for more details on usage.",
            "fnname": "Finternal_default_signal_process",
            "intspec": "0",
            "lname": "internal-default-signal-process",
            "maxargs": 3,
            "minargs": 2,
            "path": "process.c",
            "sname": "Sinternal_default_signal_process"
        },
        {
            "args": [
                "syntax"
            ],
            "attributes": null,
            "doc": "Insert a description of the internal syntax description SYNTAX at point.",
            "fnname": "Finternal_describe_syntax_value",
            "intspec": "0",
            "lname": "internal-describe-syntax-value",
            "maxargs": 1,
            "minargs": 1,
            "path": "syntax.c",
            "sname": "Sinternal_describe_syntax_value"
        },
        {
            "args": [
                "string",
                "buffer",
                "nocopy",
                "handle_8_bit",
                "handle_over_uni",
                "encode_method",
                "count"
            ],
            "attributes": null,
            "doc": "Internal use only.",
            "fnname": "Finternal_encode_string_utf_8",
            "intspec": "0",
            "lname": "internal-encode-string-utf-8",
            "maxargs": 7,
            "minargs": 7,
            "path": "coding.c",
            "sname": "Sinternal_encode_string_utf_8"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Parse the event symbol.  For internal use.",
            "fnname": "Fevent_symbol_parse_modifiers",
            "intspec": "0",
            "lname": "internal-event-symbol-parse-modifiers",
            "maxargs": 1,
            "minargs": 1,
            "path": "keyboard.c",
            "sname": "Sevent_symbol_parse_modifiers"
        },
        {
            "args": [
                "resource",
                "class",
                "frame"
            ],
            "attributes": null,
            "doc": "Get the value of X resource RESOURCE, class CLASS.\nReturned value is for the display of frame FRAME.  If FRAME is not\nspecified or nil, use selected frame.  This function exists because\nordinary `x-get-resource' doesn't take a frame argument.",
            "fnname": "Finternal_face_x_get_resource",
            "intspec": "0",
            "lname": "internal-face-x-get-resource",
            "maxargs": 3,
            "minargs": 2,
            "path": "xfaces.c",
            "sname": "Sinternal_face_x_get_resource"
        },
        {
            "args": [
                "symbol",
                "keyword",
                "frame"
            ],
            "attributes": null,
            "doc": "Return face attribute KEYWORD of face SYMBOL.\nIf SYMBOL does not name a valid Lisp face or KEYWORD isn't a valid\nface attribute name, signal an error.\nIf the optional argument FRAME is given, report on face SYMBOL in that\nframe.  If FRAME is t, report on the defaults for face SYMBOL (for new\nframes).  If FRAME is omitted or nil, use the selected frame.",
            "fnname": "Finternal_get_lisp_face_attribute",
            "intspec": "0",
            "lname": "internal-get-lisp-face-attribute",
            "maxargs": 3,
            "minargs": 2,
            "path": "xfaces.c",
            "sname": "Sinternal_get_lisp_face_attribute"
        },
        {
            "args": [
                "event"
            ],
            "attributes": null,
            "doc": "Internally handle focus-in events.\nThis function potentially generates an artificial switch-frame event.",
            "fnname": "Finternal_handle_focus_in",
            "intspec": "0",
            "lname": "internal-handle-focus-in",
            "maxargs": 1,
            "minargs": 1,
            "path": "keyboard.c",
            "sname": "Sinternal_handle_focus_in"
        },
        {
            "args": [
                "attr"
            ],
            "attributes": null,
            "doc": "Return a list of valid discrete values for face attribute ATTR.\nValue is nil if ATTR doesn't have a discrete set of valid values.",
            "fnname": "Finternal_lisp_face_attribute_values",
            "intspec": "0",
            "lname": "internal-lisp-face-attribute-values",
            "maxargs": 1,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sinternal_lisp_face_attribute_values"
        },
        {
            "args": [
                "face",
                "frame"
            ],
            "attributes": null,
            "doc": "True if FACE has no attribute specified.\nIf the optional argument FRAME is given, report on face FACE in that frame.\nIf FRAME is t, report on the defaults for face FACE (for new frames).\nIf FRAME is omitted or nil, use the selected frame.",
            "fnname": "Finternal_lisp_face_empty_p",
            "intspec": "0",
            "lname": "internal-lisp-face-empty-p",
            "maxargs": 2,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sinternal_lisp_face_empty_p"
        },
        {
            "args": [
                "face1",
                "face2",
                "frame"
            ],
            "attributes": null,
            "doc": "True if FACE1 and FACE2 are equal.\nIf the optional argument FRAME is given, report on FACE1 and FACE2 in that frame.\nIf FRAME is t, report on the defaults for FACE1 and FACE2 (for new frames).\nIf FRAME is omitted or nil, use the selected frame.",
            "fnname": "Finternal_lisp_face_equal_p",
            "intspec": "0",
            "lname": "internal-lisp-face-equal-p",
            "maxargs": 3,
            "minargs": 2,
            "path": "xfaces.c",
            "sname": "Sinternal_lisp_face_equal_p"
        },
        {
            "args": [
                "face",
                "frame"
            ],
            "attributes": null,
            "doc": "Return non-nil if FACE names a face.\nFACE should be a symbol or string.\nIf optional second argument FRAME is non-nil, check for the\nexistence of a frame-local face with name FACE on that frame.\nOtherwise check for the existence of a global face.",
            "fnname": "Finternal_lisp_face_p",
            "intspec": "0",
            "lname": "internal-lisp-face-p",
            "maxargs": 2,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sinternal_lisp_face_p"
        },
        {
            "args": [
                "face",
                "frame"
            ],
            "attributes": null,
            "doc": "Make FACE, a symbol, a Lisp face with all attributes nil.\nIf FACE was not known as a face before, create a new one.\nIf optional argument FRAME is specified, make a frame-local face\nfor that frame.  Otherwise operate on the global face definition.\nValue is a vector of face attributes.",
            "fnname": "Finternal_make_lisp_face",
            "intspec": "0",
            "lname": "internal-make-lisp-face",
            "maxargs": 2,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sinternal_make_lisp_face"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Internal function.",
            "fnname": "Fmake_var_non_special",
            "intspec": "0",
            "lname": "internal-make-var-non-special",
            "maxargs": 1,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Smake_var_non_special"
        },
        {
            "args": [
                "face",
                "frame"
            ],
            "attributes": null,
            "doc": "Add attributes from frame-default definition of FACE to FACE on FRAME.\nDefault face attributes override any local face attributes.",
            "fnname": "Finternal_merge_in_global_face",
            "intspec": "0",
            "lname": "internal-merge-in-global-face",
            "maxargs": 2,
            "minargs": 2,
            "path": "xfaces.c",
            "sname": "Sinternal_merge_in_global_face"
        },
        {
            "args": [
                "alist"
            ],
            "attributes": null,
            "doc": "Define alternative font families to try in face font selection.\nALIST is an alist of (FAMILY ALTERNATIVE1 ALTERNATIVE2 ...) entries.\nEach ALTERNATIVE is tried in order if no fonts of font family FAMILY can\nbe found.  Value is ALIST.",
            "fnname": "Finternal_set_alternative_font_family_alist",
            "intspec": "0",
            "lname": "internal-set-alternative-font-family-alist",
            "maxargs": 1,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sinternal_set_alternative_font_family_alist"
        },
        {
            "args": [
                "alist"
            ],
            "attributes": null,
            "doc": "Define alternative font registries to try in face font selection.\nALIST is an alist of (REGISTRY ALTERNATIVE1 ALTERNATIVE2 ...) entries.\nEach ALTERNATIVE is tried in order if no fonts of font registry REGISTRY can\nbe found.  Value is ALIST.",
            "fnname": "Finternal_set_alternative_font_registry_alist",
            "intspec": "0",
            "lname": "internal-set-alternative-font-registry-alist",
            "maxargs": 1,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sinternal_set_alternative_font_registry_alist"
        },
        {
            "args": [
                "order"
            ],
            "attributes": null,
            "doc": "Set font selection order for face font selection to ORDER.\nORDER must be a list of length 4 containing the symbols `:width',\n`:height', `:weight', and `:slant'.  Face attributes appearing\nfirst in ORDER are matched first, e.g. if `:height' appears before\n`:weight' in ORDER, font selection first tries to find a font with\na suitable height, and then tries to match the font weight.\nValue is ORDER.",
            "fnname": "Finternal_set_font_selection_order",
            "intspec": "0",
            "lname": "internal-set-font-selection-order",
            "maxargs": 1,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sinternal_set_font_selection_order"
        },
        {
            "args": [
                "face",
                "attr",
                "value",
                "frame"
            ],
            "attributes": null,
            "doc": "Set attribute ATTR of FACE to VALUE.\nFRAME being a frame means change the face on that frame.\nFRAME nil means change the face of the selected frame.\nFRAME t means change the default for new frames.\nFRAME 0 means change the face on all frames, and change the default\n  for new frames.",
            "fnname": "Finternal_set_lisp_face_attribute",
            "intspec": "0",
            "lname": "internal-set-lisp-face-attribute",
            "maxargs": 4,
            "minargs": 3,
            "path": "xfaces.c",
            "sname": "Sinternal_set_lisp_face_attribute"
        },
        {
            "args": [
                "face",
                "attr",
                "value",
                "frame"
            ],
            "attributes": null,
            "doc": "",
            "fnname": "Finternal_set_lisp_face_attribute_from_resource",
            "intspec": "0",
            "lname": "internal-set-lisp-face-attribute-from-resource",
            "maxargs": 4,
            "minargs": 3,
            "path": "xfaces.c",
            "sname": "Sinternal_set_lisp_face_attribute_from_resource"
        },
        {
            "args": [
                "window",
                "show"
            ],
            "attributes": null,
            "doc": "Set the cursor-visibility flag of WINDOW to SHOW.\nWINDOW nil means use the selected window.  SHOW non-nil means\nshow a cursor in WINDOW in the next redisplay.  SHOW nil means\ndon't show a cursor.",
            "fnname": "Finternal_show_cursor",
            "intspec": "0",
            "lname": "internal-show-cursor",
            "maxargs": 2,
            "minargs": 2,
            "path": "dispnew.c",
            "sname": "Sinternal_show_cursor"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Value is non-nil if next redisplay will display a cursor in WINDOW.\nWINDOW nil or omitted means report on the selected window.",
            "fnname": "Finternal_show_cursor_p",
            "intspec": "0",
            "lname": "internal-show-cursor-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "dispnew.c",
            "sname": "Sinternal_show_cursor_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "internal",
            "fnname": "Finternal_stack_stats",
            "intspec": "0",
            "lname": "internal-stack-stats",
            "maxargs": 0,
            "minargs": 0,
            "path": "bytecode.c",
            "sname": "Sinternal_stack_stats"
        },
        {
            "args": [
                "function"
            ],
            "attributes": null,
            "doc": "Return the raw documentation info of a C primitive.",
            "fnname": "Fsubr_documentation",
            "intspec": "0",
            "lname": "internal-subr-documentation",
            "maxargs": 1,
            "minargs": 1,
            "path": "doc.c",
            "sname": "Ssubr_documentation"
        },
        {
            "args": [
                "process",
                "current_group"
            ],
            "attributes": null,
            "doc": "Interrupt process PROCESS.\nPROCESS may be a process, a buffer, or the name of a process or buffer.\nNo arg or nil means current buffer's process.\nSecond arg CURRENT-GROUP non-nil means send signal to\nthe current process-group of the process's controlling terminal\nrather than to the process's own process group.\nIf the process is a shell, this means interrupt current subjob\nrather than the shell.\n\nIf CURRENT-GROUP is `lambda', and if the shell owns the terminal,\ndon't send the signal.\n\nThis function calls the functions of `interrupt-process-functions' in\nthe order of the list, until one of them returns non-nil.",
            "fnname": "Finterrupt_process",
            "intspec": "0",
            "lname": "interrupt-process",
            "maxargs": 2,
            "minargs": 0,
            "path": "process.c",
            "sname": "Sinterrupt_process"
        },
        {
            "args": [
                "pos"
            ],
            "attributes": null,
            "doc": "Non-nil if text properties at POS cause text there to be currently invisible.\nPOS should be a marker or a buffer position; the value of the `invisible'\nproperty at that position in the current buffer is examined.\nPOS can also be the actual value of the `invisible' text or overlay\nproperty of the text of interest, in which case the value itself is\nexamined.\n\nThe non-nil value returned can be t for currently invisible text that is\nentirely hidden on display, or some other non-nil, non-t value if the\ntext is replaced by an ellipsis.\n\nNote that whether text with `invisible' property is actually hidden on\ndisplay may depend on `buffer-invisibility-spec', which see.",
            "fnname": "Finvisible_p",
            "intspec": "0",
            "lname": "invisible-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "xdisp.c",
            "sname": "Sinvisible_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the directory name in which the Emacs executable was located.",
            "fnname": "Finvocation_directory",
            "intspec": "0",
            "lname": "invocation-directory",
            "maxargs": 0,
            "minargs": 0,
            "path": "emacs.c",
            "sname": "Sinvocation_directory"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the program name that was used to run Emacs.\nAny directory names are omitted.",
            "fnname": "Finvocation_name",
            "intspec": "0",
            "lname": "invocation-name",
            "maxargs": 0,
            "minargs": 0,
            "path": "emacs.c",
            "sname": "Sinvocation_name"
        },
        {
            "args": [
                "x"
            ],
            "attributes": null,
            "doc": "Return non-nil if argument X is a NaN.",
            "fnname": "Fisnan",
            "intspec": "0",
            "lname": "isnan",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sisnan"
        },
        {
            "args": [
                "dimension",
                "chars",
                "final_char"
            ],
            "attributes": null,
            "doc": "Return charset of ISO's specification DIMENSION, CHARS, and FINAL-CHAR.\n\nISO 2022's designation sequence (escape sequence) distinguishes charsets\nby their DIMENSION, CHARS, and FINAL-CHAR,\nwhereas Emacs distinguishes them by charset symbol.\nSee the documentation of the function `charset-info' for the meanings of\nDIMENSION, CHARS, and FINAL-CHAR.",
            "fnname": "Fiso_charset",
            "intspec": "0",
            "lname": "iso-charset",
            "maxargs": 3,
            "minargs": 3,
            "path": "charset.c",
            "sname": "Siso_charset"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return non-nil if libjansson is available (internal use only).",
            "fnname": "Fjson__available_p",
            "intspec": "NULL",
            "lname": "json--available-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "json.c",
            "sname": "Sjson__available_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Insert the JSON representation of OBJECT before point.\nThis is the same as (insert (json-serialize OBJECT)), but potentially\nfaster.  See the function `json-serialize' for allowed values of\nOBJECT.\nusage: (json-insert OBJECT &rest ARGS)",
            "fnname": "Fjson_insert",
            "intspec": "NULL",
            "lname": "json-insert",
            "maxargs": -1,
            "minargs": 1,
            "path": "json.c",
            "sname": "Sjson_insert"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Read JSON object from current buffer starting at point.\nMove point after the end of the object if parsing was successful.\nOn error, don't move point.\n\nThe returned object will be a vector, list, hashtable, alist, or\nplist.  Its elements will be the JSON null value, the JSON false\nvalue, t, numbers, strings, or further vectors, lists, hashtables,\nalists, or plists.  If there are duplicate keys in an object, all\nbut the last one are ignored.\n\nIf the current buffer doesn't contain a valid JSON object, the\nfunction signals an error of type `json-parse-error'.\n\nThe arguments ARGS are a list of keyword/argument pairs:\n\nThe keyword argument `:object-type' specifies which Lisp type is used\nto represent objects; it can be `hash-table', `alist' or `plist'.  It\ndefaults to `hash-table'.\n\nThe keyword argument `:array-type' specifies which Lisp type is used\nto represent arrays; it can be `array' (the default) or `list'.\n\nThe keyword argument `:null-object' specifies which object to use\nto represent a JSON null value.  It defaults to `:null'.\n\nThe keyword argument `:false-object' specifies which object to use to\nrepresent a JSON false value.  It defaults to `:false'.\nusage: (json-parse-buffer &rest args)",
            "fnname": "Fjson_parse_buffer",
            "intspec": "NULL",
            "lname": "json-parse-buffer",
            "maxargs": -1,
            "minargs": 0,
            "path": "json.c",
            "sname": "Sjson_parse_buffer"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Parse the JSON STRING into a Lisp object.\nThis is essentially the reverse operation of `json-serialize', which\nsee.  The returned object will be the JSON null value, the JSON false\nvalue, t, a number, a string, a vector, a list, a hashtable, an alist,\nor a plist.  Its elements will be further objects of these types.  If\nthere are duplicate keys in an object, all but the last one are\nignored.  If STRING doesn't contain a valid JSON object, this function\nsignals an error of type `json-parse-error'.\n\nThe arguments ARGS are a list of keyword/argument pairs:\n\nThe keyword argument `:object-type' specifies which Lisp type is used\nto represent objects; it can be `hash-table', `alist' or `plist'.  It\ndefaults to `hash-table'.\n\nThe keyword argument `:array-type' specifies which Lisp type is used\nto represent arrays; it can be `array' (the default) or `list'.\n\nThe keyword argument `:null-object' specifies which object to use\nto represent a JSON null value.  It defaults to `:null'.\n\nThe keyword argument `:false-object' specifies which object to use to\nrepresent a JSON false value.  It defaults to `:false'.\nusage: (json-parse-string STRING &rest ARGS)",
            "fnname": "Fjson_parse_string",
            "intspec": "NULL",
            "lname": "json-parse-string",
            "maxargs": -1,
            "minargs": 1,
            "path": "json.c",
            "sname": "Sjson_parse_string"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the JSON representation of OBJECT as a string.\n\nOBJECT must be t, a number, string, vector, hashtable, alist, plist,\nor the Lisp equivalents to the JSON null and false values, and its\nelements must recursively consist of the same kinds of values.  t will\nbe converted to the JSON true value.  Vectors will be converted to\nJSON arrays, whereas hashtables, alists and plists are converted to\nJSON objects.  Hashtable keys must be strings without embedded null\ncharacters and must be unique within each object.  Alist and plist\nkeys must be symbols; if a key is duplicate, the first instance is\nused.\n\nThe Lisp equivalents to the JSON null and false values are\nconfigurable in the arguments ARGS, a list of keyword/argument pairs:\n\nThe keyword argument `:null-object' specifies which object to use\nto represent a JSON null value.  It defaults to `:null'.\n\nThe keyword argument `:false-object' specifies which object to use to\nrepresent a JSON false value.  It defaults to `:false'.\n\nIn you specify the same value for `:null-object' and `:false-object',\na potentially ambiguous situation, the JSON output will not contain\nany JSON false values.\nusage: (json-serialize OBJECT &rest ARGS)",
            "fnname": "Fjson_serialize",
            "intspec": "NULL",
            "lname": "json-serialize",
            "maxargs": -1,
            "minargs": 1,
            "path": "json.c",
            "sname": "Sjson_serialize"
        },
        {
            "args": [
                "key",
                "accept_default",
                "no_remap",
                "position"
            ],
            "attributes": null,
            "doc": "Return the binding for command KEY in current keymaps.\nKEY is a string or vector, a sequence of keystrokes.\nThe binding is probably a symbol with a function definition.\n\nNormally, `key-binding' ignores bindings for t, which act as default\nbindings, used when nothing else in the keymap applies; this makes it\nusable as a general function for probing keymaps.  However, if the\noptional second argument ACCEPT-DEFAULT is non-nil, `key-binding' does\nrecognize the default bindings, just as `read-key-sequence' does.\n\nLike the normal command loop, `key-binding' will remap the command\nresulting from looking up KEY by looking up the command in the\ncurrent keymaps.  However, if the optional third argument NO-REMAP\nis non-nil, `key-binding' returns the unmapped command.\n\nIf KEY is a key sequence initiated with the mouse, the used keymaps\nwill depend on the clicked mouse position with regard to the buffer\nand possible local keymaps on strings.\n\nIf the optional argument POSITION is non-nil, it specifies a mouse\nposition as returned by `event-start' and `event-end', and the lookup\noccurs in the keymaps associated with it instead of KEY.  It can also\nbe a number or marker, in which case the keymap properties at the\nspecified buffer position instead of point are used.",
            "fnname": "Fkey_binding",
            "intspec": "0",
            "lname": "key-binding",
            "maxargs": 4,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Skey_binding"
        },
        {
            "args": [
                "keys",
                "prefix"
            ],
            "attributes": null,
            "doc": "Return a pretty description of key-sequence KEYS.\nOptional arg PREFIX is the sequence of keys leading up to KEYS.\nFor example, [?\\\\C-x ?l] is converted into the string \\\"C-x l\\\".\n\nFor an approximate inverse of this, see `kbd'.",
            "fnname": "Fkey_description",
            "intspec": "0",
            "lname": "key-description",
            "maxargs": 2,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Skey_description"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return coding system specified for decoding keyboard input.",
            "fnname": "Fkeyboard_coding_system",
            "intspec": "0",
            "lname": "keyboard-coding-system",
            "maxargs": 1,
            "minargs": 0,
            "path": "coding.c",
            "sname": "Skeyboard_coding_system"
        },
        {
            "args": [
                "object",
                "autoload"
            ],
            "attributes": null,
            "doc": "Given OBJECT which was found in a slot in a keymap,\ntrace indirect definitions to get the actual definition of that slot.\nAn indirect definition is a list of the form\n(KEYMAP . INDEX), where KEYMAP is a keymap or a symbol defined as one\nand INDEX is the object to look up in KEYMAP to yield the definition.\n\nAlso if OBJECT has a menu string as the first element,\nremove that.  Also remove a menu help string as second element.\n\nIf AUTOLOAD, load autoloadable keymaps\nthat are referred to with indirection.",
            "fnname": "Fkeymap__get_keyelt",
            "intspec": "0",
            "lname": "keymap--get-keyelt",
            "maxargs": 2,
            "minargs": 2,
            "path": "keymap.c",
            "sname": "Skeymap__get_keyelt"
        },
        {
            "args": [
                "keymap"
            ],
            "attributes": null,
            "doc": "Return the parent keymap of KEYMAP.\nIf KEYMAP has no parent, return nil.",
            "fnname": "Fkeymap_parent",
            "intspec": "0",
            "lname": "keymap-parent",
            "maxargs": 1,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Skeymap_parent"
        },
        {
            "args": [
                "map"
            ],
            "attributes": null,
            "doc": "Return the prompt-string of a keymap MAP.\nIf non-nil, the prompt is shown in the echo-area\nwhen reading a key-sequence to be looked-up in this keymap.",
            "fnname": "Fkeymap_prompt",
            "intspec": "0",
            "lname": "keymap-prompt",
            "maxargs": 1,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Skeymap_prompt"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a keymap.\n\nA keymap is a list (keymap . ALIST),\nor a symbol whose function definition is itself a keymap.\nALIST elements look like (CHAR . DEFN) or (SYMBOL . DEFN);\na vector of densely packed bindings for small character codes\nis also allowed as an element.",
            "fnname": "Fkeymapp",
            "intspec": "0",
            "lname": "keymapp",
            "maxargs": 1,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Skeymapp"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a keyword.\nThis means that it is a symbol with a print name beginning with `:'\ninterned in the initial obarray.",
            "fnname": "Fkeywordp",
            "intspec": "0",
            "lname": "keywordp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Skeywordp"
        },
        {
            "args": [
                "kill_permanent"
            ],
            "attributes": null,
            "doc": "Switch to Fundamental mode by killing current buffer's local variables.\nMost local variable bindings are eliminated so that the default values\nbecome effective once more.  Also, the syntax table is set from\n`standard-syntax-table', the local keymap is set to nil,\nand the abbrev table from `fundamental-mode-abbrev-table'.\nThis function also forces redisplay of the mode line.\n\nEvery function to select a new major mode starts by\ncalling this function.\n\nAs a special exception, local variables whose names have a non-nil\n`permanent-local' property are not eliminated by this function.  If\nthe optional KILL-PERMANENT argument is non-nil, clear out these local\nvariables, too.\n\nThe first thing this function does is run\nthe normal hook `change-major-mode-hook'.",
            "fnname": "Fkill_all_local_variables",
            "intspec": "0",
            "lname": "kill-all-local-variables",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Skill_all_local_variables"
        },
        {
            "args": [
                "buffer_or_name"
            ],
            "attributes": null,
            "doc": "Kill the buffer specified by BUFFER-OR-NAME.\nThe argument may be a buffer or the name of an existing buffer.\nArgument nil or omitted means kill the current buffer.  Return t if the\nbuffer is actually killed, nil otherwise.\n\nThe functions in `kill-buffer-query-functions' are called with the\nbuffer to be killed as the current buffer.  If any of them returns nil,\nthe buffer is not killed.  The hook `kill-buffer-hook' is run before the\nbuffer is actually killed.  The buffer being killed will be current\nwhile the hook is running.  Functions called by any of these hooks are\nsupposed to not change the current buffer.  Neither hook is run for\ninternal or temporary buffers created by `get-buffer-create' or\n`generate-new-buffer' with argument INHIBIT-BUFFER-HOOKS non-nil.\n\nAny processes that have this buffer as the `process-buffer' are killed\nwith SIGHUP.  This function calls `replace-buffer-in-windows' for\ncleaning up all windows currently displaying the buffer to be killed.",
            "fnname": "Fkill_buffer",
            "intspec": "bKill buffer: ",
            "lname": "kill-buffer",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Skill_buffer"
        },
        {
            "args": [
                "arg",
                "restart"
            ],
            "attributes": "noreturn",
            "doc": "Exit the Emacs job and kill it.\nIf ARG is an integer, return ARG as the exit program code.\nIf ARG is a string, stuff it as keyboard input.\nAny other value of ARG, or ARG omitted, means return an\nexit code that indicates successful program termination.\n\nIf RESTART is non-nil, instead of just exiting at the end, start a new\nEmacs process, using the same command line arguments as the currently\nrunning Emacs process.\n\nThis function is called upon receipt of the signals SIGTERM\nor SIGHUP, and upon SIGINT in batch mode.\n\nThe value of `kill-emacs-hook', if not void, is a list of functions\n(of no args), all of which are called before Emacs is actually\nkilled.",
            "fnname": "Fkill_emacs",
            "intspec": "P",
            "lname": "kill-emacs",
            "maxargs": 2,
            "minargs": 0,
            "path": "emacs.c",
            "sname": "Skill_emacs"
        },
        {
            "args": [
                "variable"
            ],
            "attributes": null,
            "doc": "Make VARIABLE no longer have a separate value in the current buffer.\nFrom now on the default value will apply in this buffer.  Return VARIABLE.",
            "fnname": "Fkill_local_variable",
            "intspec": "vKill Local Variable: ",
            "lname": "kill-local-variable",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Skill_local_variable"
        },
        {
            "args": [
                "process",
                "current_group"
            ],
            "attributes": null,
            "doc": "Kill process PROCESS.  May be process or name of one.\nSee function `interrupt-process' for more details on usage.",
            "fnname": "Fkill_process",
            "intspec": "(list (read-process-name \"Kill process\"))",
            "lname": "kill-process",
            "maxargs": 2,
            "minargs": 0,
            "path": "process.c",
            "sname": "Skill_process"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Kill the specified XWIDGET.\nThis releases all window system resources associated with XWIDGET,\nremoves it from `xwidget-list', and detaches it from its buffer.",
            "fnname": "Fkill_xwidget",
            "intspec": "0",
            "lname": "kill-xwidget",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Skill_xwidget"
        },
        {
            "args": [
                "file",
                "flags",
                "callback"
            ],
            "attributes": null,
            "doc": "Add a watch for filesystem events pertaining to FILE.\n\nThis arranges for filesystem events pertaining to FILE to be reported\nto Emacs.  Use `kqueue-rm-watch' to cancel the watch.\n\nReturned value is a descriptor for the added watch.  If the file cannot be\nwatched for some reason, this function signals a `file-notify-error' error.\n\nFLAGS is a list of events to be watched for.  It can include the\nfollowing symbols:\n\n  `create' -- FILE was created\n  `delete' -- FILE was deleted\n  `write'  -- FILE has changed\n  `extend' -- FILE was extended\n  `attrib' -- a FILE attribute was changed\n  `link'   -- a FILE's link count was changed\n  `rename' -- FILE was moved to FILE1\n\nWhen any event happens, Emacs will call the CALLBACK function passing\nit a single argument EVENT, which is of the form\n\n  (DESCRIPTOR ACTIONS FILE [FILE1])\n\nDESCRIPTOR is the same object as the one returned by this function.\nACTIONS is a list of events.\n\nFILE is the name of the file whose event is being reported.  FILE1\nwill be reported only in case of the `rename' event.  This is possible\nonly when the upper directory of the renamed file is watched.",
            "fnname": "Fkqueue_add_watch",
            "intspec": "0",
            "lname": "kqueue-add-watch",
            "maxargs": 3,
            "minargs": 3,
            "path": "kqueue.c",
            "sname": "Skqueue_add_watch"
        },
        {
            "args": [
                "watch_descriptor"
            ],
            "attributes": null,
            "doc": "Remove an existing WATCH-DESCRIPTOR.\n\nWATCH-DESCRIPTOR should be an object returned by `kqueue-add-watch'.",
            "fnname": "Fkqueue_rm_watch",
            "intspec": "0",
            "lname": "kqueue-rm-watch",
            "maxargs": 1,
            "minargs": 1,
            "path": "kqueue.c",
            "sname": "Skqueue_rm_watch"
        },
        {
            "args": [
                "watch_descriptor"
            ],
            "attributes": null,
            "doc": "Check a watch specified by its WATCH-DESCRIPTOR.\n\nWATCH-DESCRIPTOR should be an object returned by `kqueue-add-watch'.\n\nA watch can become invalid if the file or directory it watches is\ndeleted, or if the watcher thread exits abnormally for any other\nreason.  Removing the watch by calling `kqueue-rm-watch' also makes it\ninvalid.",
            "fnname": "Fkqueue_valid_p",
            "intspec": "0",
            "lname": "kqueue-valid-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "kqueue.c",
            "sname": "Skqueue_valid_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return last non-minibuffer frame selected.",
            "fnname": "Flast_nonminibuf_frame",
            "intspec": "0",
            "lname": "last-nonminibuffer-frame",
            "maxargs": 0,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Slast_nonminibuf_frame"
        },
        {
            "args": [
                "color1",
                "color2",
                "whitepoint",
                "view"
            ],
            "attributes": null,
            "doc": "Compute CAM02-UCS metric distance between COLOR1 and COLOR2.\nEach color is a list of XYZ tristimulus values, with Y scaled about unity.\nOptional argument WHITEPOINT is the XYZ white point, which defaults to\nilluminant D65.\nOptional argument VIEW is a list containing the viewing conditions, and\nis of the form (YB LA SURROUND DVALUE) where SURROUND corresponds to\n  1   AVG_SURROUND\n  2   DIM_SURROUND\n  3   DARK_SURROUND\n  4   CUTSHEET_SURROUND\nThe default viewing conditions are (20 100 1 1).",
            "fnname": "Flcms_cam02_ucs",
            "intspec": "0",
            "lname": "lcms-cam02-ucs",
            "maxargs": 4,
            "minargs": 2,
            "path": "lcms.c",
            "sname": "Slcms_cam02_ucs"
        },
        {
            "args": [
                "color1",
                "color2",
                "kL",
                "kC",
                "kH"
            ],
            "attributes": null,
            "doc": "Compute CIEDE2000 metric distance between COLOR1 and COLOR2.\nEach color is a list of L*a*b* coordinates, where the L* channel ranges from\n0 to 100, and the a* and b* channels range from -128 to 128.\nOptional arguments KL, KC, KH are weighting parameters for lightness,\nchroma, and hue, respectively. The parameters each default to 1.",
            "fnname": "Flcms_cie_de2000",
            "intspec": "0",
            "lname": "lcms-cie-de2000",
            "maxargs": 5,
            "minargs": 2,
            "path": "lcms.c",
            "sname": "Slcms_cie_de2000"
        },
        {
            "args": [
                "color",
                "whitepoint",
                "view"
            ],
            "attributes": null,
            "doc": "Convert CAM02-UCS J'a'b' to CIE CAM02 JCh.\nCOLOR is a list (J' a' b'), where white corresponds to lightness J equal to 100.\nOptional arguments WHITEPOINT and VIEW are the same as in `lcms-cam02-ucs',\nwhich see.",
            "fnname": "Flcms_jab_to_jch",
            "intspec": "0",
            "lname": "lcms-jab->jch",
            "maxargs": 3,
            "minargs": 1,
            "path": "lcms.c",
            "sname": "Slcms_jab_to_jch"
        },
        {
            "args": [
                "color",
                "whitepoint",
                "view"
            ],
            "attributes": null,
            "doc": "Convert CIE CAM02 JCh to CAM02-UCS J'a'b'.\nCOLOR is a list (J C h) as described in `lcms-jch->xyz', which see.\nOptional arguments WHITEPOINT and VIEW are the same as in `lcms-cam02-ucs',\nwhich see.",
            "fnname": "Flcms_jch_to_jab",
            "intspec": "0",
            "lname": "lcms-jch->jab",
            "maxargs": 3,
            "minargs": 1,
            "path": "lcms.c",
            "sname": "Slcms_jch_to_jab"
        },
        {
            "args": [
                "color",
                "whitepoint",
                "view"
            ],
            "attributes": null,
            "doc": "Convert CIE CAM02 JCh to CIE XYZ.\nCOLOR is a list (J C h), where lightness of white is equal to 100, and hue\nis given in degrees.\nOptional arguments WHITEPOINT and VIEW are the same as in `lcms-cam02-ucs',\nwhich see.",
            "fnname": "Flcms_jch_to_xyz",
            "intspec": "0",
            "lname": "lcms-jch->xyz",
            "maxargs": 3,
            "minargs": 1,
            "path": "lcms.c",
            "sname": "Slcms_jch_to_xyz"
        },
        {
            "args": [
                "temperature"
            ],
            "attributes": null,
            "doc": "Return XYZ black body chromaticity from TEMPERATURE given in K.\nValid range of TEMPERATURE is from 4000K to 25000K.",
            "fnname": "Flcms_temp_to_white_point",
            "intspec": "0",
            "lname": "lcms-temp->white-point",
            "maxargs": 1,
            "minargs": 1,
            "path": "lcms.c",
            "sname": "Slcms_temp_to_white_point"
        },
        {
            "args": [
                "color",
                "whitepoint",
                "view"
            ],
            "attributes": null,
            "doc": "Convert CIE XYZ to CIE CAM02 JCh.\nCOLOR is a list (X Y Z), with Y scaled about unity.\nOptional arguments WHITEPOINT and VIEW are the same as in `lcms-cam02-ucs',\nwhich see.",
            "fnname": "Flcms_xyz_to_jch",
            "intspec": "0",
            "lname": "lcms-xyz->jch",
            "maxargs": 3,
            "minargs": 1,
            "path": "lcms.c",
            "sname": "Slcms_xyz_to_jch"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if lcms2 color calculations are available in this instance of Emacs.",
            "fnname": "Flcms2_available_p",
            "intspec": "0",
            "lname": "lcms2-available-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "lcms.c",
            "sname": "Slcms2_available_p"
        },
        {
            "args": [
                "sgnfcand",
                "exponent"
            ],
            "attributes": null,
            "doc": "Return SGNFCAND * 2**EXPONENT, as a floating point number.\nEXPONENT must be an integer.",
            "fnname": "Fldexp",
            "intspec": "0",
            "lname": "ldexp",
            "maxargs": 2,
            "minargs": 2,
            "path": "floatfns.c",
            "sname": "Sldexp"
        },
        {
            "args": [
                "sequence"
            ],
            "attributes": null,
            "doc": "Return the length of vector, list or string SEQUENCE.\nA byte-code function object is also allowed.\n\nIf the string contains multibyte characters, this is not necessarily\nthe number of bytes in the string; it is the number of characters.\nTo get the number of bytes, use `string-bytes'.\n\nIf the length of a list is being computed to compare to a (small)\nnumber, the `length<', `length>' and `length=' functions may be more\nefficient.",
            "fnname": "Flength",
            "intspec": "0",
            "lname": "length",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Slength"
        },
        {
            "args": [
                "sequence",
                "length"
            ],
            "attributes": null,
            "doc": "Return non-nil if SEQUENCE is shorter than LENGTH.\nSee `length' for allowed values of SEQUENCE and how elements are\ncounted.",
            "fnname": "Flength_less",
            "intspec": "0",
            "lname": "length<",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Slength_less"
        },
        {
            "args": [
                "sequence",
                "length"
            ],
            "attributes": null,
            "doc": "Return non-nil if SEQUENCE has length equal to LENGTH.\nSee `length' for allowed values of SEQUENCE and how elements are\ncounted.",
            "fnname": "Flength_equal",
            "intspec": "0",
            "lname": "length=",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Slength_equal"
        },
        {
            "args": [
                "sequence",
                "length"
            ],
            "attributes": null,
            "doc": "Return non-nil if SEQUENCE is longer than LENGTH.\nSee `length' for allowed values of SEQUENCE and how elements are\ncounted.",
            "fnname": "Flength_greater",
            "intspec": "0",
            "lname": "length>",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Slength_greater"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Bind variables according to VARLIST then eval BODY.\nThe value of the last form in BODY is returned.\nEach element of VARLIST is a symbol (which is bound to nil)\nor a list (SYMBOL VALUEFORM) (which binds SYMBOL to the value of VALUEFORM).\nAll the VALUEFORMs are evalled before any symbols are bound.\nusage: (let VARLIST BODY...)",
            "fnname": "Flet",
            "intspec": "0",
            "lname": "let",
            "maxargs": -2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Slet"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Bind variables according to VARLIST then eval BODY.\nThe value of the last form in BODY is returned.\nEach element of VARLIST is a symbol (which is bound to nil)\nor a list (SYMBOL VALUEFORM) (which binds SYMBOL to the value of VALUEFORM).\nEach VALUEFORM can refer to the symbols already bound by this VARLIST.\nusage: (let* VARLIST BODY...)",
            "fnname": "FletX",
            "intspec": "0",
            "lname": "let*",
            "maxargs": -2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "SletX"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if libxml2 support is available in this instance of Emacs.",
            "fnname": "Flibxml_available_p",
            "intspec": "0",
            "lname": "libxml-available-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "xml.c",
            "sname": "Slibxml_available_p"
        },
        {
            "args": [
                "start",
                "end",
                "base_url",
                "discard_comments"
            ],
            "attributes": null,
            "doc": "Parse the region as an HTML document and return the parse tree.\nIf START is nil, it defaults to `point-min'.  If END is nil, it\ndefaults to `point-max'.\n\nIf BASE-URL is non-nil, it is used if and when reporting errors and\nwarnings from the underlying libxml2 library.  Currently, errors and\nwarnings from the library are suppressed, so this argument is largely\nignored.\n\nIf you want comments to be stripped, use the `xml-remove-comments'\nfunction to strip comments before calling this function.",
            "fnname": "Flibxml_parse_html_region",
            "intspec": "0",
            "lname": "libxml-parse-html-region",
            "maxargs": 4,
            "minargs": 0,
            "path": "xml.c",
            "sname": "Slibxml_parse_html_region"
        },
        {
            "args": [
                "start",
                "end",
                "base_url",
                "discard_comments"
            ],
            "attributes": null,
            "doc": "Parse the region as an XML document and return the parse tree.\nIf START is nil, it defaults to `point-min'.  If END is nil, it\ndefaults to `point-max'.\n\nIf BASE-URL is non-nil, it is used if and when reporting errors and\nwarnings from the underlying libxml2 library.  Currently, errors and\nwarnings from the library are suppressed, so this argument is largely\nignored.\n\nIf you want comments to be stripped, use the `xml-remove-comments'\nfunction to strip comments before calling this function.",
            "fnname": "Flibxml_parse_xml_region",
            "intspec": "0",
            "lname": "libxml-parse-xml-region",
            "maxargs": 4,
            "minargs": 0,
            "path": "xml.c",
            "sname": "Slibxml_parse_xml_region"
        },
        {
            "args": [
                "n"
            ],
            "attributes": null,
            "doc": "Return the position of the first character in the current line/field.\nThis function is like `pos-bol' (which see), but respects fields.\n\nThis function constrains the returned position to the current field\nunless that position would be on a different line from the original,\nunconstrained result.  If N is nil or 1, and a front-sticky field\nstarts at point, the scan stops as soon as it starts.  To ignore field\nboundaries, bind `inhibit-field-text-motion' to t.\n\nThis function does not move point.",
            "fnname": "Fline_beginning_position",
            "intspec": "0",
            "lname": "line-beginning-position",
            "maxargs": 1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sline_beginning_position"
        },
        {
            "args": [
                "n"
            ],
            "attributes": null,
            "doc": "Return the position of the last character in the current line/field.\nWith argument N not nil or 1, move forward N - 1 lines first.\nIf scan reaches end of buffer, return that position.\n\nThis function is like `pos-eol' (which see), but respects fields.\n\nThis function constrains the returned position to the current field\nunless that would be on a different line from the original,\nunconstrained result.  If N is nil or 1, and a rear-sticky field ends\nat point, the scan stops as soon as it starts.  To ignore field\nboundaries bind `inhibit-field-text-motion' to t.\n\nThis function does not move point.",
            "fnname": "Fline_end_position",
            "intspec": "0",
            "lname": "line-end-position",
            "maxargs": 1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sline_end_position"
        },
        {
            "args": [
                "position",
                "absolute"
            ],
            "attributes": null,
            "doc": "Return the line number at POSITION in the current buffer.\nIf POSITION is nil or omitted, it defaults to point's position in the\ncurrent buffer.\n\nIf the buffer is narrowed, the return value by default counts the lines\nfrom the beginning of the accessible portion of the buffer.  But if the\nsecond optional argument ABSOLUTE is non-nil, the value counts the lines\nfrom the absolute start of the buffer, disregarding the narrowing.",
            "fnname": "Fline_number_at_pos",
            "intspec": "0",
            "lname": "line-number-at-pos",
            "maxargs": 2,
            "minargs": 0,
            "path": "fns.c",
            "sname": "Sline_number_at_pos"
        },
        {
            "args": [
                "pixelwise"
            ],
            "attributes": null,
            "doc": "Return the width used for displaying line numbers in the selected window.\nIf optional argument PIXELWISE is the symbol `columns', return the width\nin units of the frame's canonical character width.  In this case, the\nvalue is a float.\nIf optional argument PIXELWISE is t or any other non-nil value, return\nthe width as an integer number of pixels.\nOtherwise return the value as an integer number of columns of the face\nused to display line numbers, `line-number'.  Note that in the latter\ncase, the value doesn't include the 2 columns used for padding the\nnumbers on display.",
            "fnname": "Fline_number_display_width",
            "intspec": "0",
            "lname": "line-number-display-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "indent.c",
            "sname": "Sline_number_display_width"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return height in pixels of text line in the selected window.\n\nValue is the height in pixels of the line at point.",
            "fnname": "Fline_pixel_height",
            "intspec": "0",
            "lname": "line-pixel-height",
            "maxargs": 0,
            "minargs": 0,
            "path": "xdisp.c",
            "sname": "Sline_pixel_height"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a newly created list with specified arguments as elements.\nAllows any number of arguments, including zero.\nusage: (list &rest OBJECTS)",
            "fnname": "Flist",
            "intspec": "0",
            "lname": "list",
            "maxargs": -1,
            "minargs": 0,
            "path": "alloc.c",
            "sname": "Slist"
        },
        {
            "args": [
                "font_spec",
                "frame",
                "num",
                "prefer"
            ],
            "attributes": null,
            "doc": "List available fonts matching FONT-SPEC on the current frame.\nOptional 2nd argument FRAME specifies the target frame.\nOptional 3rd argument NUM, if non-nil, limits the number of returned fonts.\nOptional 4th argument PREFER, if non-nil, is a font-spec to\ncontrol the order of the returned list.  Fonts are sorted by\nhow close they are to PREFER.",
            "fnname": "Flist_fonts",
            "intspec": "0",
            "lname": "list-fonts",
            "maxargs": 4,
            "minargs": 1,
            "path": "font.c",
            "sname": "Slist_fonts"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of numerical process IDs of all running processes.\nIf this functionality is unsupported, return nil.\nIf `default-directory' is remote, return process IDs of the respective remote host.\n\nSee `process-attributes' for getting attributes of a process given its ID.",
            "fnname": "Flist_system_processes",
            "intspec": "0",
            "lname": "list-system-processes",
            "maxargs": 0,
            "minargs": 0,
            "path": "process.c",
            "sname": "Slist_system_processes"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is a list, that is, a cons cell or nil.\nOtherwise, return nil.",
            "fnname": "Flistp",
            "intspec": "0",
            "lname": "listp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Slistp"
        },
        {
            "args": [
                "file",
                "noerror",
                "nomessage",
                "nosuffix",
                "must_suffix"
            ],
            "attributes": null,
            "doc": "Execute a file of Lisp code named FILE.\nFirst try FILE with `.elc' appended, then try with `.el', then try\nwith a system-dependent suffix of dynamic modules (see `load-suffixes'),\nthen try FILE unmodified (the exact suffixes in the exact order are\ndetermined by `load-suffixes').  Environment variable references in\nFILE are replaced with their values by calling `substitute-in-file-name'.\nThis function searches the directories in `load-path'.\n\nIf optional second arg NOERROR is non-nil,\nreport no error if FILE doesn't exist.\nPrint messages at start and end of loading unless\noptional third arg NOMESSAGE is non-nil (but `force-load-messages'\noverrides that).\nIf optional fourth arg NOSUFFIX is non-nil, don't try adding\nsuffixes to the specified name FILE.\nIf optional fifth arg MUST-SUFFIX is non-nil, insist on\nthe suffix `.elc' or `.el' or the module suffix; don't accept just\nFILE unless it ends in one of those suffixes or includes a directory name.\n\nIf NOSUFFIX is nil, then if a file could not be found, try looking for\na different representation of the file by adding non-empty suffixes to\nits name, before trying another file.  Emacs uses this feature to find\ncompressed versions of files when Auto Compression mode is enabled.\nIf NOSUFFIX is non-nil, disable this feature.\n\nThe suffixes that this function tries out, when NOSUFFIX is nil, are\ngiven by the return value of `get-load-suffixes' and the values listed\nin `load-file-rep-suffixes'.  If MUST-SUFFIX is non-nil, only the\nreturn value of `get-load-suffixes' is used, i.e. the file name is\nrequired to have a non-empty suffix.\n\nWhen searching suffixes, this function normally stops at the first\none that exists.  If the option `load-prefer-newer' is non-nil,\nhowever, it tries all suffixes, and uses whichever file is the newest.\n\nLoading a file records its definitions, and its `provide' and\n`require' calls, in an element of `load-history' whose\ncar is the file name loaded.  See `load-history'.\n\nWhile the file is in the process of being loaded, the variable\n`load-in-progress' is non-nil and the variable `load-file-name'\nis bound to the file's name.\n\nReturn t if the file exists and loads successfully.",
            "fnname": "Fload",
            "intspec": "0",
            "lname": "load",
            "maxargs": 5,
            "minargs": 1,
            "path": "lread.c",
            "sname": "Sload"
        },
        {
            "args": [
                "use_floats"
            ],
            "attributes": null,
            "doc": "Return list of 1 minute, 5 minute and 15 minute load averages.\n\nEach of the three load averages is multiplied by 100, then converted\nto integer.\n\nWhen USE-FLOATS is non-nil, floats will be used instead of integers.\nThese floats are not multiplied by 100.\n\nIf the 5-minute or 15-minute load averages are not available, return a\nshortened list, containing only those averages which are available.\n\nAn error is thrown if the load average can't be obtained.  In some\ncases making it work would require Emacs being installed setuid or\nsetgid so that it can read kernel information, and that usually isn't\nadvisable.",
            "fnname": "Fload_average",
            "intspec": "0",
            "lname": "load-average",
            "maxargs": 1,
            "minargs": 0,
            "path": "fns.c",
            "sname": "Sload_average"
        },
        {
            "args": [
                "variable",
                "buffer"
            ],
            "attributes": null,
            "doc": "Non-nil if VARIABLE is local in buffer BUFFER when set there.\nBUFFER defaults to the current buffer.\n\nMore precisely, return non-nil if either VARIABLE already has a local\nvalue in BUFFER, or if VARIABLE is automatically buffer-local (see\n`make-variable-buffer-local').",
            "fnname": "Flocal_variable_if_set_p",
            "intspec": "0",
            "lname": "local-variable-if-set-p",
            "maxargs": 2,
            "minargs": 1,
            "path": "data.c",
            "sname": "Slocal_variable_if_set_p"
        },
        {
            "args": [
                "variable",
                "buffer"
            ],
            "attributes": null,
            "doc": "Non-nil if VARIABLE has a local binding in buffer BUFFER.\nBUFFER defaults to the current buffer.\n\nAlso see `buffer-local-boundp'.",
            "fnname": "Flocal_variable_p",
            "intspec": "0",
            "lname": "local-variable-p",
            "maxargs": 2,
            "minargs": 1,
            "path": "data.c",
            "sname": "Slocal_variable_p"
        },
        {
            "args": [
                "item"
            ],
            "attributes": null,
            "doc": "Access locale data ITEM for the current C locale, if available.\nITEM should be one of the following:\n\n`codeset', returning the character set as a string (locale item CODESET);\n\n`days', returning a 7-element vector of day names (locale items DAY_n);\n\n`months', returning a 12-element vector of month names (locale items MON_n);\n\n`paper', returning a list of 2 integers (WIDTH HEIGHT) for the default\n  paper size, both measured in millimeters (locale items _NL_PAPER_WIDTH,\n  _NL_PAPER_HEIGHT).\n\nIf the system can't provide such information through a call to\n`nl_langinfo', or if ITEM isn't from the list above, return nil.\n\nSee also Info node `(libc)Locales'.\n\nThe data read from the system are decoded using `locale-coding-system'.",
            "fnname": "Flocale_info",
            "intspec": "0",
            "lname": "locale-info",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Slocale_info"
        },
        {
            "args": [
                "filename",
                "path",
                "suffixes",
                "predicate"
            ],
            "attributes": null,
            "doc": "Search for FILENAME through PATH.\nReturns the file's name in absolute form, or nil if not found.\nIf SUFFIXES is non-nil, it should be a list of suffixes to append to\nfile name when searching.\nIf non-nil, PREDICATE is used instead of `file-readable-p'.\nPREDICATE can also be an integer to pass to the faccessat(2) function,\nin which case file-name-handlers are ignored.\nThis function will normally skip directories, so if you want it to find\ndirectories, make sure the PREDICATE function returns `dir-ok' for them.",
            "fnname": "Flocate_file_internal",
            "intspec": "0",
            "lname": "locate-file-internal",
            "maxargs": 4,
            "minargs": 2,
            "path": "lread.c",
            "sname": "Slocate_file_internal"
        },
        {
            "args": [
                "file"
            ],
            "attributes": null,
            "doc": "Lock FILE, if current buffer is modified.\nFILE defaults to current buffer's visited file,\nor else nothing is done if current buffer isn't visiting a file.\n\nIf the option `create-lockfiles' is nil, this does nothing.",
            "fnname": "Flock_buffer",
            "intspec": "0",
            "lname": "lock-buffer",
            "maxargs": 1,
            "minargs": 0,
            "path": "filelock.c",
            "sname": "Slock_buffer"
        },
        {
            "args": [
                "file"
            ],
            "attributes": null,
            "doc": "Lock FILE.\nIf the option `create-lockfiles' is nil, this does nothing.",
            "fnname": "Flock_file",
            "intspec": "0",
            "lname": "lock-file",
            "maxargs": 1,
            "minargs": 1,
            "path": "filelock.c",
            "sname": "Slock_file"
        },
        {
            "args": [
                "arg",
                "base"
            ],
            "attributes": null,
            "doc": "Return the natural logarithm of ARG.\nIf the optional argument BASE is given, return log ARG using that base.",
            "fnname": "Flog",
            "intspec": "0",
            "lname": "log",
            "maxargs": 2,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Slog"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return bitwise-and of all the arguments.\nArguments may be integers, or markers converted to integers.\nusage: (logand &rest INTS-OR-MARKERS)",
            "fnname": "Flogand",
            "intspec": "0",
            "lname": "logand",
            "maxargs": -1,
            "minargs": 0,
            "path": "data.c",
            "sname": "Slogand"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Returns largest integer <= the base 2 log of the magnitude of ARG.\nThis is the same as the exponent of a float.",
            "fnname": "Flogb",
            "intspec": "0",
            "lname": "logb",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Slogb"
        },
        {
            "args": [
                "value"
            ],
            "attributes": null,
            "doc": "Return population count of VALUE.\nThis is the number of one bits in the two's complement representation\nof VALUE.  If VALUE is negative, return the number of zero bits in the\nrepresentation.",
            "fnname": "Flogcount",
            "intspec": "0",
            "lname": "logcount",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Slogcount"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return bitwise-or of all the arguments.\nArguments may be integers, or markers converted to integers.\nusage: (logior &rest INTS-OR-MARKERS)",
            "fnname": "Flogior",
            "intspec": "0",
            "lname": "logior",
            "maxargs": -1,
            "minargs": 0,
            "path": "data.c",
            "sname": "Slogior"
        },
        {
            "args": [
                "number"
            ],
            "attributes": null,
            "doc": "Return the bitwise complement of NUMBER.  NUMBER must be an integer.",
            "fnname": "Flognot",
            "intspec": "0",
            "lname": "lognot",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Slognot"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return bitwise-exclusive-or of all the arguments.\nArguments may be integers, or markers converted to integers.\nusage: (logxor &rest INTS-OR-MARKERS)",
            "fnname": "Flogxor",
            "intspec": "0",
            "lname": "logxor",
            "maxargs": -1,
            "minargs": 0,
            "path": "data.c",
            "sname": "Slogxor"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return non-nil if long-line optimizations are in effect in current buffer.\nSee `long-line-threshold' and `large-hscroll-threshold' for what these\noptimizations mean and when they are in effect.",
            "fnname": "Flong_line_optimizations_p",
            "intspec": "0",
            "lname": "long-line-optimizations-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "xdisp.c",
            "sname": "Slong_line_optimizations_p"
        },
        {
            "args": [
                "regexp",
                "inhibit_modify"
            ],
            "attributes": null,
            "doc": "Return t if text after point matches regular expression REGEXP.\nBy default, this function modifies the match data that\n`match-beginning', `match-end' and `match-data' access.  If\nINHIBIT-MODIFY is non-nil, don't modify the match data.",
            "fnname": "Flooking_at",
            "intspec": "0",
            "lname": "looking-at",
            "maxargs": 2,
            "minargs": 1,
            "path": "search.c",
            "sname": "Slooking_at"
        },
        {
            "args": [
                "spec"
            ],
            "attributes": null,
            "doc": "",
            "fnname": "Flookup_image",
            "intspec": "0",
            "lname": "lookup-image",
            "maxargs": 1,
            "minargs": 1,
            "path": "image.c",
            "sname": "Slookup_image"
        },
        {
            "args": [
                "map",
                "x",
                "y"
            ],
            "attributes": null,
            "doc": "Lookup in image map MAP coordinates X and Y.\nAn image map is an alist where each element has the format (AREA ID PLIST).\nAn AREA is specified as either a rectangle, a circle, or a polygon:\nA rectangle is a cons (rect . ((x0 . y0) . (x1 . y1))) specifying the\npixel coordinates of the upper left and bottom right corners.\nA circle is a cons (circle . ((x0 . y0) . r)) specifying the center\nand the radius of the circle; r may be a float or integer.\nA polygon is a cons (poly . [x0 y0 x1 y1 ...]) where each pair in the\nvector describes one corner in the polygon.\nReturns the alist element for the first matching AREA in MAP.",
            "fnname": "Flookup_image_map",
            "intspec": "0",
            "lname": "lookup-image-map",
            "maxargs": 3,
            "minargs": 3,
            "path": "xdisp.c",
            "sname": "Slookup_image_map"
        },
        {
            "args": [
                "keymap",
                "key",
                "accept_default"
            ],
            "attributes": null,
            "doc": "Look up key sequence KEY in KEYMAP.  Return the definition.\nThis is a legacy function; see `keymap-lookup' for the recommended\nfunction to use instead.\n\nA value of nil means undefined.  See doc of `define-key'\nfor kinds of definitions.\n\nA number as value means KEY is \"too long\";\nthat is, characters or symbols in it except for the last one\nfail to be a valid sequence of prefix characters in KEYMAP.\nThe number is how many characters at the front of KEY\nit takes to reach a non-prefix key.\nKEYMAP can also be a list of keymaps.\n\nNormally, `lookup-key' ignores bindings for t, which act as default\nbindings, used when nothing else in the keymap applies; this makes it\nusable as a general function for probing keymaps.  However, if the\nthird optional argument ACCEPT-DEFAULT is non-nil, `lookup-key' will\nrecognize the default bindings, just as `read-key-sequence' does.",
            "fnname": "Flookup_key",
            "intspec": "0",
            "lname": "lookup-key",
            "maxargs": 3,
            "minargs": 2,
            "path": "keymap.c",
            "sname": "Slookup_key"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return or set the maximum number of keystrokes to save.\nIf called with a non-nil ARG, set the limit to ARG and return it.\nOtherwise, return the current limit.\n\nThe saved keystrokes are shown by `view-lossage'.",
            "fnname": "Flossage_size",
            "intspec": "(list (read-number \"Set maximum keystrokes to: \" (lossage-size)))",
            "lname": "lossage-size",
            "maxargs": 1,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Slossage_size"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Send FRAME to the back, so it is occluded by any frames that overlap it.\nIf you don't specify a frame, the selected frame is used.\nIf Emacs is displaying on an ordinary terminal or some other device which\ndoesn't support multiple overlapping frames, this function does nothing.",
            "fnname": "Flower_frame",
            "intspec": "",
            "lname": "lower-frame",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Slower_frame"
        },
        {
            "args": [
                "object",
                "placeholder",
                "completed"
            ],
            "attributes": null,
            "doc": "In OBJECT, replace every occurrence of PLACEHOLDER with OBJECT.\nCOMPLETED is a hash table of objects that might be circular, or is t\nif any object might be circular.",
            "fnname": "Flread__substitute_object_in_subtree",
            "intspec": "0",
            "lname": "lread--substitute-object-in-subtree",
            "maxargs": 3,
            "minargs": 3,
            "path": "lread.c",
            "sname": "Slread__substitute_object_in_subtree"
        },
        {
            "args": [
                "form",
                "environment"
            ],
            "attributes": null,
            "doc": "Return result of expanding macros at top level of FORM.\nIf FORM is not a macro call, it is returned unchanged.\nOtherwise, the macro is expanded and the expansion is considered\nin place of FORM.  When a non-macro-call results, it is returned.\n\nThe second optional arg ENVIRONMENT specifies an environment of macro\ndefinitions to shadow the loaded ones for use in file byte-compilation.",
            "fnname": "Fmacroexpand",
            "intspec": "0",
            "lname": "macroexpand",
            "maxargs": 2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Smacroexpand"
        },
        {
            "args": [
                "length",
                "init"
            ],
            "attributes": null,
            "doc": "Return a new bool-vector of length LENGTH, using INIT for each element.\nLENGTH must be a number.  INIT matters only in whether it is t or nil.",
            "fnname": "Fmake_bool_vector",
            "intspec": "0",
            "lname": "make-bool-vector",
            "maxargs": 2,
            "minargs": 2,
            "path": "alloc.c",
            "sname": "Smake_bool_vector"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Create a byte-code object with specified arguments as elements.\nThe arguments should be the ARGLIST, bytecode-string BYTE-CODE, constant\nvector CONSTANTS, maximum stack size DEPTH, (optional) DOCSTRING,\nand (optional) INTERACTIVE-SPEC.\nThe first four arguments are required; at most six have any\nsignificance.\nThe ARGLIST can be either like the one of `lambda', in which case the arguments\nwill be dynamically bound before executing the byte code, or it can be an\ninteger of the form NNNNNNNRMMMMMMM where the 7bit MMMMMMM specifies the\nminimum number of arguments, the 7-bit NNNNNNN specifies the maximum number\nof arguments (ignoring &rest) and the R bit specifies whether there is a &rest\nargument to catch the left-over arguments.  If such an integer is used, the\narguments will not be dynamically bound but will be instead pushed on the\nstack before executing the byte-code.\nusage: (make-byte-code ARGLIST BYTE-CODE CONSTANTS DEPTH &optional DOCSTRING INTERACTIVE-SPEC &rest ELEMENTS)",
            "fnname": "Fmake_byte_code",
            "intspec": "0",
            "lname": "make-byte-code",
            "maxargs": -1,
            "minargs": 4,
            "path": "alloc.c",
            "sname": "Smake_byte_code"
        },
        {
            "args": [
                "categories"
            ],
            "attributes": null,
            "doc": "Return a newly created category-set which contains CATEGORIES.\nCATEGORIES is a string of category mnemonics.\nThe value is a bool-vector which has t at the indices corresponding to\nthose categories.",
            "fnname": "Fmake_category_set",
            "intspec": "0",
            "lname": "make-category-set",
            "maxargs": 1,
            "minargs": 1,
            "path": "category.c",
            "sname": "Smake_category_set"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Construct a new and empty category table and return it.",
            "fnname": "Fmake_category_table",
            "intspec": "0",
            "lname": "make-category-table",
            "maxargs": 0,
            "minargs": 0,
            "path": "category.c",
            "sname": "Smake_category_table"
        },
        {
            "args": [
                "charset",
                "code1",
                "code2",
                "code3",
                "code4"
            ],
            "attributes": null,
            "doc": "Return a character of CHARSET whose position codes are CODEn.\n\nCODE1 through CODE4 are optional, but if you don't supply sufficient\nposition codes, it is assumed that the minimum code in each dimension\nis specified.",
            "fnname": "Fmake_char",
            "intspec": "0",
            "lname": "make-char",
            "maxargs": 5,
            "minargs": 1,
            "path": "charset.c",
            "sname": "Smake_char"
        },
        {
            "args": [
                "purpose",
                "init"
            ],
            "attributes": null,
            "doc": "Return a newly created char-table, with purpose PURPOSE.\nEach element is initialized to INIT, which defaults to nil.\n\nPURPOSE should be a symbol.  If it has a `char-table-extra-slots'\nproperty, the property's value should be an integer between 0 and 10\nthat specifies how many extra slots the char-table has.  Otherwise,\nthe char-table has no extra slot.",
            "fnname": "Fmake_char_table",
            "intspec": "0",
            "lname": "make-char-table",
            "maxargs": 2,
            "minargs": 1,
            "path": "chartab.c",
            "sname": "Smake_char_table"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Create a byte-code closure from PROTOTYPE and CLOSURE-VARS.\nReturn a copy of PROTOTYPE, a byte-code object, with CLOSURE-VARS\nreplacing the elements in the beginning of the constant-vector.\nusage: (make-closure PROTOTYPE &rest CLOSURE-VARS)",
            "fnname": "Fmake_closure",
            "intspec": "0",
            "lname": "make-closure",
            "maxargs": -1,
            "minargs": 1,
            "path": "alloc.c",
            "sname": "Smake_closure"
        },
        {
            "args": [
                "mutex",
                "name"
            ],
            "attributes": null,
            "doc": "Make a condition variable associated with MUTEX.\nA condition variable provides a way for a thread to sleep while\nwaiting for a state change.\n\nMUTEX is the mutex associated with this condition variable.\nNAME, if given, is the name of this condition variable.  The name is\ninformational only.",
            "fnname": "Fmake_condition_variable",
            "intspec": "0",
            "lname": "make-condition-variable",
            "maxargs": 2,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Smake_condition_variable"
        },
        {
            "args": [
                "directory"
            ],
            "attributes": null,
            "doc": "Create a new directory named DIRECTORY.",
            "fnname": "Fmake_directory_internal",
            "intspec": "0",
            "lname": "make-directory-internal",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Smake_directory_internal"
        },
        {
            "args": [
                "function"
            ],
            "attributes": null,
            "doc": "Make a finalizer that will run FUNCTION.\nFUNCTION will be called after garbage collection when the returned\nfinalizer object becomes unreachable.  If the finalizer object is\nreachable only through references from finalizer objects, it does not\ncount as reachable for the purpose of deciding whether to run\nFUNCTION.  FUNCTION will be run once per finalizer object.",
            "fnname": "Fmake_finalizer",
            "intspec": "0",
            "lname": "make-finalizer",
            "maxargs": 1,
            "minargs": 1,
            "path": "alloc.c",
            "sname": "Smake_finalizer"
        },
        {
            "args": [
                "frame",
                "force"
            ],
            "attributes": null,
            "doc": "Make the frame FRAME invisible.\nIf omitted, FRAME defaults to the currently selected frame.\nOn graphical displays, invisible frames are not updated and are\nusually not displayed at all, even in a window system's \\\"taskbar\\\".\n\nNormally you may not make FRAME invisible if all other frames are invisible,\nbut if the second optional argument FORCE is non-nil, you may do so.\n\nThis function has no effect on text terminal frames.  Such frames are\nalways considered visible, whether or not they are currently being\ndisplayed in the terminal.",
            "fnname": "Fmake_frame_invisible",
            "intspec": "",
            "lname": "make-frame-invisible",
            "maxargs": 2,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Smake_frame_invisible"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Make the frame FRAME visible (assuming it is an X window).\nIf omitted, FRAME defaults to the currently selected frame.",
            "fnname": "Fmake_frame_visible",
            "intspec": "",
            "lname": "make-frame-visible",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Smake_frame_visible"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Create and return a new hash table.\n\nArguments are specified as keyword/argument pairs.  The following\narguments are defined:\n\n:test TEST -- TEST must be a symbol that specifies how to compare\nkeys.  Default is `eql'.  Predefined are the tests `eq', `eql', and\n`equal'.  User-supplied test and hash functions can be specified via\n`define-hash-table-test'.\n\n:size SIZE -- A hint as to how many elements will be put in the table.\nDefault is 65.\n\n:rehash-size REHASH-SIZE - Indicates how to expand the table when it\nfills up.  If REHASH-SIZE is an integer, increase the size by that\namount.  If it is a float, it must be > 1.0, and the new size is the\nold size multiplied by that factor.  Default is 1.5.\n\n:rehash-threshold THRESHOLD -- THRESHOLD must a float > 0, and <= 1.0.\nResize the hash table when the ratio (table entries / table size)\nexceeds an approximation to THRESHOLD.  Default is 0.8125.\n\n:weakness WEAK -- WEAK must be one of nil, t, `key', `value',\n`key-or-value', or `key-and-value'.  If WEAK is not nil, the table\nreturned is a weak table.  Key/value pairs are removed from a weak\nhash table when there are no non-weak references pointing to their\nkey, value, one of key or value, or both key and value, depending on\nWEAK.  WEAK t is equivalent to `key-and-value'.  Default value of WEAK\nis nil.\n\n:purecopy PURECOPY -- If PURECOPY is non-nil, the table can be copied\nto pure storage when Emacs is being dumped, making the contents of the\ntable read only. Any further changes to purified tables will result\nin an error.\n\nusage: (make-hash-table &rest KEYWORD-ARGS)",
            "fnname": "Fmake_hash_table",
            "intspec": "0",
            "lname": "make-hash-table",
            "maxargs": -1,
            "minargs": 0,
            "path": "fns.c",
            "sname": "Smake_hash_table"
        },
        {
            "args": [
                "base_buffer",
                "name",
                "clone",
                "inhibit_buffer_hooks"
            ],
            "attributes": null,
            "doc": "Create and return an indirect buffer for buffer BASE-BUFFER, named NAME.\nBASE-BUFFER should be a live buffer, or the name of an existing buffer.\n\nNAME should be a string which is not the name of an existing buffer.\nOptional argument CLONE non-nil means preserve BASE-BUFFER's state,\nsuch as major and minor modes, in the indirect buffer.\n\nCLONE nil means the indirect buffer's state is reset to default values.\n\nIf optional argument INHIBIT-BUFFER-HOOKS is non-nil, the new buffer\ndoes not run the hooks `kill-buffer-hook',\n`kill-buffer-query-functions', and `buffer-list-update-hook'.",
            "fnname": "Fmake_indirect_buffer",
            "intspec": "bMake indirect buffer (to buffer): \nBName of indirect buffer: ",
            "lname": "make-indirect-buffer",
            "maxargs": 4,
            "minargs": 2,
            "path": "buffer.c",
            "sname": "Smake_indirect_buffer"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Construct and return a new keymap, of the form (keymap CHARTABLE . ALIST).\nCHARTABLE is a char-table that holds the bindings for all characters\nwithout modifiers.  All entries in it are initially nil, meaning\n\"command undefined\".  ALIST is an assoc-list which holds bindings for\nfunction keys, mouse events, and any other things that appear in the\ninput stream.  Initially, ALIST is nil.\n\nThe optional arg STRING supplies a menu name for the keymap\nin case you use it as a menu with `x-popup-menu'.",
            "fnname": "Fmake_keymap",
            "intspec": "0",
            "lname": "make-keymap",
            "maxargs": 1,
            "minargs": 0,
            "path": "keymap.c",
            "sname": "Smake_keymap"
        },
        {
            "args": [
                "length",
                "init"
            ],
            "attributes": null,
            "doc": "Return a newly created list of length LENGTH, with each element being INIT.",
            "fnname": "Fmake_list",
            "intspec": "0",
            "lname": "make-list",
            "maxargs": 2,
            "minargs": 2,
            "path": "alloc.c",
            "sname": "Smake_list"
        },
        {
            "args": [
                "variable"
            ],
            "attributes": null,
            "doc": "Make VARIABLE have a separate value in the current buffer.\nOther buffers will continue to share a common default value.\n\\(The buffer-local value of VARIABLE starts out as the same value\nVARIABLE previously had.  If VARIABLE was void, it remains void.)\nReturn VARIABLE.\n\nIf the variable is already arranged to become local when set,\nthis function causes a local value to exist for this buffer,\njust as setting the variable would do.\n\nThis function returns VARIABLE, and therefore\n  (set (make-local-variable \\\\='VARIABLE) VALUE-EXP)\nworks.\n\nSee also `make-variable-buffer-local'.\n\nDo not use `make-local-variable' to make a hook variable buffer-local.\nInstead, use `add-hook' and specify t for the LOCAL argument.",
            "fnname": "Fmake_local_variable",
            "intspec": "vMake Local Variable: ",
            "lname": "make-local-variable",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Smake_local_variable"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a newly allocated marker which does not point at any place.",
            "fnname": "Fmake_marker",
            "intspec": "0",
            "lname": "make-marker",
            "maxargs": 0,
            "minargs": 0,
            "path": "alloc.c",
            "sname": "Smake_marker"
        },
        {
            "args": [
                "name"
            ],
            "attributes": null,
            "doc": "Create a mutex.\nA mutex provides a synchronization point for threads.\nOnly one thread at a time can hold a mutex.  Other threads attempting\nto acquire it will block until the mutex is available.\n\nA thread can acquire a mutex any number of times.\n\nNAME, if given, is used as the name of the mutex.  The name is\ninformational only.",
            "fnname": "Fmake_mutex",
            "intspec": "0",
            "lname": "make-mutex",
            "maxargs": 1,
            "minargs": 0,
            "path": "thread.c",
            "sname": "Smake_mutex"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Create and return a network server or client process.\n\nIn Emacs, network connections are represented by process objects, so\ninput and output work as for subprocesses and `delete-process' closes\na network connection.  However, a network process has no process id,\nit cannot be signaled, and the status codes are different from normal\nprocesses.\n\nArguments are specified as keyword/argument pairs.  The following\narguments are defined:\n\n:name NAME -- NAME is name for process.  It is modified if necessary\nto make it unique.\n\n:buffer BUFFER -- BUFFER is the buffer (or buffer-name) to associate\nwith the process.  Process output goes at end of that buffer, unless\nyou specify a filter function to handle the output.  BUFFER may be\nalso nil, meaning that this process is not associated with any buffer.\n\n:host HOST -- HOST is name of the host to connect to, or its IP\naddress.  The symbol `local' specifies the local host.  If specified\nfor a server process, it must be a valid name or address for the local\nhost, and only clients connecting to that address will be accepted.\nIf all interfaces should be bound, an address of \\\"0.0.0.0\\\" (for\nIPv4) or \\\"::\\\" (for IPv6) can be used.  (On some operating systems,\nusing \\\"::\\\" listens on both IPv4 and IPv6.)  `local' will use IPv4 by\ndefault, use a FAMILY of `ipv6' to override this.\n\n:service SERVICE -- SERVICE is name of the service desired, or an\ninteger specifying a port number to connect to.  If SERVICE is t,\na random port number is selected for the server.  A port number can\nbe specified as an integer string, e.g., \"80\", as well as an integer.\n\n:type TYPE -- TYPE is the type of connection.  The default (nil) is a\nstream type connection, `datagram' creates a datagram type connection,\n`seqpacket' creates a reliable datagram connection.\n\n:family FAMILY -- FAMILY is the address (and protocol) family for the\nservice specified by HOST and SERVICE.  The default (nil) is to use\nwhatever address family (IPv4 or IPv6) that is defined for the host\nand port number specified by HOST and SERVICE.  Other address families\nsupported are:\n  local -- for a local (i.e. UNIX) address specified by SERVICE.\n  ipv4  -- use IPv4 address family only.\n  ipv6  -- use IPv6 address family only.\n\n:local ADDRESS -- ADDRESS is the local address used for the connection.\nThis parameter is ignored when opening a client process. When specified\nfor a server process, the FAMILY, HOST and SERVICE args are ignored.\n\n:remote ADDRESS -- ADDRESS is the remote partner's address for the\nconnection.  This parameter is ignored when opening a stream server\nprocess.  For a datagram server process, it specifies the initial\nsetting of the remote datagram address.  When specified for a client\nprocess, the FAMILY, HOST, and SERVICE args are ignored.\n\nThe format of ADDRESS depends on the address family:\n- An IPv4 address is represented as a vector of integers [A B C D P]\ncorresponding to numeric IP address A.B.C.D and port number P.\n- An IPv6 address has the same format as an IPv4 address but with 9\nelements rather than 5.\n- A local address is represented as a string with the address in the\nlocal address space.\n- An \"unsupported family\" address is represented by a cons (F . AV)\nwhere F is the family number and AV is a vector containing the socket\naddress data with one element per address data byte.  Do not rely on\nthis format in portable code, as it may depend on implementation\ndefined constants, data sizes, and data structure alignment.\n\n:coding CODING -- If CODING is a symbol, it specifies the coding\nsystem used for both reading and writing for this process.  If CODING\nis a cons (DECODING . ENCODING), DECODING is used for reading, and\nENCODING is used for writing.\n\n:nowait BOOL -- If NOWAIT is non-nil for a stream type client\nprocess, return without waiting for the connection to complete;\ninstead, the sentinel function will be called with second arg matching\n\"open\" (if successful) or \"failed\" when the connect completes.\nDefault is to use a blocking connect (i.e. wait) for stream type\nconnections.\n\n:noquery BOOL -- Query the user unless BOOL is non-nil, and process is\nrunning when Emacs is exited.\n\n:stop BOOL -- Start process in the `stopped' state if BOOL non-nil.\nIn the stopped state, a server process does not accept new\nconnections, and a client process does not handle incoming traffic.\nThe stopped state is cleared by `continue-process' and set by\n`stop-process'.\n\n:filter FILTER -- Install FILTER as the process filter.\n\n:filter-multibyte BOOL -- If BOOL is non-nil, strings given to the\nprocess filter are multibyte, otherwise they are unibyte.\nIf this keyword is not specified, the strings are multibyte.\n\n:sentinel SENTINEL -- Install SENTINEL as the process sentinel.\n\n:log LOG -- Install LOG as the server process log function.  This\nfunction is called when the server accepts a network connection from a\nclient.  The arguments are SERVER, CLIENT, and MESSAGE, where SERVER\nis the server process, CLIENT is the new process for the connection,\nand MESSAGE is a string.\n\n:plist PLIST -- Install PLIST as the new process's initial plist.\n\n:tls-parameters LIST -- is a list that should be supplied if you're\nopening a TLS connection.  The first element is the TLS type (either\n`gnutls-x509pki' or `gnutls-anon'), and the remaining elements should\nbe a keyword list accepted by gnutls-boot (as returned by\n`gnutls-boot-parameters').\n\n:server QLEN -- if QLEN is non-nil, create a server process for the\nspecified FAMILY, SERVICE, and connection type (stream or datagram).\nIf QLEN is an integer, it is used as the max. length of the server's\npending connection queue (also known as the backlog); the default\nqueue length is 5.  Default is to create a client process.\n\nThe following network options can be specified for this connection:\n\n:broadcast BOOL    -- Allow send and receive of datagram broadcasts.\n:dontroute BOOL    -- Only send to directly connected hosts.\n:keepalive BOOL    -- Send keep-alive messages on network stream.\n:linger BOOL or TIMEOUT -- Send queued messages before closing.\n:oobinline BOOL    -- Place out-of-band data in receive data stream.\n:priority INT      -- Set protocol defined priority for sent packets.\n:reuseaddr BOOL    -- Allow reusing a recently used local address\n                      (this is allowed by default for a server process).\n:bindtodevice NAME -- bind to interface NAME.  Using this may require\n                      special privileges on some systems.\n:use-external-socket BOOL -- Use any pre-allocated sockets that have\n                             been passed to Emacs.  If Emacs wasn't\n                             passed a socket, this option is silently\n                             ignored.\n\n\nConsult the relevant system programmer's manual pages for more\ninformation on using these options.\n\n\nA server process will listen for and accept connections from clients.\nWhen a client connection is accepted, a new network process is created\nfor the connection with the following parameters:\n\n- The client's process name is constructed by concatenating the server\nprocess's NAME and a client identification string.\n- If the FILTER argument is non-nil, the client process will not get a\nseparate process buffer; otherwise, the client's process buffer is a newly\ncreated buffer named after the server process's BUFFER name or process\nNAME concatenated with the client identification string.\n- The connection type and the process filter and sentinel parameters are\ninherited from the server process's TYPE, FILTER and SENTINEL.\n- The client process's contact info is set according to the client's\naddressing information (typically an IP address and a port number).\n- The client process's plist is initialized from the server's plist.\n\nNotice that the FILTER and SENTINEL args are never used directly by\nthe server process.  Also, the BUFFER argument is not used directly by\nthe server process, but via the optional :log function, accepted (and\nfailed) connections may be logged in the server process's buffer.\n\nThe original argument list, modified with the actual connection\ninformation, is available via the `process-contact' function.\n\nusage: (make-network-process &rest ARGS)",
            "fnname": "Fmake_network_process",
            "intspec": "0",
            "lname": "make-network-process",
            "maxargs": -1,
            "minargs": 0,
            "path": "process.c",
            "sname": "Smake_network_process"
        },
        {
            "args": [
                "beg",
                "end",
                "buffer",
                "front_advance",
                "rear_advance"
            ],
            "attributes": null,
            "doc": "Create a new overlay with range BEG to END in BUFFER and return it.\nIf omitted, BUFFER defaults to the current buffer.\nBEG and END may be integers or markers.\nThe fourth arg FRONT-ADVANCE, if non-nil, makes the marker\nfor the front of the overlay advance when text is inserted there\n\\(which means the text *is not* included in the overlay).\nThe fifth arg REAR-ADVANCE, if non-nil, makes the marker\nfor the rear of the overlay advance when text is inserted there\n\\(which means the text *is* included in the overlay).",
            "fnname": "Fmake_overlay",
            "intspec": "0",
            "lname": "make-overlay",
            "maxargs": 5,
            "minargs": 2,
            "path": "buffer.c",
            "sname": "Smake_overlay"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Create and return a bidirectional pipe process.\n\nIn Emacs, pipes are represented by process objects, so input and\noutput work as for subprocesses, and `delete-process' closes a pipe.\nHowever, a pipe process has no process id, it cannot be signaled,\nand the status codes are different from normal processes.\n\nArguments are specified as keyword/argument pairs.  The following\narguments are defined:\n\n:name NAME -- NAME is the name of the process.  It is modified if necessary to make it unique.\n\n:buffer BUFFER -- BUFFER is the buffer (or buffer-name) to associate\nwith the process.  Process output goes at the end of that buffer,\nunless you specify a filter function to handle the output.  If BUFFER\nis not given, the value of NAME is used.\n\n:coding CODING -- If CODING is a symbol, it specifies the coding\nsystem used for both reading and writing for this process.  If CODING\nis a cons (DECODING . ENCODING), DECODING is used for reading, and\nENCODING is used for writing.\n\n:noquery BOOL -- When exiting Emacs, query the user if BOOL is nil and\nthe process is running.  If BOOL is not given, query before exiting.\n\n:stop BOOL -- Start process in the `stopped' state if BOOL non-nil.\nIn the stopped state, a pipe process does not accept incoming data,\nbut you can send outgoing data.  The stopped state is cleared by\n`continue-process' and set by `stop-process'.\n\n:filter FILTER -- Install FILTER as the process filter.\n\n:sentinel SENTINEL -- Install SENTINEL as the process sentinel.\n\nusage:  (make-pipe-process &rest ARGS)",
            "fnname": "Fmake_pipe_process",
            "intspec": "0",
            "lname": "make-pipe-process",
            "maxargs": -1,
            "minargs": 0,
            "path": "process.c",
            "sname": "Smake_pipe_process"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Start a program in a subprocess.  Return the process object for it.\n\nThis is similar to `start-process', but arguments are specified as\nkeyword/argument pairs.  The following arguments are defined:\n\n:name NAME -- NAME is name for process.  It is modified if necessary\nto make it unique.\n\n:buffer BUFFER -- BUFFER is the buffer (or buffer-name) to associate\nwith the process.  Process output goes at end of that buffer, unless\nyou specify a filter function to handle the output.  BUFFER may be\nalso nil, meaning that this process is not associated with any buffer.\n\n:command COMMAND -- COMMAND is a list starting with the program file\nname, followed by strings to give to the program as arguments.  If the\nprogram file name is not an absolute file name, `make-process' will\nlook for the program file name in `exec-path' (which is a list of\ndirectories).\n\n:coding CODING -- If CODING is a symbol, it specifies the coding\nsystem used for both reading and writing for this process.  If CODING\nis a cons (DECODING . ENCODING), DECODING is used for reading, and\nENCODING is used for writing.\n\n:noquery BOOL -- When exiting Emacs, query the user if BOOL is nil and\nthe process is running.  If BOOL is not given, query before exiting.\n\n:stop BOOL -- BOOL must be nil.  The `:stop' key is ignored otherwise\nand is retained for compatibility with other process types such as\npipe processes.  Asynchronous subprocesses never start in the\n`stopped' state.  Use `stop-process' and `continue-process' to send\nsignals to stop and continue a process.\n\n:connection-type TYPE -- TYPE is control type of device used to\ncommunicate with subprocesses.  Values are `pipe' to use a pipe, `pty'\nto use a pty, or nil to use the default specified through\n`process-connection-type'.  If TYPE is a cons (INPUT . OUTPUT), then\nINPUT will be used for standard input and OUTPUT for standard output\n(and standard error if `:stderr' is nil).\n\n:filter FILTER -- Install FILTER as the process filter.\n\n:sentinel SENTINEL -- Install SENTINEL as the process sentinel.\n\n:stderr STDERR -- STDERR is either a buffer or a pipe process attached\nto the standard error of subprocess.  When specifying this, the\nsubprocess's standard error will always communicate via a pipe, no\nmatter the value of `:connection-type'.  If STDERR is nil, standard error\nis mixed with standard output and sent to BUFFER or FILTER.  (Note\nthat specifying :stderr will create a new, separate (but associated)\nprocess, with its own filter and sentinel.  See\nInfo node `(elisp) Asynchronous Processes' for more details.)\n\n:file-handler FILE-HANDLER -- If FILE-HANDLER is non-nil, then look\nfor a file name handler for the current buffer's `default-directory'\nand invoke that file name handler to make the process.  If there is no\nsuch handler, proceed as if FILE-HANDLER were nil.\n\nusage: (make-process &rest ARGS)",
            "fnname": "Fmake_process",
            "intspec": "0",
            "lname": "make-process",
            "maxargs": -1,
            "minargs": 0,
            "path": "process.c",
            "sname": "Smake_process"
        },
        {
            "args": [
                "type",
                "slots",
                "init"
            ],
            "attributes": null,
            "doc": "Create a new record.\nTYPE is its type as returned by `type-of'; it should be either a\nsymbol or a type descriptor.  SLOTS is the number of non-type slots,\neach initialized to INIT.",
            "fnname": "Fmake_record",
            "intspec": "0",
            "lname": "make-record",
            "maxargs": 3,
            "minargs": 3,
            "path": "alloc.c",
            "sname": "Smake_record"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Create and return a serial port process.\n\nIn Emacs, serial port connections are represented by process objects,\nso input and output work as for subprocesses, and `delete-process'\ncloses a serial port connection.  However, a serial process has no\nprocess id, it cannot be signaled, and the status codes are different\nfrom normal processes.\n\n`make-serial-process' creates a process and a buffer, on which you\nprobably want to use `process-send-string'.  Try \\\\[serial-term] for\nan interactive terminal.  See below for examples.\n\nArguments are specified as keyword/argument pairs.  The following\narguments are defined:\n\n:port PORT -- (mandatory) PORT is the path or name of the serial port.\nFor example, this could be \"/dev/ttyS0\" on Unix.  On Windows, this\ncould be \"COM1\", or \"\\\\\\\\.\\\\COM10\" for ports higher than COM9 (double\nthe backslashes in strings).\n\n:speed SPEED -- (mandatory) is handled by `serial-process-configure',\nwhich this function calls.\n\n:name NAME -- NAME is the name of the process.  If NAME is not given,\nthe value of PORT is used.\n\n:buffer BUFFER -- BUFFER is the buffer (or buffer-name) to associate\nwith the process.  Process output goes at the end of that buffer,\nunless you specify a filter function to handle the output.  If BUFFER\nis not given, the value of NAME is used.\n\n:coding CODING -- If CODING is a symbol, it specifies the coding\nsystem used for both reading and writing for this process.  If CODING\nis a cons (DECODING . ENCODING), DECODING is used for reading, and\nENCODING is used for writing.\n\n:noquery BOOL -- When exiting Emacs, query the user if BOOL is nil and\nthe process is running.  If BOOL is not given, query before exiting.\n\n:stop BOOL -- Start process in the `stopped' state if BOOL is non-nil.\nIn the stopped state, a serial process does not accept incoming data,\nbut you can send outgoing data.  The stopped state is cleared by\n`continue-process' and set by `stop-process'.\n\n:filter FILTER -- Install FILTER as the process filter.\n\n:sentinel SENTINEL -- Install SENTINEL as the process sentinel.\n\n:plist PLIST -- Install PLIST as the initial plist of the process.\n\n:bytesize\n:parity\n:stopbits\n:flowcontrol\n-- This function calls `serial-process-configure' to handle these\narguments.\n\nThe original argument list, possibly modified by later configuration,\nis available via the function `process-contact'.\n\nExamples:\n\n\\(make-serial-process :port \"/dev/ttyS0\" :speed 9600)\n\n\\(make-serial-process :port \"COM1\" :speed 115200 :stopbits 2)\n\n\\(make-serial-process :port \"\\\\\\\\.\\\\COM13\" :speed 1200 :bytesize 7 :parity \\\\='odd)\n\n\\(make-serial-process :port \"/dev/tty.BlueConsole-SPP-1\" :speed nil)\n\nusage:  (make-serial-process &rest ARGS)",
            "fnname": "Fmake_serial_process",
            "intspec": "0",
            "lname": "make-serial-process",
            "maxargs": -1,
            "minargs": 0,
            "path": "process.c",
            "sname": "Smake_serial_process"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Construct and return a new sparse keymap.\nIts car is `keymap' and its cdr is an alist of (CHAR . DEFINITION),\nwhich binds the character CHAR to DEFINITION, or (SYMBOL . DEFINITION),\nwhich binds the function key or mouse event SYMBOL to DEFINITION.\nInitially the alist is nil.\n\nThe optional arg STRING supplies a menu name for the keymap\nin case you use it as a menu with `x-popup-menu'.",
            "fnname": "Fmake_sparse_keymap",
            "intspec": "0",
            "lname": "make-sparse-keymap",
            "maxargs": 1,
            "minargs": 0,
            "path": "keymap.c",
            "sname": "Smake_sparse_keymap"
        },
        {
            "args": [
                "length",
                "init",
                "multibyte"
            ],
            "attributes": null,
            "doc": "Return a newly created string of length LENGTH, with INIT in each element.\nLENGTH must be an integer.\nINIT must be an integer that represents a character.\nIf optional argument MULTIBYTE is non-nil, the result will be\na multibyte string even if INIT is an ASCII character.",
            "fnname": "Fmake_string",
            "intspec": "0",
            "lname": "make-string",
            "maxargs": 3,
            "minargs": 2,
            "path": "alloc.c",
            "sname": "Smake_string"
        },
        {
            "args": [
                "name"
            ],
            "attributes": null,
            "doc": "Return a newly allocated uninterned symbol whose name is NAME.\nIts value is void, and its function definition and property list are nil.",
            "fnname": "Fmake_symbol",
            "intspec": "0",
            "lname": "make-symbol",
            "maxargs": 1,
            "minargs": 1,
            "path": "alloc.c",
            "sname": "Smake_symbol"
        },
        {
            "args": [
                "target",
                "linkname",
                "ok_if_already_exists"
            ],
            "attributes": null,
            "doc": "Make a symbolic link to TARGET, named LINKNAME.\nIf LINKNAME is a directory name, make a like-named symbolic link under\nLINKNAME.\n\nSignal a `file-already-exists' error if a file LINKNAME already exists\nunless optional third argument OK-IF-ALREADY-EXISTS is non-nil.\nAn integer third arg means request confirmation if LINKNAME already\nexists, and expand leading \"~\" or strip leading \"/:\" in TARGET.\nThis happens for interactive use with M-x.",
            "fnname": "Fmake_symbolic_link",
            "intspec": "FMake symbolic link to file: \nGMake symbolic link to file %s: \np",
            "lname": "make-symbolic-link",
            "maxargs": 3,
            "minargs": 2,
            "path": "fileio.c",
            "sname": "Smake_symbolic_link"
        },
        {
            "args": [
                "prefix",
                "dir_flag",
                "suffix",
                "text"
            ],
            "attributes": null,
            "doc": "Generate a new file whose name starts with PREFIX, a string.\nReturn the name of the generated file.  If DIR-FLAG is zero, do not\ncreate the file, just its name.  Otherwise, if DIR-FLAG is non-nil,\ncreate an empty directory.  The file name should end in SUFFIX.\nDo not expand PREFIX; a non-absolute PREFIX is relative to the Emacs\nworking directory.  If TEXT is a string, insert it into the newly\ncreated file.\n\nSignal an error if the file could not be created.\n\nThis function does not grok magic file names.",
            "fnname": "Fmake_temp_file_internal",
            "intspec": "0",
            "lname": "make-temp-file-internal",
            "maxargs": 4,
            "minargs": 4,
            "path": "fileio.c",
            "sname": "Smake_temp_file_internal"
        },
        {
            "args": [
                "prefix"
            ],
            "attributes": null,
            "doc": "Generate temporary file name (string) starting with PREFIX (a string).\n\nThis function tries to choose a name that has no existing file.\nFor this to work, PREFIX should be an absolute file name, and PREFIX\nand the returned string should both be non-magic.\n\nThere is a race condition between calling `make-temp-name' and\nlater creating the file, which opens all kinds of security holes.\nFor that reason, you should normally use `make-temp-file' instead.",
            "fnname": "Fmake_temp_name",
            "intspec": "0",
            "lname": "make-temp-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Smake_temp_name"
        },
        {
            "args": [
                "parms"
            ],
            "attributes": null,
            "doc": "Create an additional terminal frame, possibly on another terminal.\nThis function takes one argument, an alist specifying frame parameters.\n\nYou can create multiple frames on a single text terminal, but only one\nof them (the selected terminal frame) is actually displayed.\n\nIn practice, generally you don't need to specify any parameters,\nexcept when you want to create a new frame on another terminal.\nIn that case, the `tty' parameter specifies the device file to open,\nand the `tty-type' parameter specifies the terminal type.  Example:\n\n   (make-terminal-frame \\\\='((tty . \"/dev/pts/5\") (tty-type . \"xterm\")))\n\nNote that changing the size of one terminal frame automatically\naffects all frames on the same terminal device.",
            "fnname": "Fmake_terminal_frame",
            "intspec": "0",
            "lname": "make-terminal-frame",
            "maxargs": 1,
            "minargs": 1,
            "path": "frame.c",
            "sname": "Smake_terminal_frame"
        },
        {
            "args": [
                "function",
                "name"
            ],
            "attributes": null,
            "doc": "Start a new thread and run FUNCTION in it.\nWhen the function exits, the thread dies.\nIf NAME is given, it must be a string; it names the new thread.",
            "fnname": "Fmake_thread",
            "intspec": "0",
            "lname": "make-thread",
            "maxargs": 2,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Smake_thread"
        },
        {
            "args": [
                "variable"
            ],
            "attributes": null,
            "doc": "Make VARIABLE become buffer-local whenever it is set.\nAt any time, the value for the current buffer is in effect,\nunless the variable has never been set in this buffer,\nin which case the default value is in effect.\nNote that binding the variable with `let', or setting it while\na `let'-style binding made in this buffer is in effect,\ndoes not make the variable buffer-local.  Return VARIABLE.\n\nThis globally affects all uses of this variable, so it belongs together with\nthe variable declaration, rather than with its uses (if you just want to make\na variable local to the current buffer for one particular use, use\n`make-local-variable').  Buffer-local bindings are normally cleared\nwhile setting up a new major mode, unless they have a `permanent-local'\nproperty.\n\nThe function `default-value' gets the default value and `set-default' sets it.\n\nSee also `defvar-local'.",
            "fnname": "Fmake_variable_buffer_local",
            "intspec": "vMake Variable Buffer Local: ",
            "lname": "make-variable-buffer-local",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Smake_variable_buffer_local"
        },
        {
            "args": [
                "length",
                "init"
            ],
            "attributes": null,
            "doc": "Return a newly created vector of length LENGTH, with each element being INIT.\nSee also the function `vector'.",
            "fnname": "Fmake_vector",
            "intspec": "0",
            "lname": "make-vector",
            "maxargs": 2,
            "minargs": 2,
            "path": "alloc.c",
            "sname": "Smake_vector"
        },
        {
            "args": [
                "type",
                "title",
                "width",
                "height",
                "arguments",
                "buffer",
                "related"
            ],
            "attributes": null,
            "doc": "Make an xwidget of TYPE.\nIf BUFFER is nil, use the current buffer.\nIf BUFFER is a string and no such buffer exists, create it.\nTYPE is a symbol which can take one of the following values:\n\n- webkit\n\nRELATED is nil, or an xwidget.  When constructing a WebKit widget, it\nwill share the same settings and internal subprocess as RELATED.\nReturns the newly constructed xwidget, or nil if construction\nfails.",
            "fnname": "Fmake_xwidget",
            "intspec": "0",
            "lname": "make-xwidget",
            "maxargs": 7,
            "minargs": 4,
            "path": "xwidget.c",
            "sname": "Smake_xwidget"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Empty out the value cell of SYMBOL, making it void as a variable.\nReturn SYMBOL.\n\nIf a variable is void, trying to evaluate the variable signals a\n`void-variable' error, instead of returning a value.  For more\ndetails, see Info node `(elisp) Void Variables'.\n\nSee also `fmakunbound'.",
            "fnname": "Fmakunbound",
            "intspec": "0",
            "lname": "makunbound",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Smakunbound"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Report malloc information to stderr.\nThis function outputs to stderr an XML-formatted\ndescription of the current state of the memory-allocation\narenas.",
            "fnname": "Fmalloc_info",
            "intspec": "",
            "lname": "malloc-info",
            "maxargs": 0,
            "minargs": 0,
            "path": "alloc.c",
            "sname": "Smalloc_info"
        },
        {
            "args": [
                "leave_padding"
            ],
            "attributes": null,
            "doc": "Release free heap memory to the OS.\nThis function asks libc to return unused heap memory back to the operating\nsystem.  This function isn't guaranteed to do anything, and is mainly\nmeant as a debugging tool.\n\nIf LEAVE_PADDING is given, ask the system to leave that much unused\nspace in the heap of the Emacs process.  This should be an integer, and if\nnot given, it defaults to 0.\n\nThis function returns nil if no memory could be returned to the\nsystem, and non-nil if some memory could be returned.",
            "fnname": "Fmalloc_trim",
            "intspec": "",
            "lname": "malloc-trim",
            "maxargs": 1,
            "minargs": 0,
            "path": "alloc.c",
            "sname": "Smalloc_trim"
        },
        {
            "args": [
                "function",
                "char_table"
            ],
            "attributes": null,
            "doc": "Call FUNCTION for each character in CHAR-TABLE that has non-nil value.\nFUNCTION is called with two arguments, KEY and VALUE.\nKEY is a character code or a cons of character codes specifying a\nrange of characters that have the same value.\nVALUE is what (char-table-range CHAR-TABLE KEY) returns.",
            "fnname": "Fmap_char_table",
            "intspec": "0",
            "lname": "map-char-table",
            "maxargs": 2,
            "minargs": 2,
            "path": "chartab.c",
            "sname": "Smap_char_table"
        },
        {
            "args": [
                "function",
                "charset",
                "arg",
                "from_code",
                "to_code"
            ],
            "attributes": null,
            "doc": "Call FUNCTION for all characters in CHARSET.\nOptional 3rd argument ARG is an additional argument to be passed\nto FUNCTION, see below.\nOptional 4th and 5th arguments FROM-CODE and TO-CODE specify the\nrange of code points (in CHARSET) of target characters on which to\nmap the FUNCTION.  Note that these are not character codes, but code\npoints of CHARSET; for the difference see `decode-char' and\n`list-charset-chars'.  If FROM-CODE is nil or imitted, it stands for\nthe first code point of CHARSET; if TO-CODE is nil or omitted, it\nstands for the last code point of CHARSET.\n\nFUNCTION will be called with two arguments: RANGE and ARG.\nRANGE is a cons (FROM .  TO), where FROM and TO specify a range of\ncharacters that belong to CHARSET on which FUNCTION should do its\njob.  FROM and TO are Emacs character codes, unlike FROM-CODE and\nTO-CODE, which are CHARSET code points.",
            "fnname": "Fmap_charset_chars",
            "intspec": "0",
            "lname": "map-charset-chars",
            "maxargs": 5,
            "minargs": 2,
            "path": "charset.c",
            "sname": "Smap_charset_chars"
        },
        {
            "args": [
                "function",
                "keymap",
                "sort_first"
            ],
            "attributes": null,
            "doc": "Call FUNCTION once for each event binding in KEYMAP.\nFUNCTION is called with two arguments: the event that is bound, and\nthe definition it is bound to.  The event may be a character range.\n\nIf KEYMAP has a parent, the parent's bindings are included as well.\nThis works recursively: if the parent has itself a parent, then the\ngrandparent's bindings are also included and so on.\n\nFor more information, see Info node `(elisp) Keymaps'.\n\nusage: (map-keymap FUNCTION KEYMAP)",
            "fnname": "Fmap_keymap",
            "intspec": "0",
            "lname": "map-keymap",
            "maxargs": 3,
            "minargs": 2,
            "path": "keymap.c",
            "sname": "Smap_keymap"
        },
        {
            "args": [
                "function",
                "keymap"
            ],
            "attributes": null,
            "doc": "Call FUNCTION once for each event binding in KEYMAP.\nFUNCTION is called with two arguments: the event that is bound, and\nthe definition it is bound to.  The event may be a character range.\nIf KEYMAP has a parent, this function returns it without processing it.",
            "fnname": "Fmap_keymap_internal",
            "intspec": "0",
            "lname": "map-keymap-internal",
            "maxargs": 2,
            "minargs": 2,
            "path": "keymap.c",
            "sname": "Smap_keymap_internal"
        },
        {
            "args": [
                "function",
                "obarray"
            ],
            "attributes": null,
            "doc": "Call FUNCTION on every symbol in OBARRAY.\nOBARRAY defaults to the value of `obarray'.",
            "fnname": "Fmapatoms",
            "intspec": "0",
            "lname": "mapatoms",
            "maxargs": 2,
            "minargs": 1,
            "path": "lread.c",
            "sname": "Smapatoms"
        },
        {
            "args": [
                "function",
                "base"
            ],
            "attributes": null,
            "doc": "Call FUNCTION for each frame in backtrace.\nIf BASE is non-nil, it should be a function and iteration will start\nfrom its nearest activation frame.\nFUNCTION is called with 4 arguments: EVALD, FUNC, ARGS, and FLAGS.  If\na frame has not evaluated its arguments yet or is a special form,\nEVALD is nil and ARGS is a list of forms.  If a frame has evaluated\nits arguments and called its function already, EVALD is t and ARGS is\na list of values.\nFLAGS is a plist of properties of the current frame: currently, the\nonly supported property is :debug-on-exit.  `mapbacktrace' always\nreturns nil.",
            "fnname": "Fmapbacktrace",
            "intspec": "0",
            "lname": "mapbacktrace",
            "maxargs": 2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Smapbacktrace"
        },
        {
            "args": [
                "function",
                "sequence"
            ],
            "attributes": null,
            "doc": "Apply FUNCTION to each element of SEQUENCE for side effects only.\nUnlike `mapcar', don't accumulate the results.  Return SEQUENCE.\nSEQUENCE may be a list, a vector, a bool-vector, or a string.",
            "fnname": "Fmapc",
            "intspec": "0",
            "lname": "mapc",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Smapc"
        },
        {
            "args": [
                "function",
                "sequence"
            ],
            "attributes": null,
            "doc": "Apply FUNCTION to each element of SEQUENCE, and concatenate\nthe results by altering them (using `nconc').\nSEQUENCE may be a list, a vector, a bool-vector, or a string.",
            "fnname": "Fmapcan",
            "intspec": "0",
            "lname": "mapcan",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Smapcan"
        },
        {
            "args": [
                "function",
                "sequence"
            ],
            "attributes": null,
            "doc": "Apply FUNCTION to each element of SEQUENCE, and make a list of the results.\nThe result is a list just as long as SEQUENCE.\nSEQUENCE may be a list, a vector, a bool-vector, or a string.",
            "fnname": "Fmapcar",
            "intspec": "0",
            "lname": "mapcar",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Smapcar"
        },
        {
            "args": [
                "function",
                "sequence",
                "separator"
            ],
            "attributes": null,
            "doc": "Apply FUNCTION to each element of SEQUENCE, and concat the results as strings.\nIn between each pair of results, stick in SEPARATOR.  Thus, \" \" as\n  SEPARATOR results in spaces between the values returned by FUNCTION.\n\nSEQUENCE may be a list, a vector, a bool-vector, or a string.\n\nOptional argument SEPARATOR must be a string, a vector, or a list of\ncharacters; nil stands for the empty string.\n\nFUNCTION must be a function of one argument, and must return a value\n  that is a sequence of characters: either a string, or a vector or\n  list of numbers that are valid character codepoints.",
            "fnname": "Fmapconcat",
            "intspec": "0",
            "lname": "mapconcat",
            "maxargs": 3,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Smapconcat"
        },
        {
            "args": [
                "function",
                "table"
            ],
            "attributes": null,
            "doc": "Call FUNCTION for all entries in hash table TABLE.\nFUNCTION is called with two arguments, KEY and VALUE.\n`maphash' always returns nil.",
            "fnname": "Fmaphash",
            "intspec": "0",
            "lname": "maphash",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Smaphash"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return this buffer's mark, as a marker object.\nWatch out!  Moving this marker changes the mark position.\nIf you set the marker not to point anywhere, the buffer will have no mark.",
            "fnname": "Fmark_marker",
            "intspec": "0",
            "lname": "mark-marker",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Smark_marker"
        },
        {
            "args": [
                "marker"
            ],
            "attributes": null,
            "doc": "Return the buffer that MARKER points into, or nil if none.\nReturns nil if MARKER points into a dead buffer.",
            "fnname": "Fmarker_buffer",
            "intspec": "0",
            "lname": "marker-buffer",
            "maxargs": 1,
            "minargs": 1,
            "path": "marker.c",
            "sname": "Smarker_buffer"
        },
        {
            "args": [
                "marker"
            ],
            "attributes": null,
            "doc": "Return insertion type of MARKER: t if it stays after inserted text.\nThe value nil means the marker stays before text inserted there.",
            "fnname": "Fmarker_insertion_type",
            "intspec": "0",
            "lname": "marker-insertion-type",
            "maxargs": 1,
            "minargs": 1,
            "path": "marker.c",
            "sname": "Smarker_insertion_type"
        },
        {
            "args": [
                "marker"
            ],
            "attributes": null,
            "doc": "Return the position of MARKER, or nil if it points nowhere.",
            "fnname": "Fmarker_position",
            "intspec": "0",
            "lname": "marker-position",
            "maxargs": 1,
            "minargs": 1,
            "path": "marker.c",
            "sname": "Smarker_position"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a marker (editor pointer).",
            "fnname": "Fmarkerp",
            "intspec": "0",
            "lname": "markerp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Smarkerp"
        },
        {
            "args": [
                "subexp"
            ],
            "attributes": null,
            "doc": "Return position of start of text matched by last search.\nSUBEXP, a number, specifies which parenthesized expression in the last\n  regexp.\nValue is nil if SUBEXPth pair didn't match, or there were less than\n  SUBEXP pairs.\nZero means the entire text matched by the whole regexp or whole string.\n\nReturn value is undefined if the last search failed.",
            "fnname": "Fmatch_beginning",
            "intspec": "0",
            "lname": "match-beginning",
            "maxargs": 1,
            "minargs": 1,
            "path": "search.c",
            "sname": "Smatch_beginning"
        },
        {
            "args": [
                "integers",
                "reuse",
                "reseat"
            ],
            "attributes": null,
            "doc": "Return a list of positions that record text matched by the last search.\nElement 2N of the returned list is the position of the beginning of the\nmatch of the Nth subexpression; it corresponds to `(match-beginning N)';\nelement 2N + 1 is the position of the end of the match of the Nth\nsubexpression; it corresponds to `(match-end N)'.  See `match-beginning'\nand `match-end'.\nIf the last search was on a buffer, all the elements are by default\nmarkers or nil (nil when the Nth pair didn't match); they are integers\nor nil if the search was on a string.  But if the optional argument\nINTEGERS is non-nil, the elements that represent buffer positions are\nalways integers, not markers, and (if the search was on a buffer) the\nbuffer itself is appended to the list as one additional element.\n\nUse `set-match-data' to reinstate the match data from the elements of\nthis list.\n\nNote that non-matching optional groups at the end of the regexp are\nelided instead of being represented with two `nil's each.  For instance:\n\n  (progn\n    (string-match \"^\\\\(a\\\\)?\\\\(b\\\\)\\\\(c\\\\)?$\" \"b\")\n    (match-data))\n  => (0 1 nil nil 0 1)\n\nIf REUSE is a list, store the value in REUSE by destructively modifying it.\nIf REUSE is long enough to hold all the values, its length remains the\nsame, and any unused elements are set to nil.  If REUSE is not long\nenough, it is extended.  Note that if REUSE is long enough and INTEGERS\nis non-nil, no consing is done to make the return value; this minimizes GC.\n\nIf optional third argument RESEAT is non-nil, any previous markers on the\nREUSE list will be modified to point to nowhere.\n\nReturn value is undefined if the last search failed.",
            "fnname": "Fmatch_data",
            "intspec": "0",
            "lname": "match-data",
            "maxargs": 3,
            "minargs": 0,
            "path": "search.c",
            "sname": "Smatch_data"
        },
        {
            "args": [
                "n"
            ],
            "attributes": null,
            "doc": "Add N to all positions in the match data.  Internal.",
            "fnname": "Fmatch_data__translate",
            "intspec": "0",
            "lname": "match-data--translate",
            "maxargs": 1,
            "minargs": 1,
            "path": "search.c",
            "sname": "Smatch_data__translate"
        },
        {
            "args": [
                "subexp"
            ],
            "attributes": null,
            "doc": "Return position of end of text matched by last search.\nSUBEXP, a number, specifies which parenthesized expression in the last\n  regexp.\nValue is nil if SUBEXPth pair didn't match, or there were less than\n  SUBEXP pairs.\nZero means the entire text matched by the whole regexp or whole string.\n\nReturn value is undefined if the last search failed.",
            "fnname": "Fmatch_end",
            "intspec": "0",
            "lname": "match-end",
            "maxargs": 1,
            "minargs": 1,
            "path": "search.c",
            "sname": "Smatch_end"
        },
        {
            "args": [
                "character"
            ],
            "attributes": null,
            "doc": "Return the matching parenthesis of CHARACTER, or nil if none.",
            "fnname": "Fmatching_paren",
            "intspec": "0",
            "lname": "matching-paren",
            "maxargs": 1,
            "minargs": 1,
            "path": "syntax.c",
            "sname": "Smatching_paren"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return largest of all the arguments (which must be numbers or markers).\nThe value is always a number; markers are converted to numbers.\nusage: (max NUMBER-OR-MARKER &rest NUMBERS-OR-MARKERS)",
            "fnname": "Fmax",
            "intspec": "0",
            "lname": "max",
            "maxargs": -1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Smax"
        },
        {
            "args": [
                "unicode"
            ],
            "attributes": "const",
            "doc": "Return the maximum character code.\nIf UNICODE is non-nil, return the maximum character code defined\nby the Unicode Standard.",
            "fnname": "Fmax_char",
            "intspec": "0",
            "lname": "max-char",
            "maxargs": 1,
            "minargs": 0,
            "path": "character.c",
            "sname": "Smax_char"
        },
        {
            "args": [
                "object",
                "start",
                "end",
                "coding_system",
                "noerror"
            ],
            "attributes": null,
            "doc": "Return MD5 message digest of OBJECT, a buffer or string.\n\nA message digest is the string representation of the cryptographic checksum\nof a document, and the algorithm to calculate it is defined in RFC 1321.\nThe MD5 digest is 32-character long.\n\nThe two optional arguments START and END are character positions\nspecifying for which part of OBJECT the message digest should be\ncomputed.  If nil or omitted, the digest is computed for the whole\nOBJECT.\n\nThe MD5 message digest is computed from the result of encoding the\ntext in a coding system, not directly from the internal Emacs form of\nthe text.  The optional fourth argument CODING-SYSTEM specifies which\ncoding system to encode the text with.  It should be the same coding\nsystem that you used or will use when actually writing the text into a\nfile.\n\nIf CODING-SYSTEM is nil or omitted, the default depends on OBJECT.  If\nOBJECT is a buffer, the default for CODING-SYSTEM is whatever coding\nsystem would be chosen by default for writing this text into a file.\n\nIf OBJECT is a string, the most preferred coding system (see the\ncommand `prefer-coding-system') is used.\n\nIf NOERROR is non-nil, silently assume the `raw-text' coding if the\nguesswork fails.  Normally, an error is signaled in such case.\n\nNote that MD5 is not collision resistant and should not be used for\nanything security-related.  See `secure-hash' for alternatives.",
            "fnname": "Fmd5",
            "intspec": "0",
            "lname": "md5",
            "maxargs": 5,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Smd5"
        },
        {
            "args": [
                "elt",
                "list"
            ],
            "attributes": null,
            "doc": "Return non-nil if ELT is an element of LIST.  Comparison done with `equal'.\nThe value is actually the tail of LIST whose car is ELT.",
            "fnname": "Fmember",
            "intspec": "0",
            "lname": "member",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Smember"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of (TOTAL-RAM FREE-RAM TOTAL-SWAP FREE-SWAP).\nAll values are in Kbytes.  If there is no swap space,\nlast two values are zero.  If the system is not supported\nor memory information can't be obtained, return nil.\nIf `default-directory' is remote, return memory information of the\nrespective remote host.",
            "fnname": "Fmemory_info",
            "intspec": "0",
            "lname": "memory-info",
            "maxargs": 0,
            "minargs": 0,
            "path": "alloc.c",
            "sname": "Smemory_info"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of counters that measure how much consing there has been.\nEach of these counters increments for a certain kind of object.\nThe counters wrap around from the largest positive integer to zero.\nGarbage collection does not decrease them.\nThe elements of the value are as follows:\n  (CONSES FLOATS VECTOR-CELLS SYMBOLS STRING-CHARS INTERVALS STRINGS)\nAll are in units of 1 = one object consed\nexcept for VECTOR-CELLS and STRING-CHARS, which count the total length of\nobjects consed.\nFrames, windows, buffers, and subprocesses count as vectors\n  (but the contents of a buffer's text do not count here).",
            "fnname": "Fmemory_use_counts",
            "intspec": "0",
            "lname": "memory-use-counts",
            "maxargs": 0,
            "minargs": 0,
            "path": "alloc.c",
            "sname": "Smemory_use_counts"
        },
        {
            "args": [
                "elt",
                "list"
            ],
            "attributes": null,
            "doc": "Return non-nil if ELT is an element of LIST.  Comparison done with `eq'.\nThe value is actually the tail of LIST whose car is ELT.",
            "fnname": "Fmemq",
            "intspec": "0",
            "lname": "memq",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Smemq"
        },
        {
            "args": [
                "elt",
                "list"
            ],
            "attributes": null,
            "doc": "Return non-nil if ELT is an element of LIST.  Comparison done with `eql'.\nThe value is actually the tail of LIST whose car is ELT.",
            "fnname": "Fmemql",
            "intspec": "0",
            "lname": "memql",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Smemql"
        },
        {
            "args": [
                "x",
                "y",
                "frame"
            ],
            "attributes": null,
            "doc": "Return the menu-bar menu on FRAME at pixel coordinates X, Y.\nX and Y are frame-relative pixel coordinates, assumed to define\na location within the menu bar.\nIf FRAME is nil or omitted, it defaults to the selected frame.\n\nValue is the symbol of the menu at X/Y, or nil if the specified\ncoordinates are not within the FRAME's menu bar.  The symbol can\nbe used to look up the menu like this:\n\n     (lookup-key MAP [menu-bar SYMBOL])\n\nwhere MAP is either the current global map or the current local map,\nsince menu-bar items come from both.\n\nThis function can return non-nil only on a text-terminal frame\nor on an X frame that doesn't use any GUI toolkit.  Otherwise,\nEmacs does not manage the menu bar and cannot convert coordinates\ninto menu items.",
            "fnname": "Fmenu_bar_menu_at_x_y",
            "intspec": "0",
            "lname": "menu-bar-menu-at-x-y",
            "maxargs": 3,
            "minargs": 2,
            "path": "menu.c",
            "sname": "Smenu_bar_menu_at_x_y"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if a menu or popup dialog is active.\n\\(On MS Windows, this refers to the selected frame.)\n\nSKIP: real doc in xmenu.c.\n\nReturn t if a menu or popup dialog is active.\n\\(On MS Windows, this refers to the selected frame.)",
            "fnname": "Fmenu_or_popup_active_p",
            "intspec": "0",
            "lname": "menu-or-popup-active-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "pgtkmenu.c",
            "sname": "Smenu_or_popup_active_p"
        },
        {
            "args": [
                "attribute",
                "value1",
                "value2"
            ],
            "attributes": null,
            "doc": "Return face ATTRIBUTE VALUE1 merged with VALUE2.\nIf VALUE1 or VALUE2 are absolute (see `face-attribute-relative-p'), then\nthe result will be absolute, otherwise it will be relative.",
            "fnname": "Fmerge_face_attribute",
            "intspec": "0",
            "lname": "merge-face-attribute",
            "maxargs": 3,
            "minargs": 3,
            "path": "xfaces.c",
            "sname": "Smerge_face_attribute"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Display a message at the bottom of the screen.\nThe message also goes into the `*Messages*' buffer, if `message-log-max'\nis non-nil.  (In keyboard macros, that's all it does.)\nReturn the message.\n\nIn batch mode, the message is printed to the standard error stream,\nfollowed by a newline.\n\nThe first argument is a format control string, and the rest are data\nto be formatted under control of the string.  Percent sign (%), grave\naccent (\\\\=`) and apostrophe (\\\\=') are special in the format; see\n`format-message' for details.  To display STRING without special\ntreatment, use (message \"%s\" STRING).\n\nIf the first argument is nil or the empty string, the function clears\nany existing message; this lets the minibuffer contents show.  See\nalso `current-message'.\n\nusage: (message FORMAT-STRING &rest ARGS)",
            "fnname": "Fmessage",
            "intspec": "0",
            "lname": "message",
            "maxargs": -1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Smessage"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Display a message, in a dialog box if possible.\nIf a dialog box is not available, use the echo area.\nThe first argument is a format control string, and the rest are data\nto be formatted under control of the string.  See `format-message' for\ndetails.\n\nIf the first argument is nil or the empty string, clear any existing\nmessage; let the minibuffer contents show.\n\nusage: (message-box FORMAT-STRING &rest ARGS)",
            "fnname": "Fmessage_box",
            "intspec": "0",
            "lname": "message-box",
            "maxargs": -1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Smessage_box"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Display a message in a dialog box or in the echo area.\nIf this command was invoked with the mouse, use a dialog box if\n`use-dialog-box' is non-nil.\nOtherwise, use the echo area.\nThe first argument is a format control string, and the rest are data\nto be formatted under control of the string.  See `format-message' for\ndetails.\n\nIf the first argument is nil or the empty string, clear any existing\nmessage; let the minibuffer contents show.\n\nusage: (message-or-box FORMAT-STRING &rest ARGS)",
            "fnname": "Fmessage_or_box",
            "intspec": "0",
            "lname": "message-or-box",
            "maxargs": -1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Smessage_or_box"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return smallest of all the arguments (which must be numbers or markers).\nThe value is always a number; markers are converted to numbers.\nusage: (min NUMBER-OR-MARKER &rest NUMBERS-OR-MARKERS)",
            "fnname": "Fmin",
            "intspec": "0",
            "lname": "min",
            "maxargs": -1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Smin"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the user input in a minibuffer as a string.\nIf the current buffer is not a minibuffer, return its entire contents.",
            "fnname": "Fminibuffer_contents",
            "intspec": "0",
            "lname": "minibuffer-contents",
            "maxargs": 0,
            "minargs": 0,
            "path": "minibuf.c",
            "sname": "Sminibuffer_contents"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the user input in a minibuffer as a string, without text-properties.\nIf the current buffer is not a minibuffer, return its entire contents.",
            "fnname": "Fminibuffer_contents_no_properties",
            "intspec": "0",
            "lname": "minibuffer-contents-no-properties",
            "maxargs": 0,
            "minargs": 0,
            "path": "minibuf.c",
            "sname": "Sminibuffer_contents_no_properties"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return current depth of activations of minibuffer, a nonnegative integer.",
            "fnname": "Fminibuffer_depth",
            "intspec": "0",
            "lname": "minibuffer-depth",
            "maxargs": 0,
            "minargs": 0,
            "path": "minibuf.c",
            "sname": "Sminibuffer_depth"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Return t if BUFFER is a minibuffer at the current command loop level.\nNo argument or nil as argument means use the current buffer as BUFFER.",
            "fnname": "Fminibuffer_innermost_command_loop_p",
            "intspec": "0",
            "lname": "minibuffer-innermost-command-loop-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "minibuf.c",
            "sname": "Sminibuffer_innermost_command_loop_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the prompt string of the currently-active minibuffer.\nIf no minibuffer is active, return nil.",
            "fnname": "Fminibuffer_prompt",
            "intspec": "0",
            "lname": "minibuffer-prompt",
            "maxargs": 0,
            "minargs": 0,
            "path": "minibuf.c",
            "sname": "Sminibuffer_prompt"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the buffer position of the end of the minibuffer prompt.\nReturn (point-min) if current buffer is not a minibuffer.",
            "fnname": "Fminibuffer_prompt_end",
            "intspec": "0",
            "lname": "minibuffer-prompt-end",
            "maxargs": 0,
            "minargs": 0,
            "path": "minibuf.c",
            "sname": "Sminibuffer_prompt_end"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return window selected just before minibuffer window was selected.\nReturn nil if the selected window is not a minibuffer window.",
            "fnname": "Fminibuffer_selected_window",
            "intspec": "0",
            "lname": "minibuffer-selected-window",
            "maxargs": 0,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sminibuffer_selected_window"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return the minibuffer window for frame FRAME.\nIf FRAME is omitted or nil, it defaults to the selected frame.",
            "fnname": "Fminibuffer_window",
            "intspec": "0",
            "lname": "minibuffer-window",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sminibuffer_window"
        },
        {
            "args": [
                "buffer",
                "live"
            ],
            "attributes": null,
            "doc": "Return t if BUFFER is a minibuffer.\nNo argument or nil as argument means use current buffer as BUFFER.\nBUFFER can be a buffer or a buffer name.  If LIVE is non-nil, then\nreturn t only if BUFFER is an active minibuffer.",
            "fnname": "Fminibufferp",
            "intspec": "0",
            "lname": "minibufferp",
            "maxargs": 2,
            "minargs": 0,
            "path": "minibuf.c",
            "sname": "Sminibufferp"
        },
        {
            "args": [
                "key",
                "accept_default"
            ],
            "attributes": null,
            "doc": "Find the visible minor mode bindings of KEY.\nReturn an alist of pairs (MODENAME . BINDING), where MODENAME is\nthe symbol which names the minor mode binding KEY, and BINDING is\nKEY's definition in that mode.  In particular, if KEY has no\nminor-mode bindings, return nil.  If the first binding is a\nnon-prefix, all subsequent bindings will be omitted, since they would\nbe ignored.  Similarly, the list doesn't include non-prefix bindings\nthat come after prefix bindings.\n\nIf optional argument ACCEPT-DEFAULT is non-nil, recognize default\nbindings; see the description of `lookup-key' for more details about this.",
            "fnname": "Fminor_mode_key_binding",
            "intspec": "0",
            "lname": "minor-mode-key-binding",
            "maxargs": 2,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Sminor_mode_key_binding"
        },
        {
            "args": [
                "x",
                "y"
            ],
            "attributes": null,
            "doc": "Return X modulo Y.\nThe result falls between zero (inclusive) and Y (exclusive).\nBoth X and Y must be numbers or markers.",
            "fnname": "Fmod",
            "intspec": "0",
            "lname": "mod",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Smod"
        },
        {
            "args": [
                "character",
                "category",
                "table",
                "reset"
            ],
            "attributes": null,
            "doc": "Modify the category set of CHARACTER by adding CATEGORY to it.\nThe category is changed only for table TABLE, which defaults to\nthe current buffer's category table.\nCHARACTER can be either a single character or a cons representing the\nlower and upper ends of an inclusive character range to modify.\nCATEGORY must be a category name (a character between ` ' and `~').\nUse `describe-categories' to see existing category names.\nIf optional fourth argument RESET is non-nil,\nthen delete CATEGORY from the category set instead of adding it.",
            "fnname": "Fmodify_category_entry",
            "intspec": "0",
            "lname": "modify-category-entry",
            "maxargs": 4,
            "minargs": 2,
            "path": "category.c",
            "sname": "Smodify_category_entry"
        },
        {
            "args": [
                "frame",
                "alist"
            ],
            "attributes": null,
            "doc": "Modify FRAME according to new values of its parameters in ALIST.\nIf FRAME is nil, it defaults to the selected frame.\nALIST is an alist of parameters to change and their new values.\nEach element of ALIST has the form (PARM . VALUE), where PARM is a symbol.\nWhich PARMs are meaningful depends on the kind of frame.\nThe meaningful parameters are acted upon, i.e. the frame is changed\naccording to their new values, and are also stored in the frame's\nparameter list so that `frame-parameters' will return them.\nPARMs that are not meaningful are still stored in the frame's parameter\nlist, but are otherwise ignored.",
            "fnname": "Fmodify_frame_parameters",
            "intspec": "0",
            "lname": "modify-frame-parameters",
            "maxargs": 2,
            "minargs": 2,
            "path": "frame.c",
            "sname": "Smodify_frame_parameters"
        },
        {
            "args": [
                "c",
                "newentry",
                "syntax_table"
            ],
            "attributes": null,
            "doc": "Set syntax for character CHAR according to string NEWENTRY.\nThe syntax is changed only for table SYNTAX-TABLE, which defaults to\n the current buffer's syntax table.\nCHAR may be a cons (MIN . MAX), in which case, syntaxes of all characters\nin the range MIN to MAX are changed.\nThe first character of NEWENTRY should be one of the following:\n  Space or -  whitespace syntax.    w   word constituent.\n  _           symbol constituent.   .   punctuation.\n  (           open-parenthesis.     )   close-parenthesis.\n  \"           string quote.         \\\\   escape.\n  $           paired delimiter.     \\\\='   expression quote or prefix operator.\n  <           comment starter.      >   comment ender.\n  /           character-quote.      @   inherit from parent table.\n  |           generic string fence. !   generic comment fence.\n\nOnly single-character comment start and end sequences are represented thus.\nTwo-character sequences are represented as described below.\nThe second character of NEWENTRY is the matching parenthesis,\n used only if the first character is `(' or `)'.\nAny additional characters are flags.\nDefined flags are the characters 1, 2, 3, 4, b, p, and n.\n 1 means CHAR is the start of a two-char comment start sequence.\n 2 means CHAR is the second character of such a sequence.\n 3 means CHAR is the start of a two-char comment end sequence.\n 4 means CHAR is the second character of such a sequence.\n\nThere can be several orthogonal comment sequences.  This is to support\nlanguage modes such as C++.  By default, all comment sequences are of style\na, but you can set the comment sequence style to b (on the second character\nof a comment-start, and the first character of a comment-end sequence) and/or\nc (on any of its chars) using this flag:\n b means CHAR is part of comment sequence b.\n c means CHAR is part of comment sequence c.\n n means CHAR is part of a nestable comment sequence.\n\n p means CHAR is a prefix character for `backward-prefix-chars';\n   such characters are treated as whitespace when they occur\n   between expressions.\nusage: (modify-syntax-entry CHAR NEWENTRY &optional SYNTAX-TABLE)",
            "fnname": "Fmodify_syntax_entry",
            "intspec": "cSet syntax for character: \nsSet syntax for %s to: ",
            "lname": "modify-syntax-entry",
            "maxargs": 3,
            "minargs": 2,
            "path": "syntax.c",
            "sname": "Smodify_syntax_entry"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is a function loaded from a dynamic module.",
            "fnname": "Fmodule_function_p",
            "intspec": "NULL",
            "lname": "module-function-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Smodule_function_p"
        },
        {
            "args": [
                "file"
            ],
            "attributes": null,
            "doc": "Load module FILE.",
            "fnname": "Fmodule_load",
            "intspec": "0",
            "lname": "module-load",
            "maxargs": 1,
            "minargs": 1,
            "path": "emacs-module.c",
            "sname": "Smodule_load"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list (FRAME X . Y) giving the current mouse frame and position.\nThe position is given in pixel units, where (0, 0) is the\nupper-left corner of the frame, X is the horizontal offset, and Y is\nthe vertical offset.\nFRAME might be nil if `track-mouse' is set to `drag-source'.  This\nmeans there is no frame under the mouse.  If Emacs is running on a\nmouseless terminal or hasn't been programmed to read the mouse\nposition, it returns the selected frame for FRAME and nil for X and\nY.",
            "fnname": "Fmouse_pixel_position",
            "intspec": "0",
            "lname": "mouse-pixel-position",
            "maxargs": 0,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Smouse_pixel_position"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list (FRAME X . Y) giving the current mouse frame and position.\nThe position is given in canonical character cells, where (0, 0) is the\nupper-left corner of the frame, X is the horizontal offset, and Y is the\nvertical offset, measured in units of the frame's default character size.\nIf Emacs is running on a mouseless terminal or hasn't been programmed\nto read the mouse position, it returns the selected frame for FRAME\nand nil for X and Y.\n\nFRAME might be nil if `track-mouse' is set to `drag-source'.  This\nmeans there is no frame under the mouse.  If `mouse-position-function'\nis non-nil, `mouse-position' calls it, passing the normal return value\nto that function as an argument, and returns whatever that function\nreturns.",
            "fnname": "Fmouse_position",
            "intspec": "0",
            "lname": "mouse-position",
            "maxargs": 0,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Smouse_position"
        },
        {
            "args": [
                "overlay",
                "beg",
                "end",
                "buffer"
            ],
            "attributes": null,
            "doc": "Set the endpoints of OVERLAY to BEG and END in BUFFER.\nIf BUFFER is omitted, leave OVERLAY in the same buffer it inhabits now.\nIf BUFFER is omitted, and OVERLAY is in no buffer, put it in the current\nbuffer.",
            "fnname": "Fmove_overlay",
            "intspec": "0",
            "lname": "move-overlay",
            "maxargs": 4,
            "minargs": 3,
            "path": "buffer.c",
            "sname": "Smove_overlay"
        },
        {
            "args": [
                "direction"
            ],
            "attributes": null,
            "doc": "Move point in the visual order in the specified DIRECTION.\nDIRECTION can be 1, meaning move to the right, or -1, which moves to the\nleft.\n\nValue is the new character position of point.",
            "fnname": "Fmove_point_visually",
            "intspec": "0",
            "lname": "move-point-visually",
            "maxargs": 1,
            "minargs": 1,
            "path": "xdisp.c",
            "sname": "Smove_point_visually"
        },
        {
            "args": [
                "column",
                "force"
            ],
            "attributes": null,
            "doc": "Move point to column COLUMN in the current line.\nInteractively, COLUMN is the value of prefix numeric argument.\nThe column of a character is calculated by adding together the widths\nas displayed of the previous characters in the line.\nThis function ignores line-continuation;\nthere is no upper limit on the column number a character can have\nand horizontal scrolling has no effect.\nText that has an invisible property is considered as having width 0,\nunless `buffer-invisibility-spec' specifies that it is replaced by\nan ellipsis.\n\nIf specified column is within a character, point goes after that character.\nIf it's past end of line, point goes to end of line.\n\nOptional second argument FORCE non-nil means if COLUMN is in the\nmiddle of a tab character, either change it to spaces (when\n`indent-tabs-mode' is nil), or insert enough spaces before it to reach\nCOLUMN (otherwise).  In addition, if FORCE is t, and the line is too short\nto reach COLUMN, add spaces/tabs to get there.\n\nThe return value is the current column.",
            "fnname": "Fmove_to_column",
            "intspec": "NMove to column: ",
            "lname": "move-to-column",
            "maxargs": 2,
            "minargs": 1,
            "path": "indent.c",
            "sname": "Smove_to_column"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Position point relative to window.\nARG nil means position point at center of window.\nElse, ARG specifies vertical position within the window;\nzero means top of window, negative means relative to bottom\nof window, -1 meaning the last fully visible display line\nof the window.\n\nValue is the screen line of the window point moved to, counting\nfrom the top of the window.",
            "fnname": "Fmove_to_window_line",
            "intspec": "P",
            "lname": "move-to-window-line",
            "maxargs": 1,
            "minargs": 1,
            "path": "window.c",
            "sname": "Smove_to_window_line"
        },
        {
            "args": [
                "ch"
            ],
            "attributes": null,
            "doc": "Convert the multibyte character CH to a byte.\nIf the multibyte character does not represent a byte, return -1.",
            "fnname": "Fmultibyte_char_to_unibyte",
            "intspec": "0",
            "lname": "multibyte-char-to-unibyte",
            "maxargs": 1,
            "minargs": 1,
            "path": "character.c",
            "sname": "Smultibyte_char_to_unibyte"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a multibyte string.\nReturn nil if OBJECT is either a unibyte string, or not a string.",
            "fnname": "Fmultibyte_string_p",
            "intspec": "0",
            "lname": "multibyte-string-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Smultibyte_string_p"
        },
        {
            "args": [
                "mutex"
            ],
            "attributes": null,
            "doc": "Acquire a mutex.\nIf the current thread already owns MUTEX, increment the count and\nreturn.\nOtherwise, if no thread owns MUTEX, make the current thread own it.\nOtherwise, block until MUTEX is available, or until the current thread\nis signaled using `thread-signal'.\nNote that calls to `mutex-lock' and `mutex-unlock' must be paired.",
            "fnname": "Fmutex_lock",
            "intspec": "0",
            "lname": "mutex-lock",
            "maxargs": 1,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Smutex_lock"
        },
        {
            "args": [
                "mutex"
            ],
            "attributes": null,
            "doc": "Return the name of MUTEX.\nIf no name was given when MUTEX was created, return nil.",
            "fnname": "Fmutex_name",
            "intspec": "0",
            "lname": "mutex-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Smutex_name"
        },
        {
            "args": [
                "mutex"
            ],
            "attributes": null,
            "doc": "Release the mutex.\nIf this thread does not own MUTEX, signal an error.\nOtherwise, decrement the mutex's count.  If the count is zero,\nrelease MUTEX.",
            "fnname": "Fmutex_unlock",
            "intspec": "0",
            "lname": "mutex-unlock",
            "maxargs": 1,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Smutex_unlock"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a mutex.",
            "fnname": "Fmutexp",
            "intspec": "0",
            "lname": "mutexp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Smutexp"
        },
        {
            "args": [
                "start",
                "end"
            ],
            "attributes": null,
            "doc": "Restrict editing in this buffer to the current region.\nThe rest of the text becomes temporarily invisible and untouchable\nbut is not deleted; if you save the buffer in a file, the invisible\ntext is included in the file.  \\\\[widen] makes all visible again.\nSee also `save-restriction'.\n\nWhen calling from Lisp, pass two arguments START and END:\npositions (integers or markers) bounding the text that should\nremain visible.\n\nHowever, when restrictions have been set by `with-restriction' with a\nlabel, `narrow-to-region' can be used only within the limits of these\nrestrictions.  If the START or END arguments are outside these limits,\nthe corresponding limit set by `with-restriction' is used instead of the\nargument.  To gain access to other portions of the buffer, use\n`without-restriction' with the same label.",
            "fnname": "Fnarrow_to_region",
            "intspec": "r",
            "lname": "narrow-to-region",
            "maxargs": 2,
            "minargs": 2,
            "path": "editfns.c",
            "sname": "Snarrow_to_region"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return non-nil if native compilation support is built-in.",
            "fnname": "Fnative_comp_available_p",
            "intspec": "0",
            "lname": "native-comp-available-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "comp.c",
            "sname": "Snative_comp_available_p"
        },
        {
            "args": [
                "comp_unit"
            ],
            "attributes": null,
            "doc": "Return the file of the native compilation unit.",
            "fnname": "Fnative_comp_unit_file",
            "intspec": "0",
            "lname": "native-comp-unit-file",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Snative_comp_unit_file"
        },
        {
            "args": [
                "comp_unit",
                "new_file"
            ],
            "attributes": null,
            "doc": "Return the file of the native compilation unit.",
            "fnname": "Fnative_comp_unit_set_file",
            "intspec": "0",
            "lname": "native-comp-unit-set-file",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Snative_comp_unit_set_file"
        },
        {
            "args": [
                "filename",
                "late_load"
            ],
            "attributes": null,
            "doc": "Load native elisp code FILENAME.\nLATE-LOAD has to be non-nil when loading for deferred compilation.",
            "fnname": "Fnative_elisp_load",
            "intspec": "0",
            "lname": "native-elisp-load",
            "maxargs": 2,
            "minargs": 1,
            "path": "comp.c",
            "sname": "Snative_elisp_load"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is a nonnegative integer.",
            "fnname": "Fnatnump",
            "intspec": "0",
            "lname": "natnump",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Snatnump"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Concatenate any number of lists by altering them.\nOnly the last argument is not altered, and need not be a list.\nusage: (nconc &rest LISTS)",
            "fnname": "Fnconc",
            "intspec": "0",
            "lname": "nconc",
            "maxargs": -1,
            "minargs": 0,
            "path": "fns.c",
            "sname": "Snconc"
        },
        {
            "args": [
                "ifname"
            ],
            "attributes": null,
            "doc": "Return information about network interface named IFNAME.\nThe return value is a list (ADDR BCAST NETMASK HWADDR FLAGS),\nwhere ADDR is the layer 3 address, BCAST is the layer 3 broadcast address,\nNETMASK is the layer 3 network mask, HWADDR is the layer 2 address, and\nFLAGS is the current flags of the interface.\n\nData that is unavailable is returned as nil.",
            "fnname": "Fnetwork_interface_info",
            "intspec": "0",
            "lname": "network-interface-info",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Snetwork_interface_info"
        },
        {
            "args": [
                "full",
                "family"
            ],
            "attributes": null,
            "doc": "Return an alist of all network interfaces and their network address.\nEach element is cons of the form (IFNAME . IP) where IFNAME is a\nstring containing the interface name, and IP is the network address in\ninternal format; see the description of ADDRESS in\n`make-network-process'.  The interface name is not guaranteed to be\nunique.\n\nOptional parameter FULL non-nil means return all IP address info for\neach interface.  Each element is then a list of the form\n    (IFNAME IP BCAST MASK)\nwhere IFNAME is the interface name, IP the IP address,\nBCAST the broadcast address, and MASK the network mask.\n\nOptional parameter FAMILY controls the type of addresses to return.\nThe default of nil means both IPv4 and IPv6, symbol `ipv4' means IPv4\nonly, symbol `ipv6' means IPv6 only.\n\nSee also `network-interface-info', which is limited to IPv4 only.\n\nIf the information is not available, return nil.",
            "fnname": "Fnetwork_interface_list",
            "intspec": "0",
            "lname": "network-interface-list",
            "maxargs": 2,
            "minargs": 0,
            "path": "process.c",
            "sname": "Snetwork_interface_list"
        },
        {
            "args": [
                "name",
                "family",
                "hint"
            ],
            "attributes": null,
            "doc": "Look up Internet Protocol (IP) address info of NAME.\nOptional argument FAMILY controls whether to look up IPv4 or IPv6\naddresses.  The default of nil means both, symbol `ipv4' means IPv4\nonly, symbol `ipv6' means IPv6 only.\nOptional argument HINTS allows specifying the hints passed to the\nunderlying library call.  The only supported value is `numeric', which\nmeans treat NAME as a numeric IP address.  This also suppresses DNS\ntraffic.\nReturn a list of addresses, or nil if none were found.  Each address\nis a vector of integers, as per the description of ADDRESS in\n`make-network-process'.  In case of error log the error message\nreturned from the lookup.",
            "fnname": "Fnetwork_lookup_address_info",
            "intspec": "0",
            "lname": "network-lookup-address-info",
            "maxargs": 3,
            "minargs": 1,
            "path": "process.c",
            "sname": "Snetwork_lookup_address_info"
        },
        {
            "args": [
                "name",
                "fontlist"
            ],
            "attributes": null,
            "doc": "Create a new fontset NAME from font information in FONTLIST.\n\nFONTLIST is an alist of scripts vs the corresponding font specification list.\nEach element of FONTLIST has the form (SCRIPT FONT-SPEC ...), where a\ncharacter of SCRIPT is displayed by a font that matches one of\nFONT-SPEC.\n\nSCRIPT is a symbol that appears in the first extra slot of the\nchar-table `char-script-table'.\n\nFONT-SPEC is a vector, a cons, or a string.  See the documentation of\n`set-fontset-font' for the meaning.",
            "fnname": "Fnew_fontset",
            "intspec": "0",
            "lname": "new-fontset",
            "maxargs": 2,
            "minargs": 2,
            "path": "fontset.c",
            "sname": "Snew_fontset"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Check the newline cache of BUFFER against buffer contents.\n\nBUFFER defaults to the current buffer.\n\nValue is an array of 2 sub-arrays of buffer positions for newlines,\nthe first based on the cache, the second based on actually scanning\nthe buffer.  If the buffer doesn't have a cache, the value is nil.",
            "fnname": "Fnewline_cache_check",
            "intspec": "0",
            "lname": "newline-cache-check",
            "maxargs": 1,
            "minargs": 0,
            "path": "search.c",
            "sname": "Snewline_cache_check"
        },
        {
            "args": [
                "position",
                "limit"
            ],
            "attributes": null,
            "doc": "Return the position of next text property or overlay change.\nThis scans characters forward in the current buffer from POSITION till\nit finds a change in some text property, or the beginning or end of an\noverlay, and returns the position of that.\nIf none is found, and LIMIT is nil or omitted, the function\nreturns (point-max).\n\nIf the optional second argument LIMIT is non-nil, the function doesn't\nsearch past position LIMIT, and returns LIMIT if nothing is found\nbefore LIMIT.  LIMIT is a no-op if it is greater than (point-max).",
            "fnname": "Fnext_char_property_change",
            "intspec": "0",
            "lname": "next-char-property-change",
            "maxargs": 2,
            "minargs": 1,
            "path": "textprop.c",
            "sname": "Snext_char_property_change"
        },
        {
            "args": [
                "frame",
                "miniframe"
            ],
            "attributes": null,
            "doc": "Return the next frame in the frame list after FRAME.\nOnly frames on the same terminal as FRAME are included in the list\nof candidate frames.  If omitted, FRAME defaults to the selected frame.\n\nIf MINIFRAME is nil (the default), include all frames except\nminibuffer-only frames.\n\nIf MINIFRAME is a window, include only its own frame and any frame now\nusing that window as the minibuffer.\n\nIf MINIFRAME is `visible', include only visible frames.\n\nIf MINIFRAME is 0, include only visible and iconified frames.\n\nIf MINIFRAME is any other value, include all frames.",
            "fnname": "Fnext_frame",
            "intspec": "0",
            "lname": "next-frame",
            "maxargs": 2,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Snext_frame"
        },
        {
            "args": [
                "pos"
            ],
            "attributes": null,
            "doc": "Return the next position after POS where an overlay starts or ends.\nIf there are no overlay boundaries from POS to (point-max),\nthe value is (point-max).",
            "fnname": "Fnext_overlay_change",
            "intspec": "0",
            "lname": "next-overlay-change",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Snext_overlay_change"
        },
        {
            "args": [
                "position",
                "object",
                "limit"
            ],
            "attributes": null,
            "doc": "Return the position of next property change.\nScans characters forward from POSITION in OBJECT till it finds\na change in some text property, then returns the position of the change.\nIf the optional second argument OBJECT is a buffer (or nil, which means\nthe current buffer), POSITION is a buffer position (integer or marker).\nIf OBJECT is a string, POSITION is a 0-based index into it.\nReturn nil if LIMIT is nil or omitted, and the property is constant all\nthe way to the end of OBJECT; if the value is non-nil, it is a position\ngreater than POSITION, never equal.\n\nIf the optional third argument LIMIT is non-nil, don't search\npast position LIMIT; return LIMIT if nothing is found before LIMIT.",
            "fnname": "Fnext_property_change",
            "intspec": "0",
            "lname": "next-property-change",
            "maxargs": 3,
            "minargs": 1,
            "path": "textprop.c",
            "sname": "Snext_property_change"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if a call to `read-file-name' will use a dialog.\nThe return value is only relevant for a call to `read-file-name' that happens\nbefore any other event (mouse or keypress) is handled.",
            "fnname": "Fnext_read_file_uses_dialog_p",
            "intspec": "0",
            "lname": "next-read-file-uses-dialog-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "fileio.c",
            "sname": "Snext_read_file_uses_dialog_p"
        },
        {
            "args": [
                "position",
                "prop",
                "object",
                "limit"
            ],
            "attributes": null,
            "doc": "Return the position of next text property or overlay change for a specific property.\nScans characters forward from POSITION till it finds\na change in the PROP property, then returns the position of the change.\nIf the optional third argument OBJECT is a buffer (or nil, which means\nthe current buffer), POSITION is a buffer position (integer or marker).\nIf OBJECT is a string, POSITION is a 0-based index into it.\n\nIn a string, scan runs to the end of the string, unless LIMIT is non-nil.\nIn a buffer, scan runs to end of buffer, unless LIMIT is non-nil.\nIf the optional fourth argument LIMIT is non-nil, don't search\npast position LIMIT; return LIMIT if nothing is found before LIMIT.\nHowever, if OBJECT is a buffer and LIMIT is beyond the end of the\nbuffer, this function returns `point-max', not LIMIT.\n\nThe property values are compared with `eq'.",
            "fnname": "Fnext_single_char_property_change",
            "intspec": "0",
            "lname": "next-single-char-property-change",
            "maxargs": 4,
            "minargs": 2,
            "path": "textprop.c",
            "sname": "Snext_single_char_property_change"
        },
        {
            "args": [
                "position",
                "prop",
                "object",
                "limit"
            ],
            "attributes": null,
            "doc": "Return the position of next property change for a specific property.\nScans characters forward from POSITION till it finds\na change in the PROP property, then returns the position of the change.\nIf the optional third argument OBJECT is a buffer (or nil, which means\nthe current buffer), POSITION is a buffer position (integer or marker).\nIf OBJECT is a string, POSITION is a 0-based index into it.\nThe property values are compared with `eq'.\nReturn nil if LIMIT is nil or omitted, and the property is constant all\nthe way to the end of OBJECT; if the value is non-nil, it is a position\ngreater than POSITION, never equal.\n\nIf the optional fourth argument LIMIT is non-nil, don't search\npast position LIMIT; return LIMIT if nothing is found before LIMIT.",
            "fnname": "Fnext_single_property_change",
            "intspec": "0",
            "lname": "next-single-property-change",
            "maxargs": 4,
            "minargs": 2,
            "path": "textprop.c",
            "sname": "Snext_single_property_change"
        },
        {
            "args": [
                "window",
                "minibuf",
                "all_frames"
            ],
            "attributes": null,
            "doc": "Return live window after WINDOW in the cyclic ordering of windows.\nWINDOW must be a live window and defaults to the selected one.  The\noptional arguments MINIBUF and ALL-FRAMES specify the set of windows to\nconsider.\n\nMINIBUF nil or omitted means consider the minibuffer window only if the\nminibuffer is active.  MINIBUF t means consider the minibuffer window\neven if the minibuffer is not active.  Any other value means do not\nconsider the minibuffer window even if the minibuffer is active.\n\nALL-FRAMES nil or omitted means consider all windows on WINDOW's frame,\nplus the minibuffer window if specified by the MINIBUF argument.  If the\nminibuffer counts, consider all windows on all frames that share that\nminibuffer too.  The following non-nil values of ALL-FRAMES have special\nmeanings:\n\n- t means consider all windows on all existing frames.\n\n- `visible' means consider all windows on all visible frames.\n\n- 0 (the number zero) means consider all windows on all visible and\n  iconified frames.\n\n- A frame means consider all windows on that frame only.\n\nAnything else means consider all windows on WINDOW's frame and no\nothers.\n\nIf you use consistent values for MINIBUF and ALL-FRAMES, you can use\n`next-window' to iterate through the entire cycle of acceptable\nwindows, eventually ending up back at the window you started with.\n`previous-window' traverses the same cycle, in the reverse order.",
            "fnname": "Fnext_window",
            "intspec": "0",
            "lname": "next-window",
            "maxargs": 3,
            "minargs": 0,
            "path": "window.c",
            "sname": "Snext_window"
        },
        {
            "args": [
                "msgid",
                "msgid_plural",
                "n"
            ],
            "attributes": null,
            "doc": "Return the translation of MSGID (plural MSGID-PLURAL) depending on N.\nMSGID is the singular form of the string to be converted;\nuse it as the key for the search in the translation catalog.\nMSGID-PLURAL is the plural form.  Use N to select the proper translation.\nIf no message catalog is found, MSGID is returned if N is equal to 1,\notherwise MSGID-PLURAL.",
            "fnname": "Fngettext",
            "intspec": "0",
            "lname": "ngettext",
            "maxargs": 3,
            "minargs": 3,
            "path": "editfns.c",
            "sname": "Sngettext"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is not a list.  Lists include nil.",
            "fnname": "Fnlistp",
            "intspec": "0",
            "lname": "nlistp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Snlistp"
        },
        {
            "args": [
                "seq"
            ],
            "attributes": null,
            "doc": "Reverse order of items in a list, vector or string SEQ.\nIf SEQ is a list, it should be nil-terminated.\nThis function may destructively modify SEQ to produce the value.",
            "fnname": "Fnreverse",
            "intspec": "0",
            "lname": "nreverse",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Snreverse"
        },
        {
            "args": [
                "n",
                "list"
            ],
            "attributes": null,
            "doc": "Modify LIST to keep only the first N elements.\nIf N is zero or negative, return nil.\nIf N is greater or equal to the length of LIST, return LIST unmodified.\nOtherwise, return LIST after truncating it.",
            "fnname": "Fntake",
            "intspec": "0",
            "lname": "ntake",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sntake"
        },
        {
            "args": [
                "n",
                "list"
            ],
            "attributes": null,
            "doc": "Return the Nth element of LIST.\nN counts from zero.  If LIST is not that long, nil is returned.",
            "fnname": "Fnth",
            "intspec": "0",
            "lname": "nth",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Snth"
        },
        {
            "args": [
                "n",
                "list"
            ],
            "attributes": null,
            "doc": "Take cdr N times on LIST, return the result.",
            "fnname": "Fnthcdr",
            "intspec": "0",
            "lname": "nthcdr",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Snthcdr"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is nil, and return nil otherwise.",
            "fnname": "Fnull",
            "intspec": "0",
            "lname": "null",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Snull"
        },
        {
            "args": [
                "query"
            ],
            "attributes": null,
            "doc": "Return the number of processors, a positive integer.\nEach usable thread execution unit counts as a processor.\nBy default, count the number of available processors,\noverridable via the OMP_NUM_THREADS environment variable.\nIf optional argument QUERY is `current', ignore OMP_NUM_THREADS.\nIf QUERY is `all', also count processors not available.",
            "fnname": "Fnum_processors",
            "intspec": "0",
            "lname": "num-processors",
            "maxargs": 1,
            "minargs": 0,
            "path": "process.c",
            "sname": "Snum_processors"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a number or a marker.",
            "fnname": "Fnumber_or_marker_p",
            "intspec": "0",
            "lname": "number-or-marker-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Snumber_or_marker_p"
        },
        {
            "args": [
                "number"
            ],
            "attributes": null,
            "doc": "Return the decimal representation of NUMBER as a string.\nUses a minus sign if negative.\nNUMBER may be an integer or a floating point number.",
            "fnname": "Fnumber_to_string",
            "intspec": "0",
            "lname": "number-to-string",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Snumber_to_string"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is a number (floating point or integer).",
            "fnname": "Fnumberp",
            "intspec": "0",
            "lname": "numberp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Snumberp"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return a copy of the text properties of OBJECT.\nOBJECT must be a buffer or a string.\n\nAltering this copy does not change the layout of the text properties\nin OBJECT.",
            "fnname": "Fobject_intervals",
            "intspec": "0",
            "lname": "object-intervals",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sobject_intervals"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the old selected FRAME.\nFRAME must be a live frame and defaults to the selected one.\n\nThe return value is the frame selected the last time window change\nfunctions were run.",
            "fnname": "Fold_selected_frame",
            "intspec": "0",
            "lname": "old-selected-frame",
            "maxargs": 0,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sold_selected_frame"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the old selected window.\nThe return value is the window selected the last time window change\nfunctions were run.",
            "fnname": "Fold_selected_window",
            "intspec": "0",
            "lname": "old-selected-window",
            "maxargs": 0,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sold_selected_window"
        },
        {
            "args": [
                "file"
            ],
            "attributes": null,
            "doc": "Start writing input events to a dribble file called FILE.\nAny previously open dribble file will be closed first.  If FILE is\nnil, just close the dribble file, if any.\n\nIf the file is still open when Emacs exits, it will be closed then.\n\nThe events written to the file include keyboard and mouse input\nevents, but not events from executing keyboard macros.  The events are\nwritten to the dribble file immediately without line buffering.\n\nBe aware that this records ALL characters you type!\nThis may include sensitive information such as passwords.",
            "fnname": "Fopen_dribble_file",
            "intspec": "FOpen dribble file: ",
            "lname": "open-dribble-file",
            "maxargs": 1,
            "minargs": 1,
            "path": "keyboard.c",
            "sname": "Sopen_dribble_file"
        },
        {
            "args": [
                "font_entity",
                "size",
                "frame"
            ],
            "attributes": null,
            "doc": "Open FONT-ENTITY.",
            "fnname": "Fopen_font",
            "intspec": "0",
            "lname": "open-font",
            "maxargs": 3,
            "minargs": 1,
            "path": "font.c",
            "sname": "Sopen_font"
        },
        {
            "args": [
                "file"
            ],
            "attributes": null,
            "doc": "Start writing all terminal output to FILE as well as the terminal.\nFILE = nil means just close any termscript file currently open.",
            "fnname": "Fopen_termscript",
            "intspec": "FOpen termscript file: ",
            "lname": "open-termscript",
            "maxargs": 1,
            "minargs": 1,
            "path": "dispnew.c",
            "sname": "Sopen_termscript"
        },
        {
            "args": [
                "char_table",
                "test"
            ],
            "attributes": null,
            "doc": "Optimize CHAR-TABLE.\nTEST is the comparison function used to decide whether two entries are\nequivalent and can be merged.  It defaults to `equal'.",
            "fnname": "Foptimize_char_table",
            "intspec": "0",
            "lname": "optimize-char-table",
            "maxargs": 2,
            "minargs": 1,
            "path": "chartab.c",
            "sname": "Soptimize_char_table"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Eval args until one of them yields non-nil, then return that value.\nThe remaining args are not evalled at all.\nIf all args return nil, return nil.\nusage: (or CONDITIONS...)",
            "fnname": "For",
            "intspec": "0",
            "lname": "or",
            "maxargs": -2,
            "minargs": 0,
            "path": "eval.c",
            "sname": "Sor"
        },
        {
            "args": [
                "buffer",
                "visible_ok",
                "frame"
            ],
            "attributes": null,
            "doc": "Return most recently selected buffer other than BUFFER.\nBuffers not visible in windows are preferred to visible buffers, unless\noptional second argument VISIBLE-OK is non-nil.  Ignore the argument\nBUFFER unless it denotes a live buffer.  If the optional third argument\nFRAME specifies a live frame, then use that frame's buffer list instead\nof the selected frame's buffer list.\n\nThe buffer is found by scanning the selected or specified frame's buffer\nlist first, followed by the list of all buffers.  If no other buffer\nexists, return the buffer `*scratch*' (creating it if necessary).",
            "fnname": "Fother_buffer",
            "intspec": "0",
            "lname": "other-buffer",
            "maxargs": 3,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Sother_buffer"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the other window for \\\"other window scroll\\\" commands.\nIf in the minibuffer, `minibuffer-scroll-window' if non-nil\nspecifies the window.\nOtherwise, if `other-window-scroll-buffer' is non-nil, a window\nshowing that buffer is used, popping the buffer up if necessary.\nFinally, look for a neighboring window on the selected frame,\nfollowed by all visible frames on the current terminal.",
            "fnname": "Fother_window_for_scrolling",
            "intspec": "0",
            "lname": "other-window-for-scrolling",
            "maxargs": 0,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sother_window_for_scrolling"
        },
        {
            "args": [
                "overlay"
            ],
            "attributes": null,
            "doc": "Return the buffer OVERLAY belongs to.\nReturn nil if OVERLAY has been deleted.",
            "fnname": "Foverlay_buffer",
            "intspec": "0",
            "lname": "overlay-buffer",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Soverlay_buffer"
        },
        {
            "args": [
                "overlay"
            ],
            "attributes": null,
            "doc": "Return the position at which OVERLAY ends.",
            "fnname": "Foverlay_end",
            "intspec": "0",
            "lname": "overlay-end",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Soverlay_end"
        },
        {
            "args": [
                "overlay",
                "prop"
            ],
            "attributes": null,
            "doc": "Get the property of overlay OVERLAY with property name PROP.",
            "fnname": "Foverlay_get",
            "intspec": "0",
            "lname": "overlay-get",
            "maxargs": 2,
            "minargs": 2,
            "path": "buffer.c",
            "sname": "Soverlay_get"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list giving all the overlays of the current buffer.\n\nFor backward compatibility, the value is actually a list that\nholds another list; the overlays are in the inner list.\nThe list you get is a copy, so that changing it has no effect.\nHowever, the overlays you get are the real objects that the buffer uses.",
            "fnname": "Foverlay_lists",
            "intspec": "0",
            "lname": "overlay-lists",
            "maxargs": 0,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Soverlay_lists"
        },
        {
            "args": [
                "overlay"
            ],
            "attributes": null,
            "doc": "Return a list of the properties on OVERLAY.\nThis is a copy of OVERLAY's plist; modifying its conses has no effect on\nOVERLAY.",
            "fnname": "Foverlay_properties",
            "intspec": "0",
            "lname": "overlay-properties",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Soverlay_properties"
        },
        {
            "args": [
                "overlay",
                "prop",
                "value"
            ],
            "attributes": null,
            "doc": "Set one property of overlay OVERLAY: give property PROP value VALUE.\nVALUE will be returned.",
            "fnname": "Foverlay_put",
            "intspec": "0",
            "lname": "overlay-put",
            "maxargs": 3,
            "minargs": 3,
            "path": "buffer.c",
            "sname": "Soverlay_put"
        },
        {
            "args": [
                "pos"
            ],
            "attributes": null,
            "doc": "Recenter the overlays of the current buffer around position POS.\nThat makes overlay lookup faster for positions near POS (but perhaps slower\nfor positions far away from POS).\n\nSince Emacs 29.1, this function is a no-op, because the implementation\nof overlays changed and their lookup is now fast regardless of their\nposition in the buffer.  In particular, this function no longer affects\nthe value returned by `overlay-lists'.",
            "fnname": "Foverlay_recenter",
            "intspec": "0",
            "lname": "overlay-recenter",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Soverlay_recenter"
        },
        {
            "args": [
                "overlay"
            ],
            "attributes": null,
            "doc": "Return the position at which OVERLAY starts.",
            "fnname": "Foverlay_start",
            "intspec": "0",
            "lname": "overlay-start",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Soverlay_start"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Get the overlay tree for BUFFER.",
            "fnname": "Foverlay_tree",
            "intspec": "0",
            "lname": "overlay-tree",
            "maxargs": 1,
            "minargs": 0,
            "path": "buffer.c",
            "sname": "Soverlay_tree"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is an overlay.",
            "fnname": "Foverlayp",
            "intspec": "0",
            "lname": "overlayp",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Soverlayp"
        },
        {
            "args": [
                "pos",
                "sorted"
            ],
            "attributes": null,
            "doc": "Return a list of the overlays that contain the character at POS.\nIf SORTED is non-nil, then sort them by decreasing priority.\n\nZero-length overlays that start and stop at POS are not included in\nthe return value.  Instead use `overlays-in' if those overlays are of\ninterest.",
            "fnname": "Foverlays_at",
            "intspec": "0",
            "lname": "overlays-at",
            "maxargs": 2,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Soverlays_at"
        },
        {
            "args": [
                "beg",
                "end"
            ],
            "attributes": null,
            "doc": "Return a list of the overlays that overlap the region BEG ... END.\nOverlap means that at least one character is contained within the overlay\nand also contained within the specified region.\n\nEmpty overlays are included in the result if they are located at BEG,\nbetween BEG and END, or at END provided END denotes the position at the\nend of the accessible part of the buffer.\n\nThe resulting list of overlays is in an arbitrary unpredictable order.",
            "fnname": "Foverlays_in",
            "intspec": "0",
            "lname": "overlays-in",
            "maxargs": 2,
            "minargs": 2,
            "path": "buffer.c",
            "sname": "Soverlays_in"
        },
        {
            "args": [
                "from",
                "to",
                "targetdepth",
                "stopbefore",
                "oldstate",
                "commentstop"
            ],
            "attributes": null,
            "doc": "Parse Lisp syntax starting at FROM until TO; return status of parse at TO.\nParsing stops at TO or when certain criteria are met;\n point is set to where parsing stops.\n\nIf OLDSTATE is omitted or nil, parsing assumes that FROM is the\n beginning of a function.  If not, OLDSTATE should be the state at\n FROM.\n\nValue is a list of elements describing final state of parsing:\n 0. depth in parens.\n 1. character address of start of innermost containing list; nil if none.\n 2. character address of start of last complete sexp terminated.\n 3. non-nil if inside a string.\n    (it is the character that will terminate the string,\n     or t if the string should be terminated by a generic string delimiter.)\n 4. nil if outside a comment, t if inside a non-nestable comment,\n    else an integer (the current comment nesting).\n 5. t if following a quote character.\n 6. the minimum paren-depth encountered during this scan.\n 7. style of comment, if any.\n 8. character address of start of comment or string; nil if not in one.\n 9. List of positions of currently open parens, outermost first.\n10. When the last position scanned holds the first character of a\n    (potential) two character construct, the syntax of that position,\n    otherwise nil.  That construct can be a two character comment\n    delimiter or an Escaped or Char-quoted character.\n11..... Possible further internal information used by `parse-partial-sexp'.\n\nIf third arg TARGETDEPTH is non-nil, parsing stops if the depth\nin parentheses becomes equal to TARGETDEPTH.\nFourth arg STOPBEFORE non-nil means stop when we come to\n any character that starts a sexp.\nFifth arg OLDSTATE is a list like what this function returns.\n It is used to initialize the state of the parse.  Elements number 1, 2, 6\n are ignored.\nSixth arg COMMENTSTOP non-nil means stop after the start of a comment.\n If it is the symbol `syntax-table', stop after the start of a comment or a\n string, or after end of a comment or a string.",
            "fnname": "Fparse_partial_sexp",
            "intspec": "0",
            "lname": "parse-partial-sexp",
            "maxargs": 6,
            "minargs": 2,
            "path": "syntax.c",
            "sname": "Sparse_partial_sexp"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return statistics about portable dumping used by this session.\nIf this Emacs session was started from a dump file,\nthe return value is an alist of the form:\n\n  ((dumped-with-pdumper . t) (load-time . TIME) (dump-file-name . FILE))\n\nwhere TIME is the time in seconds it took to restore Emacs state\nfrom the dump file, and FILE is the name of the dump file.\nValue is nil if this session was not started using a dump file.",
            "fnname": "Fpdumper_stats",
            "intspec": "0",
            "lname": "pdumper-stats",
            "maxargs": 0,
            "minargs": 0,
            "path": "pdumper.c",
            "sname": "Spdumper_stats"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the name of the Gdk backend display class of TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.",
            "fnname": "Fpgtk_backend_display_class",
            "intspec": "",
            "lname": "pgtk-backend-display-class",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Spgtk_backend_display_class"
        },
        {
            "args": [
                "selection",
                "time_object",
                "terminal"
            ],
            "attributes": null,
            "doc": "If we own the selection SELECTION, disown it.\nDisowning it means there is no such selection.\n\nSets the last-change time for the selection to TIME-OBJECT (by default\nthe time of the last event).\n\nTERMINAL should be a terminal object or a frame specifying the X\nserver to query.  If omitted or nil, that stands for the selected\nframe's display, or the first available X display.",
            "fnname": "Fpgtk_disown_selection_internal",
            "intspec": "0",
            "lname": "pgtk-disown-selection-internal",
            "maxargs": 3,
            "minargs": 1,
            "path": "pgtkselect.c",
            "sname": "Spgtk_disown_selection_internal"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return a list of physical monitor attributes on the X display TERMINAL.\n\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nIn addition to the standard attribute keys listed in\n`display-monitor-attributes-list', the following keys are contained in\nthe attributes:\n\n source -- String describing the source from which multi-monitor\n           information is obtained, \\\"Gdk\\\"\n\nInternal use only, use `display-monitor-attributes-list' instead.",
            "fnname": "Fpgtk_display_monitor_attributes_list",
            "intspec": "0",
            "lname": "pgtk-display-monitor-attributes-list",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Spgtk_display_monitor_attributes_list"
        },
        {
            "args": [
                "success",
                "timestamp",
                "delete"
            ],
            "attributes": null,
            "doc": "Finish the drag-n-drop event that happened at TIMESTAMP.\nSUCCESS is whether or not the drop was successful, i.e. the action\nchosen in the last call to `pgtk-update-drop-status' was performed.\nTIMESTAMP is the time associated with the drag-n-drop event that is\nbeing finished.\nDELETE is whether or not the action was `move'.",
            "fnname": "Fpgtk_drop_finish",
            "intspec": "0",
            "lname": "pgtk-drop-finish",
            "maxargs": 3,
            "minargs": 3,
            "path": "pgtkselect.c",
            "sname": "Spgtk_drop_finish"
        },
        {
            "args": [
                "name"
            ],
            "attributes": null,
            "doc": "Determine font PostScript or family name for font NAME.\nNAME should be a string containing either the font name or an XLFD\nfont descriptor.  If string contains `fontset' and not\n`fontset-startup', it is left alone.",
            "fnname": "Fpgtk_font_name",
            "intspec": "0",
            "lname": "pgtk-font-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "pgtkfns.c",
            "sname": "Spgtk_font_name"
        },
        {
            "args": [
                "frame",
                "type"
            ],
            "attributes": null,
            "doc": "Return edge coordinates of FRAME.\nFRAME must be a live frame and defaults to the selected one.  The return\nvalue is a list of the form (LEFT, TOP, RIGHT, BOTTOM).  All values are\nin pixels relative to the origin - the position (0, 0) - of FRAME's\ndisplay.\n\nIf optional argument TYPE is the symbol `outer-edges', return the outer\nedges of FRAME.  The outer edges comprise the decorations of the window\nmanager (like the title bar or external borders) as well as any external\nmenu or tool bar of FRAME.  If optional argument TYPE is the symbol\n`native-edges' or nil, return the native edges of FRAME.  The native\nedges exclude the decorations of the window manager and any external\nmenu or tool bar of FRAME.  If TYPE is the symbol `inner-edges', return\nthe inner edges of FRAME.  These edges exclude title bar, any borders,\nmenu bar or tool bar of FRAME.",
            "fnname": "Fpgtk_frame_edges",
            "intspec": "0",
            "lname": "pgtk-frame-edges",
            "maxargs": 2,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Spgtk_frame_edges"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return geometric attributes of FRAME.\nFRAME must be a live frame and defaults to the selected one.  The return\nvalue is an association list of the attributes listed below.  All height\nand width values are in pixels.\n\n`outer-position' is a cons of the outer left and top edges of FRAME\nrelative to the origin - the position (0, 0) - of FRAME's display.\n\n`outer-size' is a cons of the outer width and height of FRAME.  The\nouter size includes the title bar and the external borders as well as\nany menu and/or tool bar of frame.\n\n`external-border-size' is a cons of the horizontal and vertical width of\nFRAME's external borders as supplied by the window manager.\n\n`title-bar-size' is a cons of the width and height of the title bar of\nFRAME as supplied by the window manager.  If both of them are zero,\nFRAME has no title bar.  If only the width is zero, Emacs was not\nable to retrieve the width information.\n\n`menu-bar-external', if non-nil, means the menu bar is external (never\nincluded in the inner edges of FRAME).\n\n`menu-bar-size' is a cons of the width and height of the menu bar of\nFRAME.\n\n`tool-bar-external', if non-nil, means the tool bar is external (never\nincluded in the inner edges of FRAME).\n\n`tool-bar-position' tells on which side the tool bar on FRAME is and can\nbe one of `left', `top', `right' or `bottom'.  If this is nil, FRAME\nhas no tool bar.\n\n`tool-bar-size' is a cons of the width and height of the tool bar of\nFRAME.\n\n`internal-border-width' is the width of the internal border of\nFRAME.",
            "fnname": "Fpgtk_frame_geometry",
            "intspec": "0",
            "lname": "pgtk-frame-geometry",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Spgtk_frame_geometry"
        },
        {
            "args": [
                "frame1",
                "frame2",
                "above"
            ],
            "attributes": null,
            "doc": "Restack FRAME1 below FRAME2.\nThis means that if both frames are visible and the display areas of\nthese frames overlap, FRAME2 (partially) obscures FRAME1.  If optional\nthird argument ABOVE is non-nil, restack FRAME1 above FRAME2.  This\nmeans that if both frames are visible and the display areas of these\nframes overlap, FRAME1 (partially) obscures FRAME2.\n\nThis may be thought of as an atomic action performed in two steps: The\nfirst step removes FRAME1's window-step window from the display.  The\nsecond step reinserts FRAME1's window below (above if ABOVE is true)\nthat of FRAME2.  Hence the position of FRAME2 in its display's Z\n\\(stacking) order relative to all other frames excluding FRAME1 remains\nunaltered.\n\nSome window managers may refuse to restack windows.",
            "fnname": "Fpgtk_frame_restack",
            "intspec": "0",
            "lname": "pgtk-frame-restack",
            "maxargs": 3,
            "minargs": 2,
            "path": "pgtkfns.c",
            "sname": "Spgtk_frame_restack"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the value of the current page setup.\nThe return value is an alist containing the following keys:\n\norientation: page orientation (symbol `portrait', `landscape',\n`reverse-portrait', or `reverse-landscape').\nwidth, height: page width/height in points not including margins.\nleft-margin, right-margin, top-margin, bottom-margin: print margins,\nwhich is the parts of the page that the printer cannot print\non, in points.\n\nThe paper width can be obtained as the sum of width, left-margin, and\nright-margin values if the page orientation is `portrait' or\n`reverse-portrait'.  Otherwise, it is the sum of width, top-margin,\nand bottom-margin values.  Likewise, the paper height is the sum of\nheight, top-margin, and bottom-margin values if the page orientation\nis `portrait' or `reverse-portrait'.  Otherwise, it is the sum of\nheight, left-margin, and right-margin values.",
            "fnname": "Fpgtk_get_page_setup",
            "intspec": "0",
            "lname": "pgtk-get-page-setup",
            "maxargs": 0,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Spgtk_get_page_setup"
        },
        {
            "args": [
                "selection_symbol",
                "target_type",
                "time_stamp",
                "terminal"
            ],
            "attributes": null,
            "doc": "Return text selected from some X window.\nSELECTION-SYMBOL is typically `PRIMARY', `SECONDARY', or `CLIPBOARD'.\n\\(Those are literal upper-case symbol names, since that's what X expects.)\nTARGET-TYPE is the type of data desired, typically `STRING'.\n\nTIME-STAMP is the time to use in the XConvertSelection call for foreign\nselections.  If omitted, defaults to the time for the last event.\n\nTERMINAL should be a terminal object or a frame specifying the X\nserver to query.  If omitted or nil, that stands for the selected\nframe's display, or the first available X display.",
            "fnname": "Fpgtk_get_selection_internal",
            "intspec": "0",
            "lname": "pgtk-get-selection-internal",
            "maxargs": 4,
            "minargs": 2,
            "path": "pgtkselect.c",
            "sname": "Spgtk_get_selection_internal"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return absolute position of mouse cursor in pixels.\nThe position is returned as a cons cell (X . Y) of the\ncoordinates of the mouse cursor position in pixels relative to a\nposition (0, 0) of the selected frame's terminal.",
            "fnname": "Fpgtk_mouse_absolute_pixel_position",
            "intspec": "0",
            "lname": "pgtk-mouse-absolute-pixel-position",
            "maxargs": 0,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Spgtk_mouse_absolute_pixel_position"
        },
        {
            "args": [
                "selection",
                "value",
                "frame"
            ],
            "attributes": null,
            "doc": "Assert a selection of type SELECTION and value VALUE.\nSELECTION is a symbol, typically `PRIMARY', `SECONDARY', or `CLIPBOARD'.\n\\(Those are literal upper-case symbol names, since that's what GDK expects.)\nVALUE is typically a string, or a cons of two markers, but may be\nanything that the functions on `selection-converter-alist' know about.\n\nFRAME should be a frame that should own the selection.  If omitted or\nnil, it defaults to the selected frame.",
            "fnname": "Fpgtk_own_selection_internal",
            "intspec": "0",
            "lname": "pgtk-own-selection-internal",
            "maxargs": 3,
            "minargs": 2,
            "path": "pgtkselect.c",
            "sname": "Spgtk_own_selection_internal"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Pop up a page setup dialog.\nThe current page setup can be obtained using `x-get-page-setup'.",
            "fnname": "Fpgtk_page_setup_dialog",
            "intspec": "0",
            "lname": "pgtk-page-setup-dialog",
            "maxargs": 0,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Spgtk_page_setup_dialog"
        },
        {
            "args": [
                "frames"
            ],
            "attributes": null,
            "doc": "Pop up a print dialog to print the current contents of FRAMES.\nFRAMES should be nil (the selected frame), a frame, or a list of\nframes (each of which corresponds to one page).  Each frame should be\nvisible.",
            "fnname": "Fpgtk_print_frames_dialog",
            "intspec": "",
            "lname": "pgtk-print-frames-dialog",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Spgtk_print_frames_dialog"
        },
        {
            "args": [
                "frame",
                "targets"
            ],
            "attributes": null,
            "doc": "Register TARGETS on FRAME.\nTARGETS should be a list of strings describing data types (selection\ntargets) that can be dropped on top of FRAME.",
            "fnname": "Fpgtk_register_dnd_targets",
            "intspec": "0",
            "lname": "pgtk-register-dnd-targets",
            "maxargs": 2,
            "minargs": 2,
            "path": "pgtkselect.c",
            "sname": "Spgtk_register_dnd_targets"
        },
        {
            "args": [
                "selection",
                "terminal"
            ],
            "attributes": null,
            "doc": "Whether there is an owner for the given selection.\nSELECTION should be the name of the selection in question, typically\none of the symbols `PRIMARY', `SECONDARY', `CLIPBOARD', or\n`CLIPBOARD_MANAGER' (GDK expects these literal upper-case names.)  The\nsymbol nil is the same as `PRIMARY', and t is the same as `SECONDARY'.\n\nTERMINAL should be a terminal object or a frame specifying the GDK\nserver to query.  If omitted or nil, that stands for the selected\nframe's display, or the first available X display.",
            "fnname": "Fpgtk_selection_exists_p",
            "intspec": "0",
            "lname": "pgtk-selection-exists-p",
            "maxargs": 2,
            "minargs": 0,
            "path": "pgtkselect.c",
            "sname": "Spgtk_selection_exists_p"
        },
        {
            "args": [
                "selection",
                "terminal"
            ],
            "attributes": null,
            "doc": "Whether the current Emacs process owns the given selection.\nThe arg should be the name of the selection in question, typically one of\nthe symbols `PRIMARY', `SECONDARY', or `CLIPBOARD'.\n\\(Those are literal upper-case symbol names, since that's what GDK expects.)\nFor convenience, the symbol nil is the same as `PRIMARY',\nand t is the same as `SECONDARY'.\n\nTERMINAL should be a terminal object or a frame specifying the GDK\nserver to query.  If omitted or nil, that stands for the selected\nframe's display, or the first available X display.",
            "fnname": "Fpgtk_selection_owner_p",
            "intspec": "0",
            "lname": "pgtk-selection-owner-p",
            "maxargs": 2,
            "minargs": 0,
            "path": "pgtkselect.c",
            "sname": "Spgtk_selection_owner_p"
        },
        {
            "args": [
                "monitor_model",
                "scale_factor"
            ],
            "attributes": null,
            "doc": "Set monitor MONITOR-MODEL's scale factor to SCALE-FACTOR.\nSince Gdk's scale factor is integer, physical pixel width/height is\nincorrect when you specify fractional scale factor in compositor.\nIf you set scale factor by this function, it is used instead of Gdk's one.\n\nPass nil as SCALE-FACTOR if you want to reset the specified monitor's\nscale factor.",
            "fnname": "Fpgtk_set_monitor_scale_factor",
            "intspec": "0",
            "lname": "pgtk-set-monitor-scale-factor",
            "maxargs": 2,
            "minargs": 2,
            "path": "pgtkfns.c",
            "sname": "Spgtk_set_monitor_scale_factor"
        },
        {
            "args": [
                "x",
                "y"
            ],
            "attributes": null,
            "doc": "Move mouse pointer to absolute pixel position (X, Y).\nThe coordinates X and Y are interpreted in pixels relative to a position\n\\(0, 0) of the selected frame's display.",
            "fnname": "Fpgtk_set_mouse_absolute_pixel_position",
            "intspec": "0",
            "lname": "pgtk-set-mouse-absolute-pixel-position",
            "maxargs": 2,
            "minargs": 2,
            "path": "pgtkfns.c",
            "sname": "Spgtk_set_mouse_absolute_pixel_position"
        },
        {
            "args": [
                "attribute",
                "value"
            ],
            "attributes": null,
            "doc": "Set the value of ATTRIBUTE, of class CLASS, as VALUE, into defaults database.",
            "fnname": "Fpgtk_set_resource",
            "intspec": "0",
            "lname": "pgtk-set-resource",
            "maxargs": 2,
            "minargs": 2,
            "path": "pgtkfns.c",
            "sname": "Spgtk_set_resource"
        },
        {
            "args": [
                "action",
                "timestamp"
            ],
            "attributes": null,
            "doc": "Update the status of the current drag-and-drop operation.\nACTION is the action the drop source should take.\nTIMESTAMP is the same as in `pgtk-drop-finish'.",
            "fnname": "Fpgtk_update_drop_status",
            "intspec": "0",
            "lname": "pgtk-update-drop-status",
            "maxargs": 2,
            "minargs": 2,
            "path": "pgtkselect.c",
            "sname": "Spgtk_update_drop_status"
        },
        {
            "args": [
                "use_p",
                "terminal"
            ],
            "attributes": null,
            "doc": "Set whether to use GtkIMContext.",
            "fnname": "Fpgtk_use_im_context",
            "intspec": "0",
            "lname": "pgtk-use-im-context",
            "maxargs": 2,
            "minargs": 1,
            "path": "pgtkim.c",
            "sname": "Spgtk_use_im_context"
        },
        {
            "args": [
                "sound"
            ],
            "attributes": null,
            "doc": "Play sound SOUND.\n\nInternal use only, use `play-sound' instead.",
            "fnname": "Fplay_sound_internal",
            "intspec": "0",
            "lname": "play-sound-internal",
            "maxargs": 1,
            "minargs": 1,
            "path": "sound.c",
            "sname": "Splay_sound_internal"
        },
        {
            "args": [
                "plist",
                "prop",
                "predicate"
            ],
            "attributes": null,
            "doc": "Extract a value from a property list.\nPLIST is a property list, which is a list of the form\n\\(PROP1 VALUE1 PROP2 VALUE2...).\n\nThis function returns the value corresponding to the given PROP, or\nnil if PROP is not one of the properties on the list.  The comparison\nwith PROP is done using PREDICATE, which defaults to `eq'.\n\nThis function doesn't signal an error if PLIST is invalid.",
            "fnname": "Fplist_get",
            "intspec": "0",
            "lname": "plist-get",
            "maxargs": 3,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Splist_get"
        },
        {
            "args": [
                "plist",
                "prop",
                "predicate"
            ],
            "attributes": null,
            "doc": "Return non-nil if PLIST has the property PROP.\nPLIST is a property list, which is a list of the form\n\\(PROP1 VALUE1 PROP2 VALUE2 ...).\n\nThe comparison with PROP is done using PREDICATE, which defaults to\n`eq'.\n\nUnlike `plist-get', this allows you to distinguish between a missing\nproperty and a property with the value nil.\nThe value is actually the tail of PLIST whose car is PROP.",
            "fnname": "Fplist_member",
            "intspec": "0",
            "lname": "plist-member",
            "maxargs": 3,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Splist_member"
        },
        {
            "args": [
                "plist",
                "prop",
                "val",
                "predicate"
            ],
            "attributes": null,
            "doc": "Change value in PLIST of PROP to VAL.\nPLIST is a property list, which is a list of the form\n\\(PROP1 VALUE1 PROP2 VALUE2 ...).\n\nThe comparison with PROP is done using PREDICATE, which defaults to `eq'.\n\nIf PROP is already a property on the list, its value is set to VAL,\notherwise the new PROP VAL pair is added.  The new plist is returned;\nuse `(setq x (plist-put x prop val))' to be sure to use the new value.\nThe PLIST is modified by side effects.",
            "fnname": "Fplist_put",
            "intspec": "0",
            "lname": "plist-put",
            "maxargs": 4,
            "minargs": 3,
            "path": "fns.c",
            "sname": "Splist_put"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return value of point, as an integer.\nBeginning of buffer is position (point-min).",
            "fnname": "Fpoint",
            "intspec": "0",
            "lname": "point",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Spoint"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return value of point, as a marker object.",
            "fnname": "Fpoint_marker",
            "intspec": "0",
            "lname": "point-marker",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Spoint_marker"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the maximum permissible value of point in the current buffer.\nThis is (1+ (buffer-size)), unless narrowing (a buffer restriction)\nis in effect, in which case it is less.",
            "fnname": "Fpoint_max",
            "intspec": "0",
            "lname": "point-max",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Spoint_max"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a marker to the maximum permissible value of point in this buffer.\nThis is (1+ (buffer-size)), unless narrowing (a buffer restriction)\nis in effect, in which case it is less.",
            "fnname": "Fpoint_max_marker",
            "intspec": "0",
            "lname": "point-max-marker",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Spoint_max_marker"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the minimum permissible value of point in the current buffer.\nThis is 1, unless narrowing (a buffer restriction) is in effect.",
            "fnname": "Fpoint_min",
            "intspec": "0",
            "lname": "point-min",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Spoint_min"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a marker to the minimum permissible value of point in this buffer.\nThis is the beginning, unless narrowing (a buffer restriction) is in effect.",
            "fnname": "Fpoint_min_marker",
            "intspec": "0",
            "lname": "point-min-marker",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Spoint_min_marker"
        },
        {
            "args": [
                "n"
            ],
            "attributes": null,
            "doc": "Return the position of the first character on the current line.\nWith optional argument N, scan forward N - 1 lines first.\nIf the scan reaches the end of the buffer, return that position.\n\nThis function ignores text display directionality; it returns the\nposition of the first character in logical order, i.e. the smallest\ncharacter position on the logical line.  See `vertical-motion' for\nmovement by screen lines.\n\nThis function does not move point.  Also see `line-beginning-position'.",
            "fnname": "Fpos_bol",
            "intspec": "0",
            "lname": "pos-bol",
            "maxargs": 1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Spos_bol"
        },
        {
            "args": [
                "n"
            ],
            "attributes": null,
            "doc": "Return the position of the last character on the current line.\nWith argument N not nil or 1, move forward N - 1 lines first.\nIf scan reaches end of buffer, return that position.\n\nThis function ignores text display directionality; it returns the\nposition of the last character in logical order, i.e. the largest\ncharacter position on the line.\n\nThis function does not move point.  Also see `line-end-position'.",
            "fnname": "Fpos_eol",
            "intspec": "0",
            "lname": "pos-eol",
            "maxargs": 1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Spos_eol"
        },
        {
            "args": [
                "pos",
                "window",
                "partially"
            ],
            "attributes": null,
            "doc": "Return non-nil if position POS is currently on the frame in WINDOW.\nWINDOW must be a live window and defaults to the selected one.\n\nReturn nil if that position is scrolled vertically out of view.  If a\ncharacter is only partially visible, nil is returned, unless the\noptional argument PARTIALLY is non-nil.  If POS is only out of view\nbecause of horizontal scrolling, return non-nil.  If POS is t, it\nspecifies either the first position displayed on the last visible\nscreen line in WINDOW, or the end-of-buffer position, whichever comes\nfirst.  POS defaults to point in WINDOW; WINDOW defaults to the\nselected window.\n\nIf POS is visible, return t if PARTIALLY is nil; if PARTIALLY is non-nil,\nthe return value is a list of 2 or 6 elements (X Y [RTOP RBOT ROWH VPOS]),\nwhere X and Y are the pixel coordinates relative to the top left corner\nof the window.  The remaining elements are omitted if the character after\nPOS is fully visible; otherwise, RTOP and RBOT are the number of pixels\noff-window at the top and bottom of the screen line (\"row\") containing\nPOS, ROWH is the visible height of that row, and VPOS is the row number\n\\(zero-based).",
            "fnname": "Fpos_visible_in_window_p",
            "intspec": "0",
            "lname": "pos-visible-in-window-p",
            "maxargs": 3,
            "minargs": 0,
            "path": "window.c",
            "sname": "Spos_visible_in_window_p"
        },
        {
            "args": [
                "position"
            ],
            "attributes": null,
            "doc": "Return the byte position for character position POSITION.\nIf POSITION is out of range, the value is nil.",
            "fnname": "Fposition_bytes",
            "intspec": "0",
            "lname": "position-bytes",
            "maxargs": 1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Sposition_bytes"
        },
        {
            "args": [
                "sym",
                "pos"
            ],
            "attributes": null,
            "doc": "Create a new symbol with position.\nSYM is a symbol, with or without position, the symbol to position.\nPOS, the position, is either a fixnum or a symbol with position from which\nthe position will be taken.",
            "fnname": "Fposition_symbol",
            "intspec": "0",
            "lname": "position-symbol",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sposition_symbol"
        },
        {
            "args": [
                "regexp",
                "inhibit_modify"
            ],
            "attributes": null,
            "doc": "Return t if text after point matches REGEXP according to Posix rules.\nFind the longest match, in accordance with Posix regular expression rules.\n\nBy default, this function modifies the match data that\n`match-beginning', `match-end' and `match-data' access.  If\nINHIBIT-MODIFY is non-nil, don't modify the match data.",
            "fnname": "Fposix_looking_at",
            "intspec": "0",
            "lname": "posix-looking-at",
            "maxargs": 2,
            "minargs": 1,
            "path": "search.c",
            "sname": "Sposix_looking_at"
        },
        {
            "args": [
                "regexp",
                "bound",
                "noerror",
                "count"
            ],
            "attributes": null,
            "doc": "Search backward from point for match for REGEXP according to Posix rules.\nFind the longest match in accord with Posix regular expression rules.\nSet point to the beginning of the occurrence found, and return point.\nAn optional second argument bounds the search; it is a buffer position.\n  The match found must not begin before that position.  A value of nil\n  means search to the beginning of the accessible portion of the buffer.\nOptional third argument, if t, means if fail just return nil (no error).\n  If not nil and not t, position at limit of search and return nil.\nOptional fourth argument COUNT, if a positive number, means to search\n  for COUNT successive occurrences.  If COUNT is negative, search\n  forward, instead of backward, for -COUNT occurrences.  A value of\n  nil means the same as 1.\nWith COUNT positive, the match found is the COUNTth to last one (or\n  last, if COUNT is 1 or nil) in the buffer located entirely before\n  the origin of the search; correspondingly with COUNT negative.\n\nSearch case-sensitivity is determined by the value of the variable\n`case-fold-search', which see.\n\nSee also the functions `match-beginning', `match-end', `match-string',\nand `replace-match'.",
            "fnname": "Fposix_search_backward",
            "intspec": "sPosix search backward: ",
            "lname": "posix-search-backward",
            "maxargs": 4,
            "minargs": 1,
            "path": "search.c",
            "sname": "Sposix_search_backward"
        },
        {
            "args": [
                "regexp",
                "bound",
                "noerror",
                "count"
            ],
            "attributes": null,
            "doc": "Search forward from point for REGEXP according to Posix rules.\nFind the longest match in accord with Posix regular expression rules.\nSet point to the end of the occurrence found, and return point.\nAn optional second argument bounds the search; it is a buffer position.\n  The match found must not end after that position.  A value of nil\n  means search to the end of the accessible portion of the buffer.\nOptional third argument, if t, means if fail just return nil (no error).\n  If not nil and not t, move to limit of search and return nil.\nOptional fourth argument COUNT, if a positive number, means to search\n  for COUNT successive occurrences.  If COUNT is negative, search\n  backward, instead of forward, for -COUNT occurrences.  A value of\n  nil means the same as 1.\nWith COUNT positive, the match found is the COUNTth one (or first,\n  if COUNT is 1 or nil) in the buffer located entirely after the\n  origin of the search; correspondingly with COUNT negative.\n\nSearch case-sensitivity is determined by the value of the variable\n`case-fold-search', which see.\n\nSee also the functions `match-beginning', `match-end', `match-string',\nand `replace-match'.",
            "fnname": "Fposix_search_forward",
            "intspec": "sPosix search: ",
            "lname": "posix-search-forward",
            "maxargs": 4,
            "minargs": 1,
            "path": "search.c",
            "sname": "Sposix_search_forward"
        },
        {
            "args": [
                "regexp",
                "string",
                "start",
                "inhibit_modify"
            ],
            "attributes": null,
            "doc": "Return index of start of first match for Posix REGEXP in STRING, or nil.\nFind the longest match, in accord with Posix regular expression rules.\nCase is ignored if `case-fold-search' is non-nil in the current buffer.\n\nIf INHIBIT-MODIFY is non-nil, match data is not changed.\n\nIf INHIBIT-MODIFY is nil or missing, match data is changed, and\n`match-end' and `match-beginning' give indices of substrings matched\nby parenthesis constructs in the pattern.  You can use the function\n`match-string' to extract the substrings matched by the parenthesis\nconstructions in REGEXP.  For index of first char beyond the match, do\n(match-end 0).",
            "fnname": "Fposix_string_match",
            "intspec": "0",
            "lname": "posix-string-match",
            "maxargs": 4,
            "minargs": 2,
            "path": "search.c",
            "sname": "Sposix_string_match"
        },
        {
            "args": [
                "pos",
                "window"
            ],
            "attributes": null,
            "doc": "Return position information for buffer position POS in WINDOW.\nPOS defaults to point in WINDOW; WINDOW defaults to the selected window.\n\nIf POS is in invisible text or is hidden by `display' properties,\nthis function may report on buffer positions before or after POS.\n\nReturn nil if POS is not visible in WINDOW.  Otherwise,\nthe return value is similar to that returned by `event-start' for\na mouse click at the upper left corner of the glyph corresponding\nto POS:\n   (WINDOW AREA-OR-POS (X . Y) TIMESTAMP OBJECT POS (COL . ROW)\n    IMAGE (DX . DY) (WIDTH . HEIGHT))\nThe `posn-' functions access elements of such lists.",
            "fnname": "Fposn_at_point",
            "intspec": "0",
            "lname": "posn-at-point",
            "maxargs": 2,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Sposn_at_point"
        },
        {
            "args": [
                "x",
                "y",
                "frame_or_window",
                "whole"
            ],
            "attributes": null,
            "doc": "Return position information for pixel coordinates X and Y.\nBy default, X and Y are relative to text area of the selected window.\nNote that the text area includes the header-line and the tab-line of\nthe window, if any of them are present.\nOptional third arg FRAME-OR-WINDOW non-nil specifies frame or window.\nIf optional fourth arg WHOLE is non-nil, X is relative to the left\nedge of the window.\n\nThe return value is similar to a mouse click position:\n   (WINDOW AREA-OR-POS (X . Y) TIMESTAMP OBJECT POS (COL . ROW)\n    IMAGE (DX . DY) (WIDTH . HEIGHT))\nThe `posn-' functions access elements of such lists.",
            "fnname": "Fposn_at_x_y",
            "intspec": "0",
            "lname": "posn-at-x-y",
            "maxargs": 4,
            "minargs": 2,
            "path": "keyboard.c",
            "sname": "Sposn_at_x_y"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the character preceding point, as a number.\nAt the beginning of the buffer or accessible region, return 0.",
            "fnname": "Fprevious_char",
            "intspec": "0",
            "lname": "preceding-char",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sprevious_char"
        },
        {
            "args": [
                "raw"
            ],
            "attributes": null,
            "doc": "Return numeric meaning of raw prefix argument RAW.\nA raw prefix argument is what you get from `(interactive \"P\")'.\nIts numeric meaning is what you would get from `(interactive \"p\")'.",
            "fnname": "Fprefix_numeric_value",
            "intspec": "0",
            "lname": "prefix-numeric-value",
            "maxargs": 1,
            "minargs": 1,
            "path": "callint.c",
            "sname": "Sprefix_numeric_value"
        },
        {
            "args": [
                "position",
                "limit"
            ],
            "attributes": null,
            "doc": "Return the position of previous text property or overlay change.\nScans characters backward in the current buffer from POSITION till it\nfinds a change in some text property, or the beginning or end of an\noverlay, and returns the position of that.\nIf none is found, and LIMIT is nil or omitted, the function\nreturns (point-min).\n\nIf the optional second argument LIMIT is non-nil, the function doesn't\nsearch before position LIMIT, and returns LIMIT if nothing is found\nbefore LIMIT.  LIMIT is a no-op if it is less than (point-min).",
            "fnname": "Fprevious_char_property_change",
            "intspec": "0",
            "lname": "previous-char-property-change",
            "maxargs": 2,
            "minargs": 1,
            "path": "textprop.c",
            "sname": "Sprevious_char_property_change"
        },
        {
            "args": [
                "frame",
                "miniframe"
            ],
            "attributes": null,
            "doc": "Return the previous frame in the frame list before FRAME.\nIt considers only frames on the same terminal as FRAME.\nBy default, skip minibuffer-only frames.\nIf omitted, FRAME defaults to the selected frame.\nIf optional argument MINIFRAME is nil, exclude minibuffer-only frames.\nIf MINIFRAME is a window, include only its own frame\nand any frame now using that window as the minibuffer.\nIf MINIFRAME is `visible', include all visible frames.\nIf MINIFRAME is 0, include all visible and iconified frames.\nOtherwise, include all frames.",
            "fnname": "Fprevious_frame",
            "intspec": "0",
            "lname": "previous-frame",
            "maxargs": 2,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sprevious_frame"
        },
        {
            "args": [
                "pos"
            ],
            "attributes": null,
            "doc": "Return the previous position before POS where an overlay starts or ends.\nIf there are no overlay boundaries from (point-min) to POS,\nthe value is (point-min).",
            "fnname": "Fprevious_overlay_change",
            "intspec": "0",
            "lname": "previous-overlay-change",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sprevious_overlay_change"
        },
        {
            "args": [
                "position",
                "object",
                "limit"
            ],
            "attributes": null,
            "doc": "Return the position of previous property change.\nScans characters backwards from POSITION in OBJECT till it finds\na change in some text property, then returns the position of the change.\nIf the optional second argument OBJECT is a buffer (or nil, which means\nthe current buffer), POSITION is a buffer position (integer or marker).\nIf OBJECT is a string, POSITION is a 0-based index into it.\nReturn nil if LIMIT is nil or omitted, and the property is constant all\nthe way to the start of OBJECT; if the value is non-nil, it is a position\nless than POSITION, never equal.\n\nIf the optional third argument LIMIT is non-nil, don't search\nback past position LIMIT; return LIMIT if nothing is found until LIMIT.",
            "fnname": "Fprevious_property_change",
            "intspec": "0",
            "lname": "previous-property-change",
            "maxargs": 3,
            "minargs": 1,
            "path": "textprop.c",
            "sname": "Sprevious_property_change"
        },
        {
            "args": [
                "position",
                "prop",
                "object",
                "limit"
            ],
            "attributes": null,
            "doc": "Return the position of previous text property or overlay change for a specific property.\nScans characters backward from POSITION till it finds\na change in the PROP property, then returns the position of the change.\nIf the optional third argument OBJECT is a buffer (or nil, which means\nthe current buffer), POSITION is a buffer position (integer or marker).\nIf OBJECT is a string, POSITION is a 0-based index into it.\n\nIn a string, scan runs to the start of the string, unless LIMIT is non-nil.\nIn a buffer, if LIMIT is nil or omitted, it runs to (point-min), and the\nvalue cannot be less than that.\nIf the optional fourth argument LIMIT is non-nil, don't search back past\nposition LIMIT; return LIMIT if nothing is found before reaching LIMIT.\n\nThe property values are compared with `eq'.\nIf the property is constant all the way to the start of OBJECT, return the\nfirst valid position in OBJECT.",
            "fnname": "Fprevious_single_char_property_change",
            "intspec": "0",
            "lname": "previous-single-char-property-change",
            "maxargs": 4,
            "minargs": 2,
            "path": "textprop.c",
            "sname": "Sprevious_single_char_property_change"
        },
        {
            "args": [
                "position",
                "prop",
                "object",
                "limit"
            ],
            "attributes": null,
            "doc": "Return the position of previous property change for a specific property.\nScans characters backward from POSITION till it finds\na change in the PROP property, then returns the position of the change.\nIf the optional third argument OBJECT is a buffer (or nil, which means\nthe current buffer), POSITION is a buffer position (integer or marker).\nIf OBJECT is a string, POSITION is a 0-based index into it.\nThe property values are compared with `eq'.\nReturn nil if LIMIT is nil or omitted, and the property is constant all\nthe way to the start of OBJECT; if the value is non-nil, it is a position\nless than POSITION, never equal.\n\nIf the optional fourth argument LIMIT is non-nil, don't search\nback past position LIMIT; return LIMIT if nothing is found until LIMIT.",
            "fnname": "Fprevious_single_property_change",
            "intspec": "0",
            "lname": "previous-single-property-change",
            "maxargs": 4,
            "minargs": 2,
            "path": "textprop.c",
            "sname": "Sprevious_single_property_change"
        },
        {
            "args": [
                "window",
                "minibuf",
                "all_frames"
            ],
            "attributes": null,
            "doc": "Return live window before WINDOW in the cyclic ordering of windows.\nWINDOW must be a live window and defaults to the selected one.  The\noptional arguments MINIBUF and ALL-FRAMES specify the set of windows to\nconsider.\n\nMINIBUF nil or omitted means consider the minibuffer window only if the\nminibuffer is active.  MINIBUF t means consider the minibuffer window\neven if the minibuffer is not active.  Any other value means do not\nconsider the minibuffer window even if the minibuffer is active.\n\nALL-FRAMES nil or omitted means consider all windows on WINDOW's frame,\nplus the minibuffer window if specified by the MINIBUF argument.  If the\nminibuffer counts, consider all windows on all frames that share that\nminibuffer too.  The following non-nil values of ALL-FRAMES have special\nmeanings:\n\n- t means consider all windows on all existing frames.\n\n- `visible' means consider all windows on all visible frames.\n\n- 0 (the number zero) means consider all windows on all visible and\n  iconified frames.\n\n- A frame means consider all windows on that frame only.\n\nAnything else means consider all windows on WINDOW's frame and no\nothers.\n\nIf you use consistent values for MINIBUF and ALL-FRAMES, you can\nuse `previous-window' to iterate through the entire cycle of\nacceptable windows, eventually ending up back at the window you\nstarted with.  `next-window' traverses the same cycle, in the\nreverse order.",
            "fnname": "Fprevious_window",
            "intspec": "0",
            "lname": "previous-window",
            "maxargs": 3,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sprevious_window"
        },
        {
            "args": [
                "object",
                "printcharfun",
                "overrides"
            ],
            "attributes": null,
            "doc": "Output the printed representation of OBJECT, any Lisp object.\nQuoting characters are printed when needed to make output that `read'\ncan handle, whenever this is possible.  For complex objects, the behavior\nis controlled by `print-level' and `print-length', which see.\n\nOBJECT is any of the Lisp data types: a number, a string, a symbol,\na list, a buffer, a window, a frame, etc.\n\nA printed representation of an object is text which describes that object.\n\nOptional argument PRINTCHARFUN is the output stream, which can be one\nof these:\n\n   - a buffer, in which case output is inserted into that buffer at point;\n   - a marker, in which case output is inserted at marker's position;\n   - a function, in which case that function is called once for each\n     character of OBJECT's printed representation;\n   - a symbol, in which case that symbol's function definition is called; or\n   - t, in which case the output is displayed in the echo area.\n\nIf PRINTCHARFUN is omitted, the value of `standard-output' (which see)\nis used instead.\n\nOptional argument OVERRIDES should be a list of settings for print-related\nvariables.  An element in this list can be the symbol t, which means \"reset\nall the values to their defaults\".  Otherwise, an element should be a pair,\nwhere the `car' or the pair is the setting symbol, and the `cdr' is the\nvalue of the setting to use for this `prin1' call.\n\nFor instance:\n\n  (prin1 object nil \\\\='((length . 100) (circle . t))).\n\nSee Info node `(elisp)Output Overrides' for a list of possible values.\n\nAs a special case, OVERRIDES can also simply be the symbol t, which\nmeans \"use default values for all the print-related settings\".",
            "fnname": "Fprin1",
            "intspec": "0",
            "lname": "prin1",
            "maxargs": 3,
            "minargs": 1,
            "path": "print.c",
            "sname": "Sprin1"
        },
        {
            "args": [
                "object",
                "noescape",
                "overrides"
            ],
            "attributes": null,
            "doc": "Return a string containing the printed representation of OBJECT.\nOBJECT can be any Lisp object.  This function outputs quoting characters\nwhen necessary to make output that `read' can handle, whenever possible,\nunless the optional second argument NOESCAPE is non-nil.  For complex objects,\nthe behavior is controlled by `print-level' and `print-length', which see.\n\nOBJECT is any of the Lisp data types: a number, a string, a symbol,\na list, a buffer, a window, a frame, etc.\n\nSee `prin1' for the meaning of OVERRIDES.\n\nA printed representation of an object is text which describes that object.",
            "fnname": "Fprin1_to_string",
            "intspec": "0",
            "lname": "prin1-to-string",
            "maxargs": 3,
            "minargs": 1,
            "path": "print.c",
            "sname": "Sprin1_to_string"
        },
        {
            "args": [
                "object",
                "printcharfun"
            ],
            "attributes": null,
            "doc": "Output the printed representation of OBJECT, any Lisp object.\nNo quoting characters are used; no delimiters are printed around\nthe contents of strings.\n\nOBJECT is any of the Lisp data types: a number, a string, a symbol,\na list, a buffer, a window, a frame, etc.\n\nA printed representation of an object is text which describes that object.\n\nOptional argument PRINTCHARFUN is the output stream, which can be one\nof these:\n\n   - a buffer, in which case output is inserted into that buffer at point;\n   - a marker, in which case output is inserted at marker's position;\n   - a function, in which case that function is called once for each\n     character of OBJECT's printed representation;\n   - a symbol, in which case that symbol's function definition is called; or\n   - t, in which case the output is displayed in the echo area.\n\nIf PRINTCHARFUN is omitted, the value of `standard-output' (which see)\nis used instead.",
            "fnname": "Fprinc",
            "intspec": "0",
            "lname": "princ",
            "maxargs": 2,
            "minargs": 1,
            "path": "print.c",
            "sname": "Sprinc"
        },
        {
            "args": [
                "object",
                "printcharfun"
            ],
            "attributes": null,
            "doc": "Output the printed representation of OBJECT, with newlines around it.\nQuoting characters are printed when needed to make output that `read'\ncan handle, whenever this is possible.  For complex objects, the behavior\nis controlled by `print-level' and `print-length', which see.\n\nOBJECT is any of the Lisp data types: a number, a string, a symbol,\na list, a buffer, a window, a frame, etc.\n\nA printed representation of an object is text which describes that object.\n\nOptional argument PRINTCHARFUN is the output stream, which can be one\nof these:\n\n   - a buffer, in which case output is inserted into that buffer at point;\n   - a marker, in which case output is inserted at marker's position;\n   - a function, in which case that function is called once for each\n     character of OBJECT's printed representation;\n   - a symbol, in which case that symbol's function definition is called; or\n   - t, in which case the output is displayed in the echo area.\n\nIf PRINTCHARFUN is omitted, the value of `standard-output' (which see)\nis used instead.",
            "fnname": "Fprint",
            "intspec": "0",
            "lname": "print",
            "maxargs": 2,
            "minargs": 1,
            "path": "print.c",
            "sname": "Sprint"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Extract sharing info from OBJECT needed to print it.\nFills `print-number-table' if `print-circle' is non-nil.  Does nothing\nif `print-circle' is nil.",
            "fnname": "Fprint_preprocess",
            "intspec": "0",
            "lname": "print--preprocess",
            "maxargs": 1,
            "minargs": 1,
            "path": "print.c",
            "sname": "Sprint_preprocess"
        },
        {
            "args": [
                "pid"
            ],
            "attributes": null,
            "doc": "Return attributes of the process given by its PID, a number.\nIf `default-directory' is remote, PID is regarded as process\nidentifier on the respective remote host.\n\nValue is an alist where each element is a cons cell of the form\n\n    (KEY . VALUE)\n\nIf this functionality is unsupported, the value is nil.\n\nSee `list-system-processes' for getting a list of all process IDs.\n\nThe KEYs of the attributes that this function may return are listed\nbelow, together with the type of the associated VALUE (in parentheses).\nNot all platforms support all of these attributes; unsupported\nattributes will not appear in the returned alist.\nUnless explicitly indicated otherwise, numbers can have either\ninteger or floating point values.\n\n euid    -- Effective user User ID of the process (number)\n user    -- User name corresponding to euid (string)\n egid    -- Effective user Group ID of the process (number)\n group   -- Group name corresponding to egid (string)\n comm    -- Command name (executable name only) (string)\n state   -- Process state code, such as \"S\", \"R\", or \"T\" (string)\n ppid    -- Parent process ID (number)\n pgrp    -- Process group ID (number)\n sess    -- Session ID, i.e. process ID of session leader (number)\n ttname  -- Controlling tty name (string)\n tpgid   -- ID of foreground process group on the process's tty (number)\n minflt  -- number of minor page faults (number)\n majflt  -- number of major page faults (number)\n cminflt -- cumulative number of minor page faults (number)\n cmajflt -- cumulative number of major page faults (number)\n utime   -- user time used by the process, in `current-time' format\n stime   -- system time used by the process (current-time)\n time    -- sum of utime and stime (current-time)\n cutime  -- user time used by the process and its children (current-time)\n cstime  -- system time used by the process and its children (current-time)\n ctime   -- sum of cutime and cstime (current-time)\n pri     -- priority of the process (number)\n nice    -- nice value of the process (number)\n thcount -- process thread count (number)\n start   -- time the process started (current-time)\n vsize   -- virtual memory size of the process in KB's (number)\n rss     -- resident set size of the process in KB's (number)\n etime   -- elapsed time the process is running (current-time)\n pcpu    -- percents of CPU time used by the process (floating-point number)\n pmem    -- percents of total physical memory used by process's resident set\n              (floating-point number)\n args    -- command line which invoked the process (string).",
            "fnname": "Fprocess_attributes",
            "intspec": "0",
            "lname": "process-attributes",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_attributes"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the buffer PROCESS is associated with.\nThe default process filter inserts output from PROCESS into this buffer.",
            "fnname": "Fprocess_buffer",
            "intspec": "0",
            "lname": "process-buffer",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_buffer"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return a cons of coding systems for decoding and encoding of PROCESS.",
            "fnname": "Fprocess_coding_system",
            "intspec": "0",
            "lname": "process-coding-system",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_coding_system"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the command that was executed to start PROCESS.\nThis is a list of strings, the first string being the program executed\nand the rest of the strings being the arguments given to it.\nFor a network or serial or pipe connection, this is nil (process is running)\nor t (process is stopped).",
            "fnname": "Fprocess_command",
            "intspec": "0",
            "lname": "process-command",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_command"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the connection type of PROCESS.\nThe value is nil for a pipe, t or `pty' for a pty, or `stream' for\na socket connection.",
            "fnname": "Fprocess_connection",
            "intspec": "0",
            "lname": "process-connection",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_connection"
        },
        {
            "args": [
                "process",
                "key",
                "no_block"
            ],
            "attributes": null,
            "doc": "Return the contact info of PROCESS; t for a real child.\nFor a network or serial or pipe connection, the value depends on the\noptional KEY arg.  If KEY is nil, value is a cons cell of the form\n\\(HOST SERVICE) for a network connection or (PORT SPEED) for a serial\nconnection; it is t for a pipe connection.  If KEY is t, the complete\ncontact information for the connection is returned, else the specific\nvalue for the keyword KEY is returned.  See `make-network-process',\n`make-serial-process', or `make-pipe-process' for the list of keywords.\n\nIf PROCESS is a non-blocking network process that hasn't been fully\nset up yet, this function will block until socket setup has completed.\nIf the optional NO-BLOCK parameter is specified, return nil instead of\nwaiting for the process to be fully set up.",
            "fnname": "Fprocess_contact",
            "intspec": "0",
            "lname": "process-contact",
            "maxargs": 3,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_contact"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Get the current datagram address associated with PROCESS.\nIf PROCESS is a non-blocking network process that hasn't been fully\nset up yet, this function will block until socket setup has completed.",
            "fnname": "Fprocess_datagram_address",
            "intspec": "0",
            "lname": "process-datagram-address",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_datagram_address"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the exit status of PROCESS or the signal number that killed it.\nIf PROCESS has not yet exited or died, return 0.",
            "fnname": "Fprocess_exit_status",
            "intspec": "0",
            "lname": "process-exit-status",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_exit_status"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the filter function of PROCESS.\nSee `set-process-filter' for more info on filter functions.",
            "fnname": "Fprocess_filter",
            "intspec": "0",
            "lname": "process-filter",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_filter"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the process id of PROCESS.\nThis is the pid of the external process which PROCESS uses or talks to,\nan integer.\nFor a network, serial, and pipe connections, this value is nil.",
            "fnname": "Fprocess_id",
            "intspec": "0",
            "lname": "process-id",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_id"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the value of inherit-coding-system flag for PROCESS.\nIf this flag is t, `buffer-file-coding-system' of the buffer\nassociated with PROCESS will inherit the coding system used to decode\nthe process output.",
            "fnname": "Fprocess_inherit_coding_system_flag",
            "intspec": "0",
            "lname": "process-inherit-coding-system-flag",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_inherit_coding_system_flag"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of all processes that are Emacs sub-processes.",
            "fnname": "Fprocess_list",
            "intspec": "0",
            "lname": "process-list",
            "maxargs": 0,
            "minargs": 0,
            "path": "process.c",
            "sname": "Sprocess_list"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the marker for the end of the last output from PROCESS.",
            "fnname": "Fprocess_mark",
            "intspec": "0",
            "lname": "process-mark",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_mark"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the name of PROCESS, as a string.\nThis is the name of the program invoked in PROCESS,\npossibly modified to make it unique among process names.",
            "fnname": "Fprocess_name",
            "intspec": "0",
            "lname": "process-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_name"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the plist of PROCESS.",
            "fnname": "Fprocess_plist",
            "intspec": "0",
            "lname": "process-plist",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_plist"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the current value of query-on-exit flag for PROCESS.",
            "fnname": "Fprocess_query_on_exit_flag",
            "intspec": "0",
            "lname": "process-query-on-exit-flag",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_query_on_exit_flag"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return non-nil if PROCESS has given control of its terminal to a child.\nIf the operating system does not make it possible to find out, return t.\nIf it's possible to find out, return the numeric ID of the foreground\nprocess group if PROCESS did give control of its terminal to a\nchild process, and return nil if it didn't.\n\nPROCESS must be a real subprocess, not a connection.",
            "fnname": "Fprocess_running_child_p",
            "intspec": "0",
            "lname": "process-running-child-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "process.c",
            "sname": "Sprocess_running_child_p"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Make PROCESS see end-of-file in its input.\nEOF comes after any text already sent to it.\nPROCESS may be a process, a buffer, the name of a process or buffer, or\nnil, indicating the current buffer's process.\nIf PROCESS is a network connection, or is a process communicating\nthrough a pipe (as opposed to a pty), then you cannot send any more\ntext to PROCESS after you call this function.\nIf PROCESS is a serial process, wait until all output written to the\nprocess has been transmitted to the serial port.",
            "fnname": "Fprocess_send_eof",
            "intspec": "0",
            "lname": "process-send-eof",
            "maxargs": 1,
            "minargs": 0,
            "path": "process.c",
            "sname": "Sprocess_send_eof"
        },
        {
            "args": [
                "process",
                "start",
                "end"
            ],
            "attributes": null,
            "doc": "Send current contents of region as input to PROCESS.\nPROCESS may be a process, a buffer, the name of a process or buffer, or\nnil, indicating the current buffer's process.\nCalled from program, takes three arguments, PROCESS, START and END.\nIf the region is larger than the input buffer of the process (the\nlength of which depends on the process connection type and the\noperating system), it is sent in several bunches.  This may happen\neven for shorter regions.  Output from processes can arrive in between\nbunches.\n\nIf PROCESS is a non-blocking network process that hasn't been fully\nset up yet, this function will block until socket setup has completed.",
            "fnname": "Fprocess_send_region",
            "intspec": "0",
            "lname": "process-send-region",
            "maxargs": 3,
            "minargs": 3,
            "path": "process.c",
            "sname": "Sprocess_send_region"
        },
        {
            "args": [
                "process",
                "string"
            ],
            "attributes": null,
            "doc": "Send PROCESS the contents of STRING as input.\nPROCESS may be a process, a buffer, the name of a process or buffer, or\nnil, indicating the current buffer's process.\nIf STRING is larger than the input buffer of the process (the length\nof which depends on the process connection type and the operating\nsystem), it is sent in several bunches.  This may happen even for\nshorter strings.  Output from processes can arrive in between bunches.\n\nIf PROCESS is a non-blocking network process that hasn't been fully\nset up yet, this function will block until socket setup has completed.",
            "fnname": "Fprocess_send_string",
            "intspec": "0",
            "lname": "process-send-string",
            "maxargs": 2,
            "minargs": 2,
            "path": "process.c",
            "sname": "Sprocess_send_string"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the sentinel of PROCESS.\nSee `set-process-sentinel' for more info on sentinels.",
            "fnname": "Fprocess_sentinel",
            "intspec": "0",
            "lname": "process-sentinel",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_sentinel"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the status of PROCESS.\nThe returned value is one of the following symbols:\nrun  -- for a process that is running.\nstop -- for a process stopped but continuable.\nexit -- for a process that has exited.\nsignal -- for a process that has got a fatal signal.\nopen -- for a network stream connection that is open.\nlisten -- for a network stream server that is listening.\nclosed -- for a network stream connection that is closed.\nconnect -- when waiting for a non-blocking connection to complete.\nfailed -- when a non-blocking connection has failed.\nnil -- if arg is a process name and no such process exists.\nPROCESS may be a process, a buffer, the name of a process, or\nnil, indicating the current buffer's process.",
            "fnname": "Fprocess_status",
            "intspec": "0",
            "lname": "process-status",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_status"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the locking thread of PROCESS.\nIf PROCESS is unlocked, this function returns nil.",
            "fnname": "Fprocess_thread",
            "intspec": "0",
            "lname": "process-thread",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_thread"
        },
        {
            "args": [
                "process",
                "stream"
            ],
            "attributes": null,
            "doc": "Return the name of the terminal PROCESS uses, or nil if none.\nThis is the terminal that the process itself reads and writes on,\nnot the name of the pty that Emacs uses to talk with that terminal.\n\nIf STREAM is nil, return the terminal name if any of PROCESS's\nstandard streams use a terminal for communication.  If STREAM is one\nof `stdin', `stdout', or `stderr', return the name of the terminal\nPROCESS uses for that stream specifically, or nil if that stream\ncommunicates via a pipe.",
            "fnname": "Fprocess_tty_name",
            "intspec": "0",
            "lname": "process-tty-name",
            "maxargs": 2,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_tty_name"
        },
        {
            "args": [
                "process"
            ],
            "attributes": null,
            "doc": "Return the connection type of PROCESS.\nThe value is either the symbol `real', `network', `serial', or `pipe'.\nPROCESS may be a process, a buffer, the name of a process or buffer, or\nnil, indicating the current buffer's process.",
            "fnname": "Fprocess_type",
            "intspec": "0",
            "lname": "process-type",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocess_type"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a process.",
            "fnname": "Fprocessp",
            "intspec": "0",
            "lname": "processp",
            "maxargs": 1,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sprocessp"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current cpu profiler log.\nThe log is a hash-table mapping backtraces to counters which represent\nthe amount of time spent at those points.  Every backtrace is a vector\nof functions, where the last few elements may be nil.\nBefore returning, a new log is allocated for future samples.",
            "fnname": "Fprofiler_cpu_log",
            "intspec": "0",
            "lname": "profiler-cpu-log",
            "maxargs": 0,
            "minargs": 0,
            "path": "profiler.c",
            "sname": "Sprofiler_cpu_log"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return non-nil if cpu profiler is running.",
            "fnname": "Fprofiler_cpu_running_p",
            "intspec": "0",
            "lname": "profiler-cpu-running-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "profiler.c",
            "sname": "Sprofiler_cpu_running_p"
        },
        {
            "args": [
                "sampling_interval"
            ],
            "attributes": null,
            "doc": "Start or restart the cpu profiler.\nIt takes call-stack samples each SAMPLING-INTERVAL nanoseconds, approximately.\nSee also `profiler-log-size' and `profiler-max-stack-depth'.",
            "fnname": "Fprofiler_cpu_start",
            "intspec": "0",
            "lname": "profiler-cpu-start",
            "maxargs": 1,
            "minargs": 1,
            "path": "profiler.c",
            "sname": "Sprofiler_cpu_start"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Stop the cpu profiler.  The profiler log is not affected.\nReturn non-nil if the profiler was running.",
            "fnname": "Fprofiler_cpu_stop",
            "intspec": "0",
            "lname": "profiler-cpu-stop",
            "maxargs": 0,
            "minargs": 0,
            "path": "profiler.c",
            "sname": "Sprofiler_cpu_stop"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current memory profiler log.\nThe log is a hash-table mapping backtraces to counters which represent\nthe amount of memory allocated at those points.  Every backtrace is a vector\nof functions, where the last few elements may be nil.\nBefore returning, a new log is allocated for future samples.",
            "fnname": "Fprofiler_memory_log",
            "intspec": "0",
            "lname": "profiler-memory-log",
            "maxargs": 0,
            "minargs": 0,
            "path": "profiler.c",
            "sname": "Sprofiler_memory_log"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return non-nil if memory profiler is running.",
            "fnname": "Fprofiler_memory_running_p",
            "intspec": "0",
            "lname": "profiler-memory-running-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "profiler.c",
            "sname": "Sprofiler_memory_running_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Start/restart the memory profiler.\nThe memory profiler will take samples of the call-stack whenever a new\nallocation takes place.  Note that most small allocations only trigger\nthe profiler occasionally.\nSee also `profiler-log-size' and `profiler-max-stack-depth'.",
            "fnname": "Fprofiler_memory_start",
            "intspec": "0",
            "lname": "profiler-memory-start",
            "maxargs": 0,
            "minargs": 0,
            "path": "profiler.c",
            "sname": "Sprofiler_memory_start"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Stop the memory profiler.  The profiler log is not affected.\nReturn non-nil if the profiler was running.",
            "fnname": "Fprofiler_memory_stop",
            "intspec": "0",
            "lname": "profiler-memory-stop",
            "maxargs": 0,
            "minargs": 0,
            "path": "profiler.c",
            "sname": "Sprofiler_memory_stop"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Eval FIRST and BODY sequentially; return value from FIRST.\nThe value of FIRST is saved during the evaluation of the remaining args,\nwhose values are discarded.\nusage: (prog1 FIRST BODY...)",
            "fnname": "Fprog1",
            "intspec": "0",
            "lname": "prog1",
            "maxargs": -2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sprog1"
        },
        {
            "args": [
                "body"
            ],
            "attributes": null,
            "doc": "Eval BODY forms sequentially and return value of last one.\nusage: (progn BODY...)",
            "fnname": "Fprogn",
            "intspec": "0",
            "lname": "progn",
            "maxargs": -2,
            "minargs": 0,
            "path": "eval.c",
            "sname": "Sprogn"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return OBJECT's length if it is a proper list, nil otherwise.\nA proper list is neither circular nor dotted (i.e., its last cdr is nil).",
            "fnname": "Fproper_list_p",
            "intspec": "0",
            "lname": "proper-list-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sproper_list_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a copy of STRING with text properties added.\nFirst argument is the string to copy.\nRemaining arguments form a sequence of PROPERTY VALUE pairs for text\nproperties to add to the result.\n\nSee Info node `(elisp) Text Properties' for more information.\nusage: (propertize STRING &rest PROPERTIES)",
            "fnname": "Fpropertize",
            "intspec": "0",
            "lname": "propertize",
            "maxargs": -1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Spropertize"
        },
        {
            "args": [
                "feature",
                "subfeatures"
            ],
            "attributes": null,
            "doc": "Announce that FEATURE is a feature of the current Emacs.\nThe optional argument SUBFEATURES should be a list of symbols listing\nparticular subfeatures supported in this version of FEATURE.",
            "fnname": "Fprovide",
            "intspec": "0",
            "lname": "provide",
            "maxargs": 2,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sprovide"
        },
        {
            "args": [
                "obj"
            ],
            "attributes": null,
            "doc": "Make a copy of object OBJ in pure storage.\nRecursively copies contents of vectors and cons cells.\nDoes not copy symbols.  Copies strings without text properties.",
            "fnname": "Fpurecopy",
            "intspec": "0",
            "lname": "purecopy",
            "maxargs": 1,
            "minargs": 1,
            "path": "alloc.c",
            "sname": "Spurecopy"
        },
        {
            "args": [
                "symbol",
                "propname",
                "value"
            ],
            "attributes": null,
            "doc": "Store SYMBOL's PROPNAME property with value VALUE.\nIt can be retrieved with `(get SYMBOL PROPNAME)'.",
            "fnname": "Fput",
            "intspec": "0",
            "lname": "put",
            "maxargs": 3,
            "minargs": 3,
            "path": "fns.c",
            "sname": "Sput"
        },
        {
            "args": [
                "start",
                "end",
                "property",
                "value",
                "object"
            ],
            "attributes": null,
            "doc": "Set one property of the text from START to END.\nThe third and fourth arguments PROPERTY and VALUE\nspecify the property to add.\nIf the optional fifth argument OBJECT is a buffer (or nil, which means\nthe current buffer), START and END are buffer positions (integers or\nmarkers).  If OBJECT is a string, START and END are 0-based indices into it.",
            "fnname": "Fput_text_property",
            "intspec": "0",
            "lname": "put-text-property",
            "maxargs": 5,
            "minargs": 4,
            "path": "textprop.c",
            "sname": "Sput_text_property"
        },
        {
            "args": [
                "char_table",
                "ch",
                "value"
            ],
            "attributes": null,
            "doc": "Set an element of CHAR-TABLE for character CH to VALUE.\nCHAR-TABLE must be what returned by `unicode-property-table-internal'.",
            "fnname": "Fput_unicode_property_internal",
            "intspec": "0",
            "lname": "put-unicode-property-internal",
            "maxargs": 3,
            "minargs": 3,
            "path": "chartab.c",
            "sname": "Sput_unicode_property_internal"
        },
        {
            "args": [
                "key",
                "value",
                "table"
            ],
            "attributes": null,
            "doc": "Associate KEY with VALUE in hash table TABLE.\nIf KEY is already present in table, replace its current value with\nVALUE.  In any case, return VALUE.",
            "fnname": "Fputhash",
            "intspec": "0",
            "lname": "puthash",
            "maxargs": 3,
            "minargs": 3,
            "path": "fns.c",
            "sname": "Sputhash"
        },
        {
            "args": [
                "font_object"
            ],
            "attributes": null,
            "doc": "Return information about FONT-OBJECT.\nThe value is a vector:\n  [ NAME FILENAME PIXEL-SIZE SIZE ASCENT DESCENT SPACE-WIDTH AVERAGE-WIDTH\n    CAPABILITY ]\n\nNAME is the font name, a string (or nil if the font backend doesn't\nprovide a name).\n\nFILENAME is the font file name, a string (or nil if the font backend\ndoesn't provide a file name).\n\nPIXEL-SIZE is a pixel size by which the font is opened.\n\nSIZE is a maximum advance width of the font in pixels.\n\nASCENT, DESCENT, SPACE-WIDTH, AVERAGE-WIDTH are metrics of the font in\npixels.\n\nCAPABILITY is a list whose first element is a symbol representing the\nfont format (x, opentype, truetype, type1, pcf, or bdf) and the\nremaining elements describe the details of the font capability.\n\nIf the font is OpenType font, the form of the list is\n  (opentype GSUB GPOS)\nwhere GSUB shows which \"GSUB\" features the font supports, and GPOS\nshows which \"GPOS\" features the font supports.  Both GSUB and GPOS are\nlists of the format:\n  ((SCRIPT (LANGSYS FEATURE ...) ...) ...)\n\nIf the font is not OpenType font, currently the length of the form is\none.\n\nSCRIPT is a symbol representing OpenType script tag.\n\nLANGSYS is a symbol representing OpenType langsys tag, or nil\nrepresenting the default langsys.\n\nFEATURE is a symbol representing OpenType feature tag.\n\nIf the font is not OpenType font, CAPABILITY is nil.",
            "fnname": "Fquery_font",
            "intspec": "0",
            "lname": "query-font",
            "maxargs": 1,
            "minargs": 1,
            "path": "font.c",
            "sname": "Squery_font"
        },
        {
            "args": [
                "pattern",
                "regexpp"
            ],
            "attributes": null,
            "doc": "Return the name of a fontset that matches PATTERN.\nThe value is nil if there is no matching fontset.\nPATTERN can contain `*' or `?' as a wildcard\njust as X font name matching algorithm allows.\nIf REGEXPP is non-nil, PATTERN is a regular expression.",
            "fnname": "Fquery_fontset",
            "intspec": "0",
            "lname": "query-fontset",
            "maxargs": 2,
            "minargs": 1,
            "path": "fontset.c",
            "sname": "Squery_fontset"
        },
        {
            "args": [
                "process",
                "current_group"
            ],
            "attributes": null,
            "doc": "Send QUIT signal to process PROCESS.  May be process or name of one.\nSee function `interrupt-process' for more details on usage.",
            "fnname": "Fquit_process",
            "intspec": "0",
            "lname": "quit-process",
            "maxargs": 2,
            "minargs": 0,
            "path": "process.c",
            "sname": "Squit_process"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Return the argument, without evaluating it.  `(quote x)' yields `x'.\nWarning: `quote' does not construct its return value, but just returns\nthe value that was pre-constructed by the Lisp reader (see info node\n`(elisp)Printed Representation').\nThis means that \\\\='(a . b) is not identical to (cons \\\\='a \\\\='b): the former\ndoes not cons.  Quoting should be reserved for constants that will\nnever be modified by side-effects, unless you like self-modifying code.\nSee the common pitfall in info node `(elisp)Rearrangement' for an example\nof unexpected results when a quoted object is modified.\nusage: (quote ARG)",
            "fnname": "Fquote",
            "intspec": "0",
            "lname": "quote",
            "maxargs": -2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Squote"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Bring FRAME to the front, so it occludes any frames it overlaps.\nIf FRAME is invisible or iconified, make it visible.\nIf you don't specify a frame, the selected frame is used.\nIf Emacs is displaying on an ordinary terminal or some other device which\ndoesn't support multiple overlapping frames, this function selects FRAME.",
            "fnname": "Fraise_frame",
            "intspec": "",
            "lname": "raise-frame",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sraise_frame"
        },
        {
            "args": [
                "limit"
            ],
            "attributes": null,
            "doc": "Return a pseudo-random integer.\nBy default, return a fixnum; all fixnums are equally likely.\nWith positive integer LIMIT, return random integer in interval [0,LIMIT).\nWith argument t, set the random number seed from the system's entropy\npool if available, otherwise from less-random volatile data such as the time.\nWith a string argument, set the seed based on the string's contents.\n\nSee Info node `(elisp)Random Numbers' for more details.",
            "fnname": "Frandom",
            "intspec": "0",
            "lname": "random",
            "maxargs": 1,
            "minargs": 0,
            "path": "fns.c",
            "sname": "Srandom"
        },
        {
            "args": [
                "key",
                "alist"
            ],
            "attributes": null,
            "doc": "Return non-nil if KEY is `equal' to the cdr of an element of ALIST.\nThe value is actually the first element of ALIST whose cdr equals KEY.",
            "fnname": "Frassoc",
            "intspec": "0",
            "lname": "rassoc",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Srassoc"
        },
        {
            "args": [
                "key",
                "alist"
            ],
            "attributes": null,
            "doc": "Return non-nil if KEY is `eq' to the cdr of an element of ALIST.\nThe value is actually the first element of ALIST whose cdr is KEY.",
            "fnname": "Frassq",
            "intspec": "0",
            "lname": "rassq",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Srassq"
        },
        {
            "args": [
                "regexp",
                "raw"
            ],
            "attributes": null,
            "doc": "Return a string describing the compiled form of REGEXP.\nIf RAW is non-nil, just return the actual bytecode.",
            "fnname": "Fre__describe_compiled",
            "intspec": "0",
            "lname": "re--describe-compiled",
            "maxargs": 2,
            "minargs": 1,
            "path": "search.c",
            "sname": "Sre__describe_compiled"
        },
        {
            "args": [
                "regexp",
                "bound",
                "noerror",
                "count"
            ],
            "attributes": null,
            "doc": "Search backward from point for regular expression REGEXP.\nThis function is almost identical to `re-search-forward', except that\nby default it searches backward instead of forward, and the sign of\nCOUNT also indicates exactly the opposite searching direction.\nSee `re-search-forward' for details.\n\nNote that searching backwards may give a shorter match than expected,\nbecause REGEXP is still matched in the forward direction.  See Info\nanchor `(elisp) re-search-backward' for details.",
            "fnname": "Fre_search_backward",
            "intspec": "sRE search backward: ",
            "lname": "re-search-backward",
            "maxargs": 4,
            "minargs": 1,
            "path": "search.c",
            "sname": "Sre_search_backward"
        },
        {
            "args": [
                "regexp",
                "bound",
                "noerror",
                "count"
            ],
            "attributes": null,
            "doc": "Search forward from point for regular expression REGEXP.\nSet point to the end of the occurrence found, and return point.\nThe optional second argument BOUND is a buffer position that bounds\n  the search.  The match found must not end after that position.  A\n  value of nil means search to the end of the accessible portion of\n  the buffer.\nThe optional third argument NOERROR indicates how errors are handled\n  when the search fails.  If it is nil or omitted, emit an error; if\n  it is t, simply return nil and do nothing; if it is neither nil nor\n  t, move to the limit of search and return nil.\nThe optional fourth argument COUNT is a number that indicates the\n  search direction and the number of occurrences to search for.  If it\n  is positive, search forward for COUNT successive occurrences; if it\n  is negative, search backward, instead of forward, for -COUNT\n  occurrences.  A value of nil means the same as 1.\nWith COUNT positive/negative, the match found is the COUNTth/-COUNTth\n  one in the buffer located entirely after/before the origin of the\n  search.\n\nSearch case-sensitivity is determined by the value of the variable\n`case-fold-search', which see.\n\nSee also the functions `match-beginning', `match-end', `match-string',\nand `replace-match'.",
            "fnname": "Fre_search_forward",
            "intspec": "sRE search: ",
            "lname": "re-search-forward",
            "maxargs": 4,
            "minargs": 1,
            "path": "search.c",
            "sname": "Sre_search_forward"
        },
        {
            "args": [
                "stream"
            ],
            "attributes": null,
            "doc": "Read one Lisp expression as text from STREAM, return as Lisp object.\nIf STREAM is nil, use the value of `standard-input' (which see).\nSTREAM or the value of `standard-input' may be:\n a buffer (read from point and advance it)\n a marker (read from where it points and advance it)\n a function (call it with no arguments for each character,\n     call it with a char as argument to push a char back)\n a string (takes text from string, starting at the beginning)\n t (read text line using minibuffer and use it, or read from\n    standard input in batch mode).",
            "fnname": "Fread",
            "intspec": "0",
            "lname": "read",
            "maxargs": 1,
            "minargs": 0,
            "path": "lread.c",
            "sname": "Sread"
        },
        {
            "args": [
                "prompt",
                "def",
                "require_match",
                "predicate"
            ],
            "attributes": null,
            "doc": "Read the name of a buffer and return it as a string.\nPrompt with PROMPT, which should be a string ending with a colon and a space.\nProvides completion on buffer names the user types.\nOptional second arg DEF is value to return if user enters an empty line,\n instead of that empty string.\n If DEF is a list of default values, return its first element.\nOptional third arg REQUIRE-MATCH has the same meaning as the\n REQUIRE-MATCH argument of `completing-read'.\nOptional arg PREDICATE, if non-nil, is a function limiting the buffers that\ncan be considered.  It will be called with each potential candidate, in\nthe form of either a string or a cons cell whose `car' is a string, and\nshould return non-nil to accept the candidate for completion, nil otherwise.\nIf `read-buffer-completion-ignore-case' is non-nil, completion ignores\ncase while reading the buffer name.\nIf `read-buffer-function' is non-nil, this works by calling it as a\nfunction, instead of the usual behavior.",
            "fnname": "Fread_buffer",
            "intspec": "0",
            "lname": "read-buffer",
            "maxargs": 4,
            "minargs": 1,
            "path": "minibuf.c",
            "sname": "Sread_buffer"
        },
        {
            "args": [
                "prompt",
                "inherit_input_method",
                "seconds"
            ],
            "attributes": null,
            "doc": "Read a character event from the command input (keyboard or macro).\nIt is returned as a number.\nIf the event has modifiers, they are resolved and reflected in the\nreturned character code if possible (e.g. C-SPC yields 0 and C-a yields 97).\nIf some of the modifiers cannot be reflected in the character code, the\nreturned value will include those modifiers, and will not be a valid\ncharacter code: it will fail the `characterp' test.  Use `event-basic-type'\nto recover the character code with the modifiers removed.\n\nIf the user generates an event which is not a character (i.e. a mouse\nclick or function key event), `read-char' signals an error.  As an\nexception, switch-frame events are put off until non-character events\ncan be read.\nIf you want to read non-character events, or ignore them, call\n`read-event' or `read-char-exclusive' instead.\n\nIf the optional argument PROMPT is non-nil, display that as a prompt.\nIf PROMPT is nil or the string \\\"\\\", the key sequence/events that led\nto the current command is used as the prompt.\n\nIf the optional argument INHERIT-INPUT-METHOD is non-nil and some\ninput method is turned on in the current buffer, that input method\nis used for reading a character.\n\nIf the optional argument SECONDS is non-nil, it should be a number\nspecifying the maximum number of seconds to wait for input.  If no\ninput arrives in that time, return nil.  SECONDS may be a\nfloating-point value.\n\nIf `inhibit-interaction' is non-nil, this function will signal an\n`inhibited-interaction' error.",
            "fnname": "Fread_char",
            "intspec": "0",
            "lname": "read-char",
            "maxargs": 3,
            "minargs": 0,
            "path": "lread.c",
            "sname": "Sread_char"
        },
        {
            "args": [
                "prompt",
                "inherit_input_method",
                "seconds"
            ],
            "attributes": null,
            "doc": "Read a character event from the command input (keyboard or macro).\nIt is returned as a number.  Non-character events are ignored.\nIf the event has modifiers, they are resolved and reflected in the\nreturned character code if possible (e.g. C-SPC yields 0 and C-a yields 97).\nIf some of the modifiers cannot be reflected in the character code, the\nreturned value will include those modifiers, and will not be a valid\ncharacter code: it will fail the `characterp' test.  Use `event-basic-type'\nto recover the character code with the modifiers removed.\n\nIf the optional argument PROMPT is non-nil, display that as a prompt.\nIf PROMPT is nil or the string \\\"\\\", the key sequence/events that led\nto the current command is used as the prompt.\n\nIf the optional argument INHERIT-INPUT-METHOD is non-nil and some\ninput method is turned on in the current buffer, that input method\nis used for reading a character.\n\nIf the optional argument SECONDS is non-nil, it should be a number\nspecifying the maximum number of seconds to wait for input.  If no\ninput arrives in that time, return nil.  SECONDS may be a\nfloating-point value.\n\nIf `inhibit-interaction' is non-nil, this function will signal an\n`inhibited-interaction' error.",
            "fnname": "Fread_char_exclusive",
            "intspec": "0",
            "lname": "read-char-exclusive",
            "maxargs": 3,
            "minargs": 0,
            "path": "lread.c",
            "sname": "Sread_char_exclusive"
        },
        {
            "args": [
                "prompt",
                "default_coding_system"
            ],
            "attributes": null,
            "doc": "Read a coding system from the minibuffer, prompting with string PROMPT.\nIf the user enters null input, return second argument DEFAULT-CODING-SYSTEM.\nIgnores case when completing coding systems (all Emacs coding systems\nare lower-case).",
            "fnname": "Fread_coding_system",
            "intspec": "0",
            "lname": "read-coding-system",
            "maxargs": 2,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Sread_coding_system"
        },
        {
            "args": [
                "prompt",
                "default_value"
            ],
            "attributes": null,
            "doc": "Read the name of a command and return as a symbol.\nPrompt with PROMPT.  By default, return DEFAULT-VALUE or its first element\nif it is a list.  If DEFAULT-VALUE is omitted or nil, and the user enters\nnull input, return a symbol whose name is an empty string.",
            "fnname": "Fread_command",
            "intspec": "0",
            "lname": "read-command",
            "maxargs": 2,
            "minargs": 1,
            "path": "minibuf.c",
            "sname": "Sread_command"
        },
        {
            "args": [
                "prompt",
                "inherit_input_method",
                "seconds"
            ],
            "attributes": null,
            "doc": "Read an event object from the input stream.\n\nIf you want to read non-character events, consider calling `read-key'\ninstead.  `read-key' will decode events via `input-decode-map' that\n`read-event' will not.  On a terminal this includes function keys such\nas <F7> and <RIGHT>, or mouse events generated by `xterm-mouse-mode'.\n\nIf the optional argument PROMPT is non-nil, display that as a prompt.\nIf PROMPT is nil or the string \\\"\\\", the key sequence/events that led\nto the current command is used as the prompt.\n\nIf the optional argument INHERIT-INPUT-METHOD is non-nil and some\ninput method is turned on in the current buffer, that input method\nis used for reading a character.\n\nIf the optional argument SECONDS is non-nil, it should be a number\nspecifying the maximum number of seconds to wait for input.  If no\ninput arrives in that time, return nil.  SECONDS may be a\nfloating-point value.\n\nIf `inhibit-interaction' is non-nil, this function will signal an\n`inhibited-interaction' error.",
            "fnname": "Fread_event",
            "intspec": "0",
            "lname": "read-event",
            "maxargs": 3,
            "minargs": 0,
            "path": "lread.c",
            "sname": "Sread_event"
        },
        {
            "args": [
                "prompt",
                "initial_contents",
                "keymap",
                "read",
                "hist",
                "default_value",
                "inherit_input_method"
            ],
            "attributes": null,
            "doc": "Read a string from the minibuffer, prompting with string PROMPT.\nThe optional second arg INITIAL-CONTENTS is an obsolete alternative to\n  DEFAULT-VALUE.  It normally should be nil in new code, except when\n  HIST is a cons.  It is discussed in more detail below.\n\nThird arg KEYMAP is a keymap to use whilst reading;\n  if omitted or nil, the default is `minibuffer-local-map'.\n\nIf fourth arg READ is non-nil, interpret the result as a Lisp object\n  and return that object:\n  in other words, do `(car (read-from-string INPUT-STRING))'\n\nFifth arg HIST, if non-nil, specifies a history list and optionally\n  the initial position in the list.  It can be a symbol, which is the\n  history list variable to use, or a cons cell (HISTVAR . HISTPOS).\n  In that case, HISTVAR is the history list variable to use, and\n  HISTPOS is the initial position for use by the minibuffer history\n  commands.  For consistency, you should also specify that element of\n  the history as the value of INITIAL-CONTENTS.  Positions are counted\n  starting from 1 at the beginning of the list.  If HIST is nil, the\n  default history list `minibuffer-history' is used.  If HIST is t,\n  history is not recorded.\n\n  If `history-add-new-input' is non-nil (the default), the result will\n  be added to the history list using `add-to-history'.\n\nSixth arg DEFAULT-VALUE, if non-nil, should be a string, which is used\n  as the default to `read' if READ is non-nil and the user enters\n  empty input.  But if READ is nil, this function does _not_ return\n  DEFAULT-VALUE for empty input!  Instead, it returns the empty string.\n\n  Whatever the value of READ, DEFAULT-VALUE is made available via the\n  minibuffer history commands.  DEFAULT-VALUE can also be a list of\n  strings, in which case all the strings are available in the history,\n  and the first string is the default to `read' if READ is non-nil.\n\nSeventh arg INHERIT-INPUT-METHOD, if non-nil, means the minibuffer inherits\n the current input method and the setting of `enable-multibyte-characters'.\n\nIf the variable `minibuffer-allow-text-properties' is non-nil,\n then the string which is returned includes whatever text properties\n were present in the minibuffer.  Otherwise the value has no text properties.\n\nIf `inhibit-interaction' is non-nil, this function will signal an\n  `inhibited-interaction' error.\n\nThe remainder of this documentation string describes the\nINITIAL-CONTENTS argument in more detail.  It is only relevant when\nstudying existing code, or when HIST is a cons.  If non-nil,\nINITIAL-CONTENTS is a string to be inserted into the minibuffer before\nreading input.  Normally, point is put at the end of that string.\nHowever, if INITIAL-CONTENTS is (STRING . POSITION), the initial\ninput is STRING, but point is placed at _one-indexed_ position\nPOSITION in the minibuffer.  Any integer value less than or equal to\none puts point at the beginning of the string.  *Note* that this\nbehavior differs from the way such arguments are used in `completing-read'\nand some related functions, which use zero-indexing for POSITION.",
            "fnname": "Fread_from_minibuffer",
            "intspec": "0",
            "lname": "read-from-minibuffer",
            "maxargs": 7,
            "minargs": 1,
            "path": "minibuf.c",
            "sname": "Sread_from_minibuffer"
        },
        {
            "args": [
                "string",
                "start",
                "end"
            ],
            "attributes": null,
            "doc": "Read one Lisp expression which is represented as text by STRING.\nReturns a cons: (OBJECT-READ . FINAL-STRING-INDEX).\nFINAL-STRING-INDEX is an integer giving the position of the next\nremaining character in STRING.  START and END optionally delimit\na substring of STRING from which to read;  they default to 0 and\n\\(length STRING) respectively.  Negative values are counted from\nthe end of STRING.",
            "fnname": "Fread_from_string",
            "intspec": "0",
            "lname": "read-from-string",
            "maxargs": 3,
            "minargs": 1,
            "path": "lread.c",
            "sname": "Sread_from_string"
        },
        {
            "args": [
                "prompt"
            ],
            "attributes": null,
            "doc": "One arg PROMPT, a string.  Read the name of a function and return as a symbol.\nPrompt with PROMPT.",
            "fnname": "Fread_function",
            "intspec": "0",
            "lname": "read-function",
            "maxargs": 1,
            "minargs": 1,
            "path": "minibuf.c",
            "sname": "Sread_function"
        },
        {
            "args": [
                "prompt",
                "continue_echo",
                "dont_downcase_last",
                "can_return_switch_frame",
                "cmd_loop",
                "disable_text_conversion"
            ],
            "attributes": null,
            "doc": "Read a sequence of keystrokes and return as a string or vector.\nThe sequence is sufficient to specify a non-prefix command in the\ncurrent local and global maps.\n\nFirst arg PROMPT is a prompt string.  If nil, do not prompt specially.\nSecond (optional) arg CONTINUE-ECHO, if non-nil, means this key echos\nas a continuation of the previous key.\n\nThe third (optional) arg DONT-DOWNCASE-LAST, if non-nil, means do not\nconvert the last event to lower case.  (Normally any upper case event\nis converted to lower case if the original event is undefined and the lower\ncase equivalent is defined.)  A non-nil value is appropriate for reading\na key sequence to be defined.\n\nA C-g typed while in this function is treated like any other character,\nand `quit-flag' is not set.\n\nIf the key sequence starts with a mouse click, then the sequence is read\nusing the keymaps of the buffer of the window clicked in, not the buffer\nof the selected window as normal.\n\n`read-key-sequence' drops unbound button-down events, since you normally\nonly care about the click or drag events which follow them.  If a drag\nor multi-click event is unbound, but the corresponding click event would\nbe bound, `read-key-sequence' turns the event into a click event at the\ndrag's starting position.  This means that you don't have to distinguish\nbetween click and drag, double, or triple events unless you want to.\n\n`read-key-sequence' prefixes mouse events on mode lines, the vertical\nlines separating windows, and scroll bars with imaginary keys\n`mode-line', `vertical-line', and `vertical-scroll-bar'.\n\nOptional fourth argument CAN-RETURN-SWITCH-FRAME non-nil means that this\nfunction will process a switch-frame event if the user switches frames\nbefore typing anything.  If the user switches frames in the middle of a\nkey sequence, or at the start of the sequence but CAN-RETURN-SWITCH-FRAME\nis nil, then the event will be put off until after the current key sequence.\n\n`read-key-sequence' checks `function-key-map' for function key\nsequences, where they wouldn't conflict with ordinary bindings.  See\n`function-key-map' for more details.\n\nThe optional fifth argument CMD-LOOP, if non-nil, means\nthat this key sequence is being read by something that will\nread commands one after another.  It should be nil if the caller\nwill read just one key sequence.\n\nThe optional sixth argument DISABLE-TEXT-CONVERSION, if non-nil, means\ndisable input method text conversion for the duration of reading this\nkey sequence, and that keyboard input will always result in key events\nbeing sent.",
            "fnname": "Fread_key_sequence",
            "intspec": "0",
            "lname": "read-key-sequence",
            "maxargs": 6,
            "minargs": 1,
            "path": "keyboard.c",
            "sname": "Sread_key_sequence"
        },
        {
            "args": [
                "prompt",
                "continue_echo",
                "dont_downcase_last",
                "can_return_switch_frame",
                "cmd_loop",
                "disable_text_conversion"
            ],
            "attributes": null,
            "doc": "Like `read-key-sequence' but always return a vector.",
            "fnname": "Fread_key_sequence_vector",
            "intspec": "0",
            "lname": "read-key-sequence-vector",
            "maxargs": 6,
            "minargs": 1,
            "path": "keyboard.c",
            "sname": "Sread_key_sequence_vector"
        },
        {
            "args": [
                "prompt"
            ],
            "attributes": null,
            "doc": "Read a coding system from the minibuffer, prompting with string PROMPT.",
            "fnname": "Fread_non_nil_coding_system",
            "intspec": "0",
            "lname": "read-non-nil-coding-system",
            "maxargs": 1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Sread_non_nil_coding_system"
        },
        {
            "args": [
                "stream"
            ],
            "attributes": null,
            "doc": "Read one Lisp expression as text from STREAM, return as Lisp object.\nConvert each occurrence of a symbol into a \"symbol with pos\" object.\n\nIf STREAM is nil, use the value of `standard-input' (which see).\nSTREAM or the value of `standard-input' may be:\n a buffer (read from point and advance it)\n a marker (read from where it points and advance it)\n a function (call it with no arguments for each character,\n     call it with a char as argument to push a char back)\n a string (takes text from string, starting at the beginning)\n t (read text line using minibuffer and use it, or read from\n    standard input in batch mode).",
            "fnname": "Fread_positioning_symbols",
            "intspec": "0",
            "lname": "read-positioning-symbols",
            "maxargs": 1,
            "minargs": 0,
            "path": "lread.c",
            "sname": "Sread_positioning_symbols"
        },
        {
            "args": [
                "prompt",
                "initial_input",
                "history",
                "default_value",
                "inherit_input_method"
            ],
            "attributes": null,
            "doc": "Read a string from the minibuffer, prompting with string PROMPT.\nIf non-nil, second arg INITIAL-INPUT is a string to insert before reading.\n  This argument has been superseded by DEFAULT-VALUE and should normally be nil\n  in new code.  It behaves as INITIAL-CONTENTS in `read-from-minibuffer' (which\n  see).\nThe third arg HISTORY, if non-nil, specifies a history list\n  and optionally the initial position in the list.\nSee `read-from-minibuffer' for details of HISTORY argument.\nFourth arg DEFAULT-VALUE is the default value or the list of default values.\n If non-nil, it is used for history commands, and as the value (or the first\n element of the list of default values) to return if the user enters the\n empty string.\nFifth arg INHERIT-INPUT-METHOD, if non-nil, means the minibuffer inherits\n the current input method and the setting of `enable-multibyte-characters'.",
            "fnname": "Fread_string",
            "intspec": "0",
            "lname": "read-string",
            "maxargs": 5,
            "minargs": 1,
            "path": "minibuf.c",
            "sname": "Sread_string"
        },
        {
            "args": [
                "prompt",
                "default_value"
            ],
            "attributes": null,
            "doc": "Read the name of a user option and return it as a symbol.\nPrompt with PROMPT.  By default, return DEFAULT-VALUE or its first element\nif it is a list of strings.\nA user option, or customizable variable, is one for which\n`custom-variable-p' returns non-nil.",
            "fnname": "Fread_variable",
            "intspec": "0",
            "lname": "read-variable",
            "maxargs": 2,
            "minargs": 1,
            "path": "minibuf.c",
            "sname": "Sread_variable"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if current buffer has been auto-saved recently.\nMore precisely, if it has been auto-saved since last read from or saved\nin the visited file.  If the buffer has no visited file,\nthen any auto-save counts as \"recent\".",
            "fnname": "Frecent_auto_save_p",
            "intspec": "0",
            "lname": "recent-auto-save-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "fileio.c",
            "sname": "Srecent_auto_save_p"
        },
        {
            "args": [
                "include_cmds"
            ],
            "attributes": null,
            "doc": "Return vector of last few events, not counting those from keyboard macros.\nIf INCLUDE-CMDS is non-nil, include the commands that were run,\nrepresented as pseudo-events of the form (nil . COMMAND).",
            "fnname": "Frecent_keys",
            "intspec": "0",
            "lname": "recent-keys",
            "maxargs": 1,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Srecent_keys"
        },
        {
            "args": [
                "arg",
                "redisplay"
            ],
            "attributes": null,
            "doc": "Center point in selected window and maybe redisplay frame.\nWith a numeric prefix argument ARG, recenter putting point on screen line ARG\nrelative to the selected window.  If ARG is negative, it counts up from the\nbottom of the window.  (ARG should be less than the height of the window.)\n\nIf ARG is omitted or nil, then recenter with point on the middle line\nof the selected window; if REDISPLAY & `recenter-redisplay' are\nnon-nil, also erase the entire frame and redraw it (when\n`auto-resize-tool-bars' is set to `grow-only', this resets the\ntool-bar's height to the minimum height needed); if\n`recenter-redisplay' has the special value `tty', then only tty frames\nare redrawn.  Interactively, REDISPLAY is always non-nil.\n\nJust C-u as prefix means put point in the center of the window\nand redisplay normally--don't erase and redraw the frame.",
            "fnname": "Frecenter",
            "intspec": "P\np",
            "lname": "recenter",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Srecenter"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Recreate FRAME's default font using updated font parameters.\nSignal an error if FRAME is not a window system frame.  This should be\ncalled after a `config-changed' event is received, signaling that the\nparameters (such as pixel density) used by the system to open fonts\nhave changed.",
            "fnname": "Freconsider_frame_fonts",
            "intspec": "0",
            "lname": "reconsider-frame-fonts",
            "maxargs": 1,
            "minargs": 1,
            "path": "frame.c",
            "sname": "Sreconsider_frame_fonts"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Create a new record.\nTYPE is its type as returned by `type-of'; it should be either a\nsymbol or a type descriptor.  SLOTS is used to initialize the record\nslots with shallow copies of the arguments.\nusage: (record TYPE &rest SLOTS)",
            "fnname": "Frecord",
            "intspec": "0",
            "lname": "record",
            "maxargs": -1,
            "minargs": 1,
            "path": "alloc.c",
            "sname": "Srecord"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a record.",
            "fnname": "Frecordp",
            "intspec": "0",
            "lname": "recordp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Srecordp"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current depth in recursive edits.",
            "fnname": "Frecursion_depth",
            "intspec": "0",
            "lname": "recursion-depth",
            "maxargs": 0,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Srecursion_depth"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Invoke the editor command loop recursively.\nTo get out of the recursive edit, a command can throw to `exit' -- for\ninstance (throw \\\\='exit nil).\n\nThe following values (last argument to `throw') can be used when\nthrowing to \\\\='exit:\n\n- t causes `recursive-edit' to quit, so that control returns to the\n  command loop one level up.\n\n- A string causes `recursive-edit' to signal an error, printing that\n  string as the error message.\n\n- A function causes `recursive-edit' to call that function with no\n  arguments, and then return normally.\n\n- Any other value causes `recursive-edit' to return normally to the\n  function that called it.\n\nThis function is called by the editor initialization to begin editing.",
            "fnname": "Frecursive_edit",
            "intspec": "",
            "lname": "recursive-edit",
            "maxargs": 0,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Srecursive_edit"
        },
        {
            "args": [
                "file",
                "append"
            ],
            "attributes": null,
            "doc": "Redirect debugging output (stderr stream) to file FILE.\nIf FILE is nil, reset target to the initial stderr stream.\nOptional arg APPEND non-nil (interactively, with prefix arg) means\nappend to existing target file.",
            "fnname": "Fredirect_debugging_output",
            "intspec": "FDebug output file: \nP",
            "lname": "redirect-debugging-output",
            "maxargs": 2,
            "minargs": 1,
            "path": "print.c",
            "sname": "Sredirect_debugging_output"
        },
        {
            "args": [
                "frame",
                "focus_frame"
            ],
            "attributes": null,
            "doc": "Arrange for keystrokes typed at FRAME to be sent to FOCUS-FRAME.\nIn other words, switch-frame events caused by events in FRAME will\nrequest a switch to FOCUS-FRAME, and `last-event-frame' will be\nFOCUS-FRAME after reading an event typed at FRAME.\n\nIf FOCUS-FRAME is nil, any existing redirection is canceled, and the\nframe again receives its own keystrokes.\n\nFocus redirection is useful for temporarily redirecting keystrokes to\na surrogate minibuffer frame when a frame doesn't have its own\nminibuffer window.\n\nA frame's focus redirection can be changed by `select-frame'.  If frame\nFOO is selected, and then a different frame BAR is selected, any\nframes redirecting their focus to FOO are shifted to redirect their\nfocus to BAR.  This allows focus redirection to work properly when the\nuser switches from one frame to another using `select-window'.\n\nThis means that a frame whose focus is redirected to itself is treated\ndifferently from a frame whose focus is redirected to nil; the former\nis affected by `select-frame', while the latter is not.\n\nThe redirection lasts until `redirect-frame-focus' is called to change it.",
            "fnname": "Fredirect_frame_focus",
            "intspec": "0",
            "lname": "redirect-frame-focus",
            "maxargs": 2,
            "minargs": 1,
            "path": "frame.c",
            "sname": "Sredirect_frame_focus"
        },
        {
            "args": [
                "force"
            ],
            "attributes": null,
            "doc": "Perform redisplay.\nOptional arg FORCE, if non-nil, prevents redisplay from being\npreempted by arriving input, even if `redisplay-dont-pause' is nil.\nIf `redisplay-dont-pause' is non-nil (the default), redisplay is never\npreempted by arriving input, so FORCE does nothing.\n\nReturn t if redisplay was performed, nil if redisplay was preempted\nimmediately by pending input.",
            "fnname": "Fredisplay",
            "intspec": "0",
            "lname": "redisplay",
            "maxargs": 1,
            "minargs": 0,
            "path": "dispnew.c",
            "sname": "Sredisplay"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Clear and redisplay all visible frames.",
            "fnname": "Fredraw_display",
            "intspec": "",
            "lname": "redraw-display",
            "maxargs": 0,
            "minargs": 0,
            "path": "dispnew.c",
            "sname": "Sredraw_display"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Clear frame FRAME and output again what is supposed to appear on it.\nIf FRAME is omitted or nil, the selected frame is used.",
            "fnname": "Fredraw_frame",
            "intspec": "0",
            "lname": "redraw-frame",
            "maxargs": 1,
            "minargs": 0,
            "path": "dispnew.c",
            "sname": "Sredraw_frame"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Return a regexp string which matches exactly STRING and nothing else.",
            "fnname": "Fregexp_quote",
            "intspec": "0",
            "lname": "regexp-quote",
            "maxargs": 1,
            "minargs": 1,
            "path": "search.c",
            "sname": "Sregexp_quote"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the integer value of point or mark, whichever is smaller.",
            "fnname": "Fregion_beginning",
            "intspec": "0",
            "lname": "region-beginning",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sregion_beginning"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the integer value of point or mark, whichever is larger.",
            "fnname": "Fregion_end",
            "intspec": "0",
            "lname": "region-end",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Sregion_end"
        },
        {
            "args": [
                "name",
                "ccl_prog"
            ],
            "attributes": null,
            "doc": "Register CCL program CCL-PROG as NAME in `ccl-program-table'.\nCCL-PROG should be a compiled CCL program (vector), or nil.\nIf it is nil, just reserve NAME as a CCL program name.\nReturn index number of the registered CCL program.",
            "fnname": "Fregister_ccl_program",
            "intspec": "0",
            "lname": "register-ccl-program",
            "maxargs": 2,
            "minargs": 2,
            "path": "ccl.c",
            "sname": "Sregister_ccl_program"
        },
        {
            "args": [
                "symbol",
                "map"
            ],
            "attributes": null,
            "doc": "Register SYMBOL as code conversion map MAP.\nReturn index number of the registered map.",
            "fnname": "Fregister_code_conversion_map",
            "intspec": "0",
            "lname": "register-code-conversion-map",
            "maxargs": 2,
            "minargs": 2,
            "path": "ccl.c",
            "sname": "Sregister_code_conversion_map"
        },
        {
            "args": [
                "key",
                "table"
            ],
            "attributes": null,
            "doc": "Remove KEY from TABLE.",
            "fnname": "Fremhash",
            "intspec": "0",
            "lname": "remhash",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sremhash"
        },
        {
            "args": [
                "start",
                "end",
                "list_of_properties",
                "object"
            ],
            "attributes": null,
            "doc": "Remove some properties from text from START to END.\nThe third argument LIST-OF-PROPERTIES is a list of property names to remove.\nIf the optional fourth argument OBJECT is a buffer (or nil, which means\nthe current buffer), START and END are buffer positions (integers or\nmarkers).  If OBJECT is a string, START and END are 0-based indices into it.\nReturn t if any property was actually removed, nil otherwise.",
            "fnname": "Fremove_list_of_text_properties",
            "intspec": "0",
            "lname": "remove-list-of-text-properties",
            "maxargs": 4,
            "minargs": 3,
            "path": "textprop.c",
            "sname": "Sremove_list_of_text_properties"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "If ARG is a symbol with position, return it without the position.\nOtherwise, return ARG unchanged.  Compare with `bare-symbol'.",
            "fnname": "Fremove_pos_from_symbol",
            "intspec": "0",
            "lname": "remove-pos-from-symbol",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sremove_pos_from_symbol"
        },
        {
            "args": [
                "start",
                "end",
                "properties",
                "object"
            ],
            "attributes": null,
            "doc": "Remove some properties from text from START to END.\nThe third argument PROPERTIES is a property list\nwhose property names specify the properties to remove.\n\\(The values stored in PROPERTIES are ignored.)\nIf the optional fourth argument OBJECT is a buffer (or nil, which means\nthe current buffer), START and END are buffer positions (integers or\nmarkers).  If OBJECT is a string, START and END are 0-based indices into it.\nReturn t if any property was actually removed, nil otherwise.\n\nUse `set-text-properties' if you want to remove all text properties.",
            "fnname": "Fremove_text_properties",
            "intspec": "0",
            "lname": "remove-text-properties",
            "maxargs": 4,
            "minargs": 3,
            "path": "textprop.c",
            "sname": "Sremove_text_properties"
        },
        {
            "args": [
                "symbol",
                "watch_function"
            ],
            "attributes": null,
            "doc": "Undo the effect of `add-variable-watcher'.\nRemove WATCH-FUNCTION from the list of functions to be called when\nSYMBOL (or its aliases) are set.",
            "fnname": "Fremove_variable_watcher",
            "intspec": "0",
            "lname": "remove-variable-watcher",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sremove_variable_watcher"
        },
        {
            "args": [
                "newname",
                "unique"
            ],
            "attributes": null,
            "doc": "Change current buffer's name to NEWNAME (a string).\nIf second arg UNIQUE is nil or omitted, it is an error if a\nbuffer named NEWNAME already exists.\nIf UNIQUE is non-nil, come up with a new name using\n`generate-new-buffer-name'.\nInteractively, you can set UNIQUE with a prefix argument.\nWe return the name we actually gave the buffer.\nThis does not change the name of the visited file (if any).",
            "fnname": "Frename_buffer",
            "intspec": "(list (read-string \"Rename buffer (to new name): \" \\\n              nil 'buffer-name-history (buffer-name (current-buffer))) \\\n              current-prefix-arg)",
            "lname": "rename-buffer",
            "maxargs": 2,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Srename_buffer"
        },
        {
            "args": [
                "file",
                "newname",
                "ok_if_already_exists"
            ],
            "attributes": null,
            "doc": "Rename FILE as NEWNAME.  Both args must be strings.\nIf file has names other than FILE, it continues to have those names.\nIf NEWNAME is a directory name, rename FILE to a like-named file under\nNEWNAME.  For NEWNAME to be recognized as a directory name, it should\nend in a slash.\n\nSignal a `file-already-exists' error if a file NEWNAME already exists\nunless optional third argument OK-IF-ALREADY-EXISTS is non-nil.\nAn integer third arg means request confirmation if NEWNAME already exists.\nThis is what happens in interactive use with M-x.",
            "fnname": "Frename_file",
            "intspec": "fRename file: \nGRename %s to file: \np",
            "lname": "rename-file",
            "maxargs": 3,
            "minargs": 2,
            "path": "fileio.c",
            "sname": "Srename_file"
        },
        {
            "args": [
                "source",
                "max_secs",
                "max_costs"
            ],
            "attributes": null,
            "doc": "Replace accessible portion of current buffer with that of SOURCE.\nSOURCE can be a buffer or a string that names a buffer.\nInteractively, prompt for SOURCE.\n\nAs far as possible the replacement is non-destructive, i.e. existing\nbuffer contents, markers, properties, and overlays in the current\nbuffer stay intact.\n\nBecause this function can be very slow if there is a large number of\ndifferences between the two buffers, there are two optional arguments\nmitigating this issue.\n\nThe MAX-SECS argument, if given, defines a hard limit on the time used\nfor comparing the buffers.  If it takes longer than MAX-SECS, the\nfunction falls back to a plain `delete-region' and\n`insert-buffer-substring'.  (Note that the checks are not performed\ntoo evenly over time, so in some cases it may run a bit longer than\nallowed).\n\nThe optional argument MAX-COSTS defines the quality of the difference\ncomputation.  If the actual costs exceed this limit, heuristics are\nused to provide a faster but suboptimal solution.  The default value\nis 1000000.\n\nThis function returns t if a non-destructive replacement could be\nperformed.  Otherwise, i.e., if MAX-SECS was exceeded, it returns\nnil.",
            "fnname": "Freplace_buffer_contents",
            "intspec": "bSource buffer: ",
            "lname": "replace-buffer-contents",
            "maxargs": 3,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Sreplace_buffer_contents"
        },
        {
            "args": [
                "newtext",
                "fixedcase",
                "literal",
                "string",
                "subexp"
            ],
            "attributes": null,
            "doc": "Replace text matched by last search with NEWTEXT.\nLeave point at the end of the replacement text.\n\nIf optional second arg FIXEDCASE is non-nil, do not alter the case of\nthe replacement text.  Otherwise, maybe capitalize the whole text, or\nmaybe just word initials, based on the replaced text.  If the replaced\ntext has only capital letters and has at least one multiletter word,\nconvert NEWTEXT to all caps.  Otherwise if all words are capitalized\nin the replaced text, capitalize each word in NEWTEXT.  Note that\nwhat exactly is a word is determined by the syntax tables in effect\nin the current buffer.\n\nIf optional third arg LITERAL is non-nil, insert NEWTEXT literally.\nOtherwise treat `\\\\' as special:\n  `\\\\&' in NEWTEXT means substitute original matched text.\n  `\\\\N' means substitute what matched the Nth `\\\\(...\\\\)'.\n       If Nth parens didn't match, substitute nothing.\n  `\\\\\\\\' means insert one `\\\\'.\n  `\\\\?' is treated literally\n       (for compatibility with `query-replace-regexp').\n  Any other character following `\\\\' signals an error.\nCase conversion does not apply to these substitutions.\n\nIf optional fourth argument STRING is non-nil, it should be a string\nto act on; this should be the string on which the previous match was\ndone via `string-match'.  In this case, `replace-match' creates and\nreturns a new string, made by copying STRING and replacing the part of\nSTRING that was matched (the original STRING itself is not altered).\n\nThe optional fifth argument SUBEXP specifies a subexpression;\nit says to replace just that subexpression with NEWTEXT,\nrather than replacing the entire matched text.\nThis is, in a vague sense, the inverse of using `\\\\N' in NEWTEXT;\n`\\\\N' copies subexp N into NEWTEXT, but using N as SUBEXP puts\nNEWTEXT in place of subexp N.\nThis is useful only after a regular expression search or match,\nsince only regular expressions have distinguished subexpressions.",
            "fnname": "Freplace_match",
            "intspec": "0",
            "lname": "replace-match",
            "maxargs": 5,
            "minargs": 1,
            "path": "search.c",
            "sname": "Sreplace_match"
        },
        {
            "args": [
                "feature",
                "filename",
                "noerror"
            ],
            "attributes": null,
            "doc": "If FEATURE is not already loaded, load it from FILENAME.\nIf FEATURE is not a member of the list `features', then the feature was\nnot yet loaded; so load it from file FILENAME.\n\nIf FILENAME is omitted, the printname of FEATURE is used as the file\nname, and `load' is called to try to load the file by that name, after\nappending the suffix `.elc', `.el', or the system-dependent suffix for\ndynamic module files, in that order; but the function will not try to\nload the file without any suffix.  See `get-load-suffixes' for the\ncomplete list of suffixes.\n\nTo find the file, this function searches the directories in `load-path'.\n\nIf the optional third argument NOERROR is non-nil, then, if\nthe file is not found, the function returns nil instead of signaling\nan error.  Normally the return value is FEATURE.\n\nThe normal messages issued by `load' at start and end of loading\nFILENAME are suppressed.",
            "fnname": "Frequire",
            "intspec": "0",
            "lname": "require",
            "maxargs": 3,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Srequire"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Resize mini window WINDOW.",
            "fnname": "Fresize_mini_window_internal",
            "intspec": "0",
            "lname": "resize-mini-window-internal",
            "maxargs": 1,
            "minargs": 1,
            "path": "window.c",
            "sname": "Sresize_mini_window_internal"
        },
        {
            "args": [
                "flag"
            ],
            "attributes": null,
            "doc": "Like `set-buffer-modified-p', but doesn't redisplay buffer's mode line.\nA nil FLAG means to mark the buffer as unmodified.  A non-nil FLAG\nmeans mark the buffer as modified.  A special value of `autosaved'\nwill mark the buffer as modified and also as autosaved since it was\nlast modified.\n\nThis function also locks or unlocks the file visited by the buffer,\nif both `buffer-file-truename' and `buffer-file-name' are non-nil.\n\nIt is not ensured that mode lines will be updated to show the modified\nstate of the current buffer.  Use with care.",
            "fnname": "Frestore_buffer_modified_p",
            "intspec": "0",
            "lname": "restore-buffer-modified-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Srestore_buffer_modified_p"
        },
        {
            "args": [
                "tty"
            ],
            "attributes": null,
            "doc": "Resume the previously suspended terminal device TTY.\nThe terminal is opened and reinitialized.  Frames that are on the\nsuspended terminal are revived.\n\nIt is an error to resume a terminal while another terminal is active\non the same device.\n\nThis function runs `resume-tty-functions' after resuming the terminal.\nThe functions are run with one arg, the id of the resumed terminal\ndevice.\n\n`resume-tty' does nothing if it is called on a device that is not\nsuspended.\n\nTTY may be a terminal object, a frame, or nil (meaning the selected\nframe's terminal).",
            "fnname": "Fresume_tty",
            "intspec": "0",
            "lname": "resume-tty",
            "maxargs": 1,
            "minargs": 0,
            "path": "term.c",
            "sname": "Sresume_tty"
        },
        {
            "args": [
                "seq"
            ],
            "attributes": null,
            "doc": "Return the reversed copy of list, vector, or string SEQ.\nSee also the function `nreverse', which is used more often.",
            "fnname": "Freverse",
            "intspec": "0",
            "lname": "reverse",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sreverse"
        },
        {
            "args": [
                "arg",
                "divisor"
            ],
            "attributes": null,
            "doc": "Return the nearest integer to ARG.\nWith optional DIVISOR, return the nearest integer to ARG/DIVISOR.\n\nRounding a value equidistant between two integers may choose the\ninteger closer to zero, or it may prefer an even integer, depending on\nyour machine.  For example, (round 2.5) can return 3 on some\nsystems, but 2 on others.",
            "fnname": "Fround",
            "intspec": "0",
            "lname": "round",
            "maxargs": 2,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Sround"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Run HOOK with the specified arguments ARGS.\nHOOK should be a symbol, a hook variable.  The value of HOOK\nmay be nil, a function, or a list of functions.  Call each\nfunction in order with arguments ARGS.  The final return value\nis unspecified.\n\nDo not use `make-local-variable' to make a hook variable buffer-local.\nInstead, use `add-hook' and specify t for the LOCAL argument.\nusage: (run-hook-with-args HOOK &rest ARGS)",
            "fnname": "Frun_hook_with_args",
            "intspec": "0",
            "lname": "run-hook-with-args",
            "maxargs": -1,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Srun_hook_with_args"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Run HOOK with the specified arguments ARGS.\nHOOK should be a symbol, a hook variable.  The value of HOOK\nmay be nil, a function, or a list of functions.  Call each\nfunction in order with arguments ARGS, stopping at the first\none that returns nil, and return nil.  Otherwise (if all functions\nreturn non-nil, or if there are no functions to call), return non-nil\n\\(do not rely on the precise return value in this case).\n\nDo not use `make-local-variable' to make a hook variable buffer-local.\nInstead, use `add-hook' and specify t for the LOCAL argument.\nusage: (run-hook-with-args-until-failure HOOK &rest ARGS)",
            "fnname": "Frun_hook_with_args_until_failure",
            "intspec": "0",
            "lname": "run-hook-with-args-until-failure",
            "maxargs": -1,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Srun_hook_with_args_until_failure"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Run HOOK with the specified arguments ARGS.\nHOOK should be a symbol, a hook variable.  The value of HOOK\nmay be nil, a function, or a list of functions.  Call each\nfunction in order with arguments ARGS, stopping at the first\none that returns non-nil, and return that value.  Otherwise (if\nall functions return nil, or if there are no functions to call),\nreturn nil.\n\nDo not use `make-local-variable' to make a hook variable buffer-local.\nInstead, use `add-hook' and specify t for the LOCAL argument.\nusage: (run-hook-with-args-until-success HOOK &rest ARGS)",
            "fnname": "Frun_hook_with_args_until_success",
            "intspec": "0",
            "lname": "run-hook-with-args-until-success",
            "maxargs": -1,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Srun_hook_with_args_until_success"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Run HOOK, passing each function through WRAP-FUNCTION.\nI.e. instead of calling each function FUN directly with arguments ARGS,\nit calls WRAP-FUNCTION with arguments FUN and ARGS.\nAs soon as a call to WRAP-FUNCTION returns non-nil, `run-hook-wrapped'\naborts and returns that value.\nusage: (run-hook-wrapped HOOK WRAP-FUNCTION &rest ARGS)",
            "fnname": "Frun_hook_wrapped",
            "intspec": "0",
            "lname": "run-hook-wrapped",
            "maxargs": -1,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Srun_hook_wrapped"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Run each hook in HOOKS.\nEach argument should be a symbol, a hook variable.\nThese symbols are processed in the order specified.\nIf a hook symbol has a non-nil value, that value may be a function\nor a list of functions to be called to run the hook.\nIf the value is a function, it is called with no arguments.\nIf it is a list, the elements are called, in order, with no arguments.\n\nMajor modes should not use this function directly to run their mode\nhook; they should use `run-mode-hooks' instead.\n\nDo not use `make-local-variable' to make a hook variable buffer-local.\nInstead, use `add-hook' and specify t for the LOCAL argument.\nusage: (run-hooks &rest HOOKS)",
            "fnname": "Frun_hooks",
            "intspec": "0",
            "lname": "run-hooks",
            "maxargs": -1,
            "minargs": 0,
            "path": "eval.c",
            "sname": "Srun_hooks"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Run `window-configuration-change-hook' for FRAME.\nIf FRAME is omitted or nil, it defaults to the selected frame.\n\nThis function should not be needed any more and will be therefore\nconsidered obsolete.",
            "fnname": "Frun_window_configuration_change_hook",
            "intspec": "0",
            "lname": "run-window-configuration-change-hook",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Srun_window_configuration_change_hook"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Run `window-scroll-functions' for WINDOW.\nIf WINDOW is omitted or nil, it defaults to the selected window.\n\nThis function is called by `split-window' for the new window, after it\nhas established the size of the new window.",
            "fnname": "Frun_window_scroll_functions",
            "intspec": "0",
            "lname": "run-window-scroll-functions",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Srun_window_scroll_functions"
        },
        {
            "args": [
                "list"
            ],
            "attributes": null,
            "doc": "Return the length of a list, but avoid error or infinite loop.\nThis function never gets an error.  If LIST is not really a list,\nit returns 0.  If LIST is circular, it returns an integer that is at\nleast the number of distinct elements.",
            "fnname": "Fsafe_length",
            "intspec": "0",
            "lname": "safe-length",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Ssafe_length"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Record which buffer is current; execute BODY; make that buffer current.\nBODY is executed just like `progn'.\nusage: (save-current-buffer &rest BODY)",
            "fnname": "Fsave_current_buffer",
            "intspec": "0",
            "lname": "save-current-buffer",
            "maxargs": -2,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Ssave_current_buffer"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Save point, and current buffer; execute BODY; restore those things.\nExecutes BODY just like `progn'.\nThe values of point and the current buffer are restored\neven in case of abnormal exit (throw or error).\n\nIf you only want to save the current buffer but not point,\nthen just use `save-current-buffer', or even `with-current-buffer'.\n\nBefore Emacs 25.1, `save-excursion' used to save the mark state.\nTo save the mark state as well as point and the current buffer, use\n`save-mark-and-excursion'.\n\nusage: (save-excursion &rest BODY)",
            "fnname": "Fsave_excursion",
            "intspec": "0",
            "lname": "save-excursion",
            "maxargs": -2,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Ssave_excursion"
        },
        {
            "args": [
                "body"
            ],
            "attributes": null,
            "doc": "Execute BODY, saving and restoring current buffer's restrictions.\nThe buffer's restrictions make parts of the beginning and end invisible.\n\\(They are set up with `narrow-to-region' and eliminated with `widen'.)\nThis special form, `save-restriction', saves the current buffer's\nrestrictions, including those that were set by `with-restriction' with a\nlabel argument, when it is entered, and restores them when it is exited.\nSo any `narrow-to-region' within BODY lasts only until the end of the form.\nThe old restrictions settings are restored even in case of abnormal exit\n\\(throw or error).\n\nThe value returned is the value of the last form in BODY.\n\nNote: if you are using both `save-excursion' and `save-restriction',\nuse `save-excursion' outermost:\n    (save-excursion (save-restriction ...))\n\nusage: (save-restriction &rest BODY)",
            "fnname": "Fsave_restriction",
            "intspec": "0",
            "lname": "save-restriction",
            "maxargs": -2,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Ssave_restriction"
        },
        {
            "args": [
                "from",
                "count",
                "depth"
            ],
            "attributes": null,
            "doc": "Scan from character number FROM by COUNT lists.\nScan forward if COUNT is positive, backward if COUNT is negative.\nReturn the character number of the position thus found.\n\nA \\\"list\", in this context, refers to a balanced parenthetical\ngrouping, as determined by the syntax table.\n\nIf DEPTH is nonzero, treat that as the nesting depth of the starting\npoint (i.e. the starting point is DEPTH parentheses deep).  This\nfunction scans over parentheses until the depth goes to zero COUNT\ntimes.  Hence, positive DEPTH moves out that number of levels of\nparentheses, while negative DEPTH moves to a deeper level.\n\nComments are ignored if `parse-sexp-ignore-comments' is non-nil.\n\nIf we reach the beginning or end of the accessible part of the buffer\nbefore we have scanned over COUNT lists, return nil if the depth at\nthat point is zero, and signal an error if the depth is nonzero.",
            "fnname": "Fscan_lists",
            "intspec": "0",
            "lname": "scan-lists",
            "maxargs": 3,
            "minargs": 3,
            "path": "syntax.c",
            "sname": "Sscan_lists"
        },
        {
            "args": [
                "from",
                "count"
            ],
            "attributes": null,
            "doc": "Scan from character number FROM by COUNT balanced expressions.\nIf COUNT is negative, scan backwards.\nReturns the character number of the position thus found.\n\nComments are ignored if `parse-sexp-ignore-comments' is non-nil.\n\nIf the beginning or end of (the accessible part of) the buffer is reached\nin the middle of a parenthetical grouping, an error is signaled.\nIf the beginning or end is reached between groupings\nbut before count is used up, nil is returned.",
            "fnname": "Fscan_sexps",
            "intspec": "0",
            "lname": "scan-sexps",
            "maxargs": 2,
            "minargs": 2,
            "path": "syntax.c",
            "sname": "Sscan_sexps"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Scroll text of selected window down ARG lines.\nIf ARG is omitted or nil, scroll down by a near full screen.\nA near full screen is `next-screen-context-lines' less than a full screen.\nNegative ARG means scroll upward.\nIf ARG is the atom `-', scroll upward by nearly full screen.\nWhen calling from a program, supply as argument a number, nil, or `-'.",
            "fnname": "Fscroll_down",
            "intspec": "^P",
            "lname": "scroll-down",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sscroll_down"
        },
        {
            "args": [
                "arg",
                "set_minimum"
            ],
            "attributes": null,
            "doc": "Scroll selected window display ARG columns left.\nDefault for ARG is window width minus 2.\nValue is the total amount of leftward horizontal scrolling in\neffect after the change.\nIf SET-MINIMUM is non-nil, the new scroll amount becomes the\nlower bound for automatic scrolling, i.e. automatic scrolling\nwill not scroll a window to a column less than the value returned\nby this function.  This happens in an interactive call.",
            "fnname": "Fscroll_left",
            "intspec": "^P\np",
            "lname": "scroll-left",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sscroll_left"
        },
        {
            "args": [
                "arg",
                "set_minimum"
            ],
            "attributes": null,
            "doc": "Scroll selected window display ARG columns right.\nDefault for ARG is window width minus 2.\nValue is the total amount of leftward horizontal scrolling in\neffect after the change.\nIf SET-MINIMUM is non-nil, the new scroll amount becomes the\nlower bound for automatic scrolling, i.e. automatic scrolling\nwill not scroll a window to a column less than the value returned\nby this function.  This happens in an interactive call.",
            "fnname": "Fscroll_right",
            "intspec": "^P\np",
            "lname": "scroll-right",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sscroll_right"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Scroll text of selected window upward ARG lines.\nIf ARG is omitted or nil, scroll upward by a near full screen.\nA near full screen is `next-screen-context-lines' less than a full screen.\nNegative ARG means scroll downward.\nIf ARG is the atom `-', scroll downward by nearly full screen.\nWhen calling from a program, supply as argument a number, nil, or `-'.",
            "fnname": "Fscroll_up",
            "intspec": "^P",
            "lname": "scroll-up",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sscroll_up"
        },
        {
            "args": [
                "string",
                "bound",
                "noerror",
                "count"
            ],
            "attributes": null,
            "doc": "Search backward from point for STRING.\nSet point to the beginning of the occurrence found, and return point.\nAn optional second argument bounds the search; it is a buffer position.\n  The match found must not begin before that position.  A value of nil\n  means search to the beginning of the accessible portion of the buffer.\nOptional third argument, if t, means if fail just return nil (no error).\n  If not nil and not t, position at limit of search and return nil.\nOptional fourth argument COUNT, if a positive number, means to search\n  for COUNT successive occurrences.  If COUNT is negative, search\n  forward, instead of backward, for -COUNT occurrences.  A value of\n  nil means the same as 1.\nWith COUNT positive, the match found is the COUNTth to last one (or\n  last, if COUNT is 1 or nil) in the buffer located entirely before\n  the origin of the search; correspondingly with COUNT negative.\n\nSearch case-sensitivity is determined by the value of the variable\n`case-fold-search', which see.\n\nSee also the functions `match-beginning', `match-end' and `replace-match'.",
            "fnname": "Fsearch_backward",
            "intspec": "MSearch backward: ",
            "lname": "search-backward",
            "maxargs": 4,
            "minargs": 1,
            "path": "search.c",
            "sname": "Ssearch_backward"
        },
        {
            "args": [
                "string",
                "bound",
                "noerror",
                "count"
            ],
            "attributes": null,
            "doc": "Search forward from point for STRING.\nSet point to the end of the occurrence found, and return point.\nAn optional second argument bounds the search; it is a buffer position.\n  The match found must not end after that position.  A value of nil\n  means search to the end of the accessible portion of the buffer.\nOptional third argument, if t, means if fail just return nil (no error).\n  If not nil and not t, move to limit of search and return nil.\nOptional fourth argument COUNT, if a positive number, means to search\n  for COUNT successive occurrences.  If COUNT is negative, search\n  backward, instead of forward, for -COUNT occurrences.  A value of\n  nil means the same as 1.\nWith COUNT positive, the match found is the COUNTth one (or first,\n  if COUNT is 1 or nil) in the buffer located entirely after the\n  origin of the search; correspondingly with COUNT negative.\n\nSearch case-sensitivity is determined by the value of the variable\n`case-fold-search', which see.\n\nSee also the functions `match-beginning', `match-end' and `replace-match'.",
            "fnname": "Fsearch_forward",
            "intspec": "MSearch: ",
            "lname": "search-forward",
            "maxargs": 4,
            "minargs": 1,
            "path": "search.c",
            "sname": "Ssearch_forward"
        },
        {
            "args": [
                "algorithm",
                "object",
                "start",
                "end",
                "binary"
            ],
            "attributes": null,
            "doc": "Return the secure hash of OBJECT, a buffer or string.\nALGORITHM is a symbol specifying the hash to use:\n- md5    corresponds to MD5, produces a 32-character signature\n- sha1   corresponds to SHA-1, produces a 40-character signature\n- sha224 corresponds to SHA-2 (SHA-224), produces a 56-character signature\n- sha256 corresponds to SHA-2 (SHA-256), produces a 64-character signature\n- sha384 corresponds to SHA-2 (SHA-384), produces a 96-character signature\n- sha512 corresponds to SHA-2 (SHA-512), produces a 128-character signature\n\nThe two optional arguments START and END are positions specifying for\nwhich part of OBJECT to compute the hash.  If nil or omitted, uses the\nwhole OBJECT.\n\nThe full list of algorithms can be obtained with `secure-hash-algorithms'.\n\nIf BINARY is non-nil, returns a string in binary form.\n\nNote that MD5 and SHA-1 are not collision resistant and should not be\nused for anything security-related.  For these applications, use one\nof the other hash types instead, e.g. sha256 or sha512.",
            "fnname": "Fsecure_hash",
            "intspec": "0",
            "lname": "secure-hash",
            "maxargs": 5,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Ssecure_hash"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of all the supported `secure-hash' algorithms.",
            "fnname": "Fsecure_hash_algorithms",
            "intspec": "0",
            "lname": "secure-hash-algorithms",
            "maxargs": 0,
            "minargs": 0,
            "path": "fns.c",
            "sname": "Ssecure_hash_algorithms"
        },
        {
            "args": [
                "frame",
                "norecord"
            ],
            "attributes": null,
            "doc": "Select FRAME.\nSubsequent editing commands apply to its selected window.\nOptional argument NORECORD means to neither change the order of\nrecently selected windows nor the buffer list.\n\nThe selection of FRAME lasts until the next time the user does\nsomething to select a different frame, or until the next time\nthis function is called.  If you are using a window system, the\npreviously selected frame may be restored as the selected frame\nwhen returning to the command loop, because it still may have\nthe window system's input focus.  On a text terminal, the next\nredisplay will display FRAME.\n\nThis function returns FRAME, or nil if FRAME has been deleted.",
            "fnname": "Fselect_frame",
            "intspec": "e",
            "lname": "select-frame",
            "maxargs": 2,
            "minargs": 1,
            "path": "frame.c",
            "sname": "Sselect_frame"
        },
        {
            "args": [
                "window",
                "norecord"
            ],
            "attributes": null,
            "doc": "Select WINDOW which must be a live window.\nAlso make WINDOW's frame the selected frame and WINDOW that frame's\nselected window.  In addition, make WINDOW's buffer current and set its\nbuffer's value of `point' to the value of WINDOW's `window-point'.\nReturn WINDOW.\n\nOptional second arg NORECORD non-nil means do not put this buffer at the\nfront of the buffer list and do not make this window the most recently\nselected one.  Also, do not mark WINDOW for redisplay unless NORECORD\nequals the special symbol `mark-for-redisplay'.\n\nRun `buffer-list-update-hook' unless NORECORD is non-nil.  Note that\napplications and internal routines often select a window temporarily for\nvarious purposes; mostly, to simplify coding.  As a rule, such\nselections should not be recorded and therefore will not pollute\n`buffer-list-update-hook'.  Selections that \"really count\" are those\ncausing a visible change in the next redisplay of WINDOW's frame and\nshould always be recorded.  So if you think of running a function each\ntime a window gets selected, put it on `buffer-list-update-hook' or\n`window-selection-change-functions'.\n\nAlso note that the main editor command loop sets the current buffer to\nthe buffer of the selected window before each command.",
            "fnname": "Fselect_window",
            "intspec": "0",
            "lname": "select-window",
            "maxargs": 2,
            "minargs": 1,
            "path": "window.c",
            "sname": "Sselect_window"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the frame that is now selected.",
            "fnname": "Fselected_frame",
            "intspec": "0",
            "lname": "selected-frame",
            "maxargs": 0,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sselected_frame"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the selected window.\nThe selected window is the window in which the standard cursor for\nselected windows appears and to which many commands apply.\n\nAlso see `old-selected-window' and `minibuffer-selected-window'.",
            "fnname": "Fselected_window",
            "intspec": "0",
            "lname": "selected-window",
            "maxargs": 0,
            "minargs": 0,
            "path": "window.c",
            "sname": "Sselected_window"
        },
        {
            "args": [
                "n",
                "c"
            ],
            "attributes": null,
            "doc": "Insert the character you type.\nWhichever character C you type to run this command is inserted.\nThe numeric prefix argument N says how many times to repeat the insertion.\nBefore insertion, `expand-abbrev' is executed if the inserted character does\nnot have word syntax and the previous character in the buffer does.\nAfter insertion, `internal-auto-fill' is called if\n`auto-fill-function' is non-nil and if the `auto-fill-chars' table has\na non-nil value for the inserted character.  At the end, it runs\n`post-self-insert-hook'.",
            "fnname": "Fself_insert_command",
            "intspec": "(list (prefix-numeric-value current-prefix-arg) last-command-event)",
            "lname": "self-insert-command",
            "maxargs": 2,
            "minargs": 1,
            "path": "cmds.c",
            "sname": "Sself_insert_command"
        },
        {
            "args": [
                "string",
                "terminal"
            ],
            "attributes": null,
            "doc": "Send STRING to the terminal without alteration.\nControl characters in STRING will have terminal-dependent effects.\n\nOptional parameter TERMINAL specifies the tty terminal device to use.\nIt may be a terminal object, a frame, or nil for the terminal used by\nthe currently selected frame.  In batch mode, STRING is sent to stdout\nwhen TERMINAL is nil.",
            "fnname": "Fsend_string_to_terminal",
            "intspec": "0",
            "lname": "send-string-to-terminal",
            "maxargs": 2,
            "minargs": 1,
            "path": "dispnew.c",
            "sname": "Ssend_string_to_terminal"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a sequence (list or array).",
            "fnname": "Fsequencep",
            "intspec": "0",
            "lname": "sequencep",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssequencep"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Configure speed, bytesize, etc. of a serial process.\n\nArguments are specified as keyword/argument pairs.  Attributes that\nare not given are re-initialized from the process's current\nconfiguration (available via the function `process-contact') or set to\nreasonable default values.  The following arguments are defined:\n\n:process PROCESS\n:name NAME\n:buffer BUFFER\n:port PORT\n-- Any of these arguments can be given to identify the process that is\nto be configured.  If none of these arguments is given, the current\nbuffer's process is used.\n\n:speed SPEED -- SPEED is the speed of the serial port in bits per\nsecond, also called baud rate.  Any value can be given for SPEED, but\nmost serial ports work only at a few defined values between 1200 and\n115200, with 9600 being the most common value.  If SPEED is nil, the\nserial port is not configured any further, i.e., all other arguments\nare ignored.  This may be useful for special serial ports such as\nBluetooth-to-serial converters which can only be configured through AT\ncommands.  A value of nil for SPEED can be used only when passed\nthrough `make-serial-process' or `serial-term'.\n\n:bytesize BYTESIZE -- BYTESIZE is the number of bits per byte, which\ncan be 7 or 8.  If BYTESIZE is not given or nil, a value of 8 is used.\n\n:parity PARITY -- PARITY can be nil (don't use parity), the symbol\n`odd' (use odd parity), or the symbol `even' (use even parity).  If\nPARITY is not given, no parity is used.\n\n:stopbits STOPBITS -- STOPBITS is the number of stopbits used to\nterminate a byte transmission.  STOPBITS can be 1 or 2.  If STOPBITS\nis not given or nil, 1 stopbit is used.\n\n:flowcontrol FLOWCONTROL -- FLOWCONTROL determines the type of\nflowcontrol to be used, which is either nil (don't use flowcontrol),\nthe symbol `hw' (use RTS/CTS hardware flowcontrol), or the symbol `sw'\n\\(use XON/XOFF software flowcontrol).  If FLOWCONTROL is not given, no\nflowcontrol is used.\n\n`serial-process-configure' is called by `make-serial-process' for the\ninitial configuration of the serial port.\n\nExamples:\n\n\\(serial-process-configure :process \"/dev/ttyS0\" :speed 1200)\n\n\\(serial-process-configure\n    :buffer \"COM1\" :stopbits 1 :parity \\\\='odd :flowcontrol \\\\='hw)\n\n\\(serial-process-configure :port \"\\\\\\\\.\\\\COM13\" :bytesize 7)\n\nusage: (serial-process-configure &rest ARGS)",
            "fnname": "Fserial_process_configure",
            "intspec": "0",
            "lname": "serial-process-configure",
            "maxargs": -1,
            "minargs": 0,
            "path": "process.c",
            "sname": "Sserial_process_configure"
        },
        {
            "args": [
                "symbol",
                "newval"
            ],
            "attributes": null,
            "doc": "Set SYMBOL's value to NEWVAL, and return NEWVAL.",
            "fnname": "Fset",
            "intspec": "0",
            "lname": "set",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sset"
        },
        {
            "args": [
                "keys"
            ],
            "attributes": null,
            "doc": "Set the vector to be returned by `this-command-keys'.\nThe argument KEYS must be a string.\nInternal use only.",
            "fnname": "Fset__this_command_keys",
            "intspec": "0",
            "lname": "set--this-command-keys",
            "maxargs": 1,
            "minargs": 1,
            "path": "keyboard.c",
            "sname": "Sset__this_command_keys"
        },
        {
            "args": [
                "stream",
                "mode"
            ],
            "attributes": null,
            "doc": "Switch STREAM to binary I/O mode or text I/O mode.\nSTREAM can be one of the symbols `stdin', `stdout', or `stderr'.\nIf MODE is non-nil, switch STREAM to binary mode, otherwise switch\nit to text mode.\n\nAs a side effect, this function flushes any pending STREAM's data.\n\nValue is the previous value of STREAM's I/O mode, nil for text mode,\nnon-nil for binary mode.\n\nOn MS-Windows and MS-DOS, binary mode is needed to read or write\narbitrary binary data, and for disabling translation between CR-LF\npairs and a single newline character.  Examples include generation\nof text files with Unix-style end-of-line format using `princ' in\nbatch mode, with standard output redirected to a file.\n\nOn Posix systems, this function always returns non-nil, and has no\neffect except for flushing STREAM's data.",
            "fnname": "Fset_binary_mode",
            "intspec": "0",
            "lname": "set-binary-mode",
            "maxargs": 2,
            "minargs": 2,
            "path": "fileio.c",
            "sname": "Sset_binary_mode"
        },
        {
            "args": [
                "buffer_or_name"
            ],
            "attributes": null,
            "doc": "Make buffer BUFFER-OR-NAME current for editing operations.\nBUFFER-OR-NAME may be a buffer or the name of an existing buffer.\nSee also `with-current-buffer' when you want to make a buffer current\ntemporarily.  This function does not display the buffer, so its effect\nends when the current command terminates.  Use `switch-to-buffer' or\n`pop-to-buffer' to switch buffers permanently.\nThe return value is the buffer made current.",
            "fnname": "Fset_buffer",
            "intspec": "0",
            "lname": "set-buffer",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sset_buffer"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Mark current buffer as auto-saved with its current text.\nNo auto-save file will be written until the buffer changes again.",
            "fnname": "Fset_buffer_auto_saved",
            "intspec": "0",
            "lname": "set-buffer-auto-saved",
            "maxargs": 0,
            "minargs": 0,
            "path": "fileio.c",
            "sname": "Sset_buffer_auto_saved"
        },
        {
            "args": [
                "buffer"
            ],
            "attributes": null,
            "doc": "Set an appropriate major mode for BUFFER.\nFor the *scratch* buffer, use `initial-major-mode', otherwise choose a mode\naccording to the default value of `major-mode'.\nUse this function before selecting the buffer, since it may need to inspect\nthe current buffer's major mode.",
            "fnname": "Fset_buffer_major_mode",
            "intspec": "0",
            "lname": "set-buffer-major-mode",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sset_buffer_major_mode"
        },
        {
            "args": [
                "flag"
            ],
            "attributes": null,
            "doc": "Mark current buffer as modified or unmodified according to FLAG.\nA non-nil FLAG means mark the buffer modified.\nIn addition, this function unconditionally forces redisplay of the\nmode lines of the windows that display the current buffer, and also\nlocks or unlocks the file visited by the buffer, depending on whether\nthe function's argument is non-nil, but only if both `buffer-file-name'\nand `buffer-file-truename' are non-nil.",
            "fnname": "Fset_buffer_modified_p",
            "intspec": "0",
            "lname": "set-buffer-modified-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sset_buffer_modified_p"
        },
        {
            "args": [
                "flag"
            ],
            "attributes": null,
            "doc": "Set the multibyte flag of the current buffer to FLAG.\nIf FLAG is t, this makes the buffer a multibyte buffer.\nIf FLAG is nil, this makes the buffer a single-byte buffer.\nIn these cases, the buffer contents remain unchanged as a sequence of\nbytes but the contents viewed as characters do change.\nIf FLAG is `to', this makes the buffer a multibyte buffer by changing\nall eight-bit bytes to eight-bit characters.\nIf the multibyte flag was really changed, undo information of the\ncurrent buffer is cleared.",
            "fnname": "Fset_buffer_multibyte",
            "intspec": "0",
            "lname": "set-buffer-multibyte",
            "maxargs": 1,
            "minargs": 1,
            "path": "buffer.c",
            "sname": "Sset_buffer_multibyte"
        },
        {
            "args": [
                "symbol",
                "newval",
                "op",
                "where"
            ],
            "attributes": null,
            "doc": "Mark the current buffer for redisplay.\nThis function may be passed to `add-variable-watcher'.",
            "fnname": "Fset_buffer_redisplay",
            "intspec": "0",
            "lname": "set-buffer-redisplay",
            "maxargs": 4,
            "minargs": 4,
            "path": "xdisp.c",
            "sname": "Sset_buffer_redisplay"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Select a new case table for the current buffer.\nA case table is a char-table which maps characters\nto their lower-case equivalents.  It also has three \\\"extra\\\" slots\nwhich may be additional char-tables or nil.\nThese slots are called UPCASE, CANONICALIZE and EQUIVALENCES.\nUPCASE maps each non-upper-case character to its upper-case equivalent.\n (The value in UPCASE for an upper-case character is never used.)\n If lower and upper case characters are in 1-1 correspondence,\n you may use nil and the upcase table will be deduced from DOWNCASE.\nCANONICALIZE maps each character to a canonical equivalent;\n any two characters that are related by case-conversion have the same\n canonical equivalent character; it may be nil, in which case it is\n deduced from DOWNCASE and UPCASE.\nEQUIVALENCES is a map that cyclically permutes each equivalence class\n (of characters with the same canonical equivalent); it may be nil,\n in which case it is deduced from CANONICALIZE.",
            "fnname": "Fset_case_table",
            "intspec": "0",
            "lname": "set-case-table",
            "maxargs": 1,
            "minargs": 1,
            "path": "casetab.c",
            "sname": "Sset_case_table"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Specify TABLE as the category table for the current buffer.\nReturn TABLE.",
            "fnname": "Fset_category_table",
            "intspec": "0",
            "lname": "set-category-table",
            "maxargs": 1,
            "minargs": 1,
            "path": "category.c",
            "sname": "Sset_category_table"
        },
        {
            "args": [
                "char_table",
                "n",
                "value"
            ],
            "attributes": null,
            "doc": "Set CHAR-TABLE's extra-slot number N to VALUE.",
            "fnname": "Fset_char_table_extra_slot",
            "intspec": "0",
            "lname": "set-char-table-extra-slot",
            "maxargs": 3,
            "minargs": 3,
            "path": "chartab.c",
            "sname": "Sset_char_table_extra_slot"
        },
        {
            "args": [
                "char_table",
                "parent"
            ],
            "attributes": null,
            "doc": "Set the parent char-table of CHAR-TABLE to PARENT.\nReturn PARENT.  PARENT must be either nil or another char-table.",
            "fnname": "Fset_char_table_parent",
            "intspec": "0",
            "lname": "set-char-table-parent",
            "maxargs": 2,
            "minargs": 2,
            "path": "chartab.c",
            "sname": "Sset_char_table_parent"
        },
        {
            "args": [
                "char_table",
                "range",
                "value"
            ],
            "attributes": null,
            "doc": "Set the value in CHAR-TABLE for a range of characters RANGE to VALUE.\nRANGE should be t (for all characters), nil (for the default value),\na cons of character codes (for characters in the range),\nor a character code.  Return VALUE.",
            "fnname": "Fset_char_table_range",
            "intspec": "0",
            "lname": "set-char-table-range",
            "maxargs": 3,
            "minargs": 3,
            "path": "chartab.c",
            "sname": "Sset_char_table_range"
        },
        {
            "args": [
                "charset",
                "plist"
            ],
            "attributes": null,
            "doc": "Set CHARSET's property list to PLIST.",
            "fnname": "Fset_charset_plist",
            "intspec": "0",
            "lname": "set-charset-plist",
            "maxargs": 2,
            "minargs": 2,
            "path": "charset.c",
            "sname": "Sset_charset_plist"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Assign higher priority to the charsets given as arguments.\nusage: (set-charset-priority &rest charsets)",
            "fnname": "Fset_charset_priority",
            "intspec": "0",
            "lname": "set-charset-priority",
            "maxargs": -1,
            "minargs": 1,
            "path": "charset.c",
            "sname": "Sset_charset_priority"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Assign higher priority to the coding systems given as arguments.\nIf multiple coding systems belong to the same category,\nall but the first one are ignored.\n\nusage: (set-coding-system-priority &rest coding-systems)",
            "fnname": "Fset_coding_system_priority",
            "intspec": "0",
            "lname": "set-coding-system-priority",
            "maxargs": -1,
            "minargs": 0,
            "path": "coding.c",
            "sname": "Sset_coding_system_priority"
        },
        {
            "args": [
                "size"
            ],
            "attributes": null,
            "doc": "Set cursor size.",
            "fnname": "Fset_cursor_size",
            "intspec": "0",
            "lname": "set-cursor-size",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32console.c",
            "sname": "Sset_cursor_size"
        },
        {
            "args": [
                "symbol",
                "value"
            ],
            "attributes": null,
            "doc": "Set SYMBOL's default value to VALUE.  SYMBOL and VALUE are evaluated.\nThe default value is seen in buffers that do not have their own values\nfor this variable.",
            "fnname": "Fset_default",
            "intspec": "0",
            "lname": "set-default",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Sset_default"
        },
        {
            "args": [
                "mode"
            ],
            "attributes": null,
            "doc": "Set the file permission bits for newly created files.\nThe argument MODE should be an integer; only the low 9 bits are used.\nOn Posix hosts, this setting is inherited by subprocesses.\n\nThis function works by setting the Emacs's file mode creation mask.\nEach bit that is set in the mask means that the corresponding bit\nin the permissions of newly created files will be disabled.\n\nNote that when `write-region' creates a file, it resets the\nexecute bit, even if the mask set by this function allows that bit\nby having the corresponding bit in the mask reset.\n\nSee also `with-file-modes'.",
            "fnname": "Fset_default_file_modes",
            "intspec": "0",
            "lname": "set-default-file-modes",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sset_default_file_modes"
        },
        {
            "args": [
                "symbol",
                "value"
            ],
            "attributes": null,
            "doc": "Set SYMBOL's toplevel default value to VALUE.\n\"Toplevel\" means outside of any let binding.",
            "fnname": "Fset_default_toplevel_value",
            "intspec": "0",
            "lname": "set-default-toplevel-value",
            "maxargs": 2,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Sset_default_toplevel_value"
        },
        {
            "args": [
                "filename",
                "acl_string"
            ],
            "attributes": null,
            "doc": "Set ACL of file named FILENAME to ACL-STRING.\nACL-STRING should contain the textual representation of the ACL\nentries in a format suitable for the platform.\n\nValue is t if setting of ACL was successful, nil otherwise.\n\nSetting ACL for local files requires Emacs to be built with ACL\nsupport.",
            "fnname": "Fset_file_acl",
            "intspec": "0",
            "lname": "set-file-acl",
            "maxargs": 2,
            "minargs": 2,
            "path": "fileio.c",
            "sname": "Sset_file_acl"
        },
        {
            "args": [
                "filename",
                "mode",
                "flag"
            ],
            "attributes": null,
            "doc": "Set mode bits of file named FILENAME to MODE (an integer).\nOnly the 12 low bits of MODE are used.  If optional FLAG is `nofollow',\ndo not follow FILENAME if it is a symbolic link.\n\nInteractively, prompt for FILENAME, and read MODE with\n`read-file-modes', which accepts symbolic notation, like the `chmod'\ncommand from GNU Coreutils.",
            "fnname": "Fset_file_modes",
            "intspec": "(let ((file (read-file-name \"File: \")))                       \\\n          (list file (read-file-modes nil file)))",
            "lname": "set-file-modes",
            "maxargs": 3,
            "minargs": 2,
            "path": "fileio.c",
            "sname": "Sset_file_modes"
        },
        {
            "args": [
                "filename",
                "context"
            ],
            "attributes": null,
            "doc": "Set SELinux context of file named FILENAME to CONTEXT.\nCONTEXT should be a list (USER ROLE TYPE RANGE), where the list\nelements are strings naming the components of a SELinux context.\n\nValue is t if setting of SELinux context was successful, nil otherwise.\n\nThis function does nothing and returns nil if SELinux is disabled,\nor if Emacs was not compiled with SELinux support.",
            "fnname": "Fset_file_selinux_context",
            "intspec": "0",
            "lname": "set-file-selinux-context",
            "maxargs": 2,
            "minargs": 2,
            "path": "fileio.c",
            "sname": "Sset_file_selinux_context"
        },
        {
            "args": [
                "filename",
                "timestamp",
                "flag"
            ],
            "attributes": null,
            "doc": "Set times of file FILENAME to TIMESTAMP.\nIf optional FLAG is `nofollow', do not follow FILENAME if it is a\nsymbolic link.  Set both access and modification times.  Return t on\nsuccess, else nil.  Use the current time if TIMESTAMP is nil.\nTIMESTAMP is in the format of `current-time'.",
            "fnname": "Fset_file_times",
            "intspec": "0",
            "lname": "set-file-times",
            "maxargs": 3,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sset_file_times"
        },
        {
            "args": [
                "fontset",
                "characters",
                "font_spec",
                "frame",
                "add"
            ],
            "attributes": null,
            "doc": "Modify FONTSET to use font specification in FONT-SPEC for displaying CHARACTERS.\n\nFONTSET should be a fontset name (a string); or nil, meaning the\nfontset of FRAME; or t, meaning the default fontset.\n\nCHARACTERS may be a single character to use FONT-SPEC for.\n\nCHARACTERS may be a cons (FROM . TO), where FROM and TO are characters.\nIn that case, use FONT-SPEC for all the characters in the range\nbetween FROM and TO (inclusive).\n\nCHARACTERS may be a script symbol.  In that case, use FONT-SPEC for\nall the characters that belong to the script.  See the variable\n`script-representative-chars' for the list of known scripts, and\nsee the variable `char-script-table' for the script of any specific\ncharacter.\n\nCHARACTERS may be a charset symbol.  In that case, use FONT-SPEC for\nall the characters in the charset.  See `list-character-sets' and\n`list-charset-chars' for the list of character sets and their\ncharacters.\n\nCHARACTERS may be nil.  In that case, use FONT-SPEC for any\ncharacter for which no font-spec is specified in FONTSET.\n\nFONT-SPEC may one of these:\n * A font-spec object made by the function `font-spec' (which see).\n * A cons (FAMILY . REGISTRY), where FAMILY is a font family name and\n   REGISTRY is a font registry name.  FAMILY may contain foundry\n   name, and REGISTRY may contain encoding name.\n * A font name string.\n * nil, which explicitly specifies that there's no font for CHARACTERS.\n\nOptional 4th argument FRAME is a frame whose fontset should be modified;\nit is used if FONTSET is nil.  If FONTSET is nil and FRAME is omitted\nor nil, that stands for the fontset of the selected frame.\n\nOptional 5th argument ADD, if non-nil, specifies how to add FONT-SPEC\nto the previously set font specifications for CHARACTERS.  If it is\n`prepend', FONT-SPEC is prepended to the existing font specifications.\nIf it is `append', FONT-SPEC is appended.  By default, FONT-SPEC\noverwrites the previous settings.",
            "fnname": "Fset_fontset_font",
            "intspec": "0",
            "lname": "set-fontset-font",
            "maxargs": 5,
            "minargs": 3,
            "path": "fontset.c",
            "sname": "Sset_fontset_font"
        },
        {
            "args": [
                "frame",
                "height",
                "pretend",
                "pixelwise"
            ],
            "attributes": null,
            "doc": "Set text height of frame FRAME to HEIGHT lines.\nOptional third arg PRETEND non-nil means that redisplay should use\nHEIGHT lines but that the idea of the actual height of the frame should\nnot be changed.\n\nOptional fourth argument PIXELWISE non-nil means that FRAME should be\nHEIGHT pixels high.  Note: When `frame-resize-pixelwise' is nil, some\nwindow managers may refuse to honor a HEIGHT that is not an integer\nmultiple of the default frame font height.\n\nWhen called interactively, HEIGHT is the numeric prefix and the\ncurrently selected frame will be set to this height.\n\nIf FRAME is nil, it defaults to the selected frame.",
            "fnname": "Fset_frame_height",
            "intspec": "(set-frame-property--interactive \"Frame height: \" (frame-height))",
            "lname": "set-frame-height",
            "maxargs": 4,
            "minargs": 2,
            "path": "frame.c",
            "sname": "Sset_frame_height"
        },
        {
            "args": [
                "frame",
                "x",
                "y"
            ],
            "attributes": null,
            "doc": "Set position of FRAME to (X, Y).\nFRAME must be a live frame and defaults to the selected one.  X and Y,\nif positive, specify the coordinate of the left and top edge of FRAME's\nouter frame in pixels relative to an origin (0, 0) of FRAME's display.\nIf any of X or Y is negative, it specifies the coordinates of the right\nor bottom edge of the outer frame of FRAME relative to the right or\nbottom edge of FRAME's display.",
            "fnname": "Fset_frame_position",
            "intspec": "0",
            "lname": "set-frame-position",
            "maxargs": 3,
            "minargs": 3,
            "path": "frame.c",
            "sname": "Sset_frame_position"
        },
        {
            "args": [
                "frame",
                "window",
                "norecord"
            ],
            "attributes": null,
            "doc": "Set selected window of FRAME to WINDOW.\nFRAME must be a live frame and defaults to the selected one.  If FRAME\nis the selected frame, this makes WINDOW the selected window.  Optional\nargument NORECORD non-nil means to neither change the order of recently\nselected windows nor the buffer list.  WINDOW must denote a live window.\nReturn WINDOW.",
            "fnname": "Fset_frame_selected_window",
            "intspec": "0",
            "lname": "set-frame-selected-window",
            "maxargs": 3,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_frame_selected_window"
        },
        {
            "args": [
                "frame",
                "width",
                "height",
                "pixelwise"
            ],
            "attributes": null,
            "doc": "Set text size of FRAME to WIDTH by HEIGHT, measured in characters.\nOptional argument PIXELWISE non-nil means to measure in pixels.  Note:\nWhen `frame-resize-pixelwise' is nil, some window managers may refuse to\nhonor a WIDTH that is not an integer multiple of the default frame font\nwidth or a HEIGHT that is not an integer multiple of the default frame\nfont height.\n\nIf FRAME is nil, it defaults to the selected frame.",
            "fnname": "Fset_frame_size",
            "intspec": "0",
            "lname": "set-frame-size",
            "maxargs": 4,
            "minargs": 3,
            "path": "frame.c",
            "sname": "Sset_frame_size"
        },
        {
            "args": [
                "frame",
                "width",
                "pretend",
                "pixelwise"
            ],
            "attributes": null,
            "doc": "Set text width of frame FRAME to WIDTH columns.\nOptional third arg PRETEND non-nil means that redisplay should use WIDTH\ncolumns but that the idea of the actual width of the frame should not\nbe changed.\n\nOptional fourth argument PIXELWISE non-nil means that FRAME should be\nWIDTH pixels wide.  Note: When `frame-resize-pixelwise' is nil, some\nwindow managers may refuse to honor a WIDTH that is not an integer\nmultiple of the default frame font width.\n\nWhen called interactively, WIDTH is the numeric prefix and the\ncurrently selected frame will be set to this width.\n\nIf FRAME is nil, it defaults to the selected frame.",
            "fnname": "Fset_frame_width",
            "intspec": "(set-frame-property--interactive \"Frame width: \" (frame-width))",
            "lname": "set-frame-width",
            "maxargs": 4,
            "minargs": 2,
            "path": "frame.c",
            "sname": "Sset_frame_width"
        },
        {
            "args": [
                "frame",
                "arg"
            ],
            "attributes": null,
            "doc": "Set FRAME's window state change flag according to ARG.\nSet FRAME's window state change flag if ARG is non-nil, reset it\notherwise.\n\nIf FRAME's window state change flag is set, the default values of\n`window-state-change-functions' and `window-state-change-hook' will be\nrun during next redisplay, regardless of whether a window state change\nactually occurred on FRAME or not.  After that, the value of FRAME's\nwindow state change flag is reset.",
            "fnname": "Fset_frame_window_state_change",
            "intspec": "0",
            "lname": "set-frame-window-state-change",
            "maxargs": 2,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Sset_frame_window_state_change"
        },
        {
            "args": [
                "bitmap",
                "face"
            ],
            "attributes": null,
            "doc": "Set face for fringe bitmap BITMAP to FACE.\nFACE is merged with the `fringe' face, so normally FACE should specify\nonly the foreground color.\nIf FACE is nil, reset face to default fringe face.",
            "fnname": "Fset_fringe_bitmap_face",
            "intspec": "0",
            "lname": "set-fringe-bitmap-face",
            "maxargs": 2,
            "minargs": 1,
            "path": "fringe.c",
            "sname": "Sset_fringe_bitmap_face"
        },
        {
            "args": [
                "interrupt"
            ],
            "attributes": null,
            "doc": "Set interrupt mode of reading keyboard input.\nIf INTERRUPT is non-nil, Emacs will use input interrupts;\notherwise Emacs uses CBREAK mode.\n\nSee also `current-input-mode'.",
            "fnname": "Fset_input_interrupt_mode",
            "intspec": "0",
            "lname": "set-input-interrupt-mode",
            "maxargs": 1,
            "minargs": 1,
            "path": "keyboard.c",
            "sname": "Sset_input_interrupt_mode"
        },
        {
            "args": [
                "meta",
                "terminal"
            ],
            "attributes": null,
            "doc": "Enable or disable 8-bit input on TERMINAL.\nIf META is t, Emacs will accept 8-bit input, and interpret the 8th\nbit as the Meta modifier before it decodes the characters.\n\nIf META is `encoded', Emacs will interpret the 8th bit of single-byte\ncharacters after decoding the characters.\n\nIf META is nil, Emacs will ignore the top bit, on the assumption it is\nparity.\n\nOtherwise, Emacs will accept and pass through 8-bit input without\nspecially interpreting the top bit.\n\nThis setting only has an effect on tty terminal devices.\n\nOptional parameter TERMINAL specifies the tty terminal device to use.\nIt may be a terminal object, a frame, or nil for the terminal used by\nthe currently selected frame.\n\nSee also `current-input-mode'.",
            "fnname": "Fset_input_meta_mode",
            "intspec": "0",
            "lname": "set-input-meta-mode",
            "maxargs": 2,
            "minargs": 1,
            "path": "keyboard.c",
            "sname": "Sset_input_meta_mode"
        },
        {
            "args": [
                "interrupt",
                "flow",
                "meta",
                "quit"
            ],
            "attributes": null,
            "doc": "Set mode of reading keyboard input.\nFirst arg INTERRUPT non-nil means use input interrupts;\n nil means use CBREAK mode.\nSecond arg FLOW non-nil means use ^S/^Q flow control for output to terminal\n (no effect except in CBREAK mode).\nThird arg META t means accept 8-bit input (for a Meta key).\n META nil means ignore the top bit, on the assumption it is parity.\n META `encoded' means accept 8-bit input and interpret Meta after\n   decoding the input characters.\n Otherwise, accept 8-bit input and don't use the top bit for Meta.\nOptional fourth arg QUIT if non-nil specifies character to use for quitting.\nSee also `current-input-mode'.",
            "fnname": "Fset_input_mode",
            "intspec": "0",
            "lname": "set-input-mode",
            "maxargs": 4,
            "minargs": 3,
            "path": "keyboard.c",
            "sname": "Sset_input_mode"
        },
        {
            "args": [
                "coding_system",
                "terminal"
            ],
            "attributes": null,
            "doc": "Internal use only.",
            "fnname": "Fset_keyboard_coding_system_internal",
            "intspec": "0",
            "lname": "set-keyboard-coding-system-internal",
            "maxargs": 2,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Sset_keyboard_coding_system_internal"
        },
        {
            "args": [
                "keymap",
                "parent"
            ],
            "attributes": null,
            "doc": "Modify KEYMAP to set its parent map to PARENT.\nReturn PARENT.  PARENT should be nil or another keymap.",
            "fnname": "Fset_keymap_parent",
            "intspec": "0",
            "lname": "set-keymap-parent",
            "maxargs": 2,
            "minargs": 2,
            "path": "keymap.c",
            "sname": "Sset_keymap_parent"
        },
        {
            "args": [
                "marker",
                "position",
                "buffer"
            ],
            "attributes": null,
            "doc": "Position MARKER before character number POSITION in BUFFER.\nIf BUFFER is omitted or nil, it defaults to the current buffer.  If\nPOSITION is nil, makes marker point nowhere so it no longer slows down\nediting in any buffer.  Returns MARKER.",
            "fnname": "Fset_marker",
            "intspec": "0",
            "lname": "set-marker",
            "maxargs": 3,
            "minargs": 2,
            "path": "marker.c",
            "sname": "Sset_marker"
        },
        {
            "args": [
                "marker",
                "type"
            ],
            "attributes": null,
            "doc": "Set the insertion-type of MARKER to TYPE.\nIf TYPE is t, it means the marker advances when you insert text at it.\nIf TYPE is nil, it means the marker stays behind when you insert text at it.",
            "fnname": "Fset_marker_insertion_type",
            "intspec": "0",
            "lname": "set-marker-insertion-type",
            "maxargs": 2,
            "minargs": 2,
            "path": "marker.c",
            "sname": "Sset_marker_insertion_type"
        },
        {
            "args": [
                "list",
                "reseat"
            ],
            "attributes": null,
            "doc": "Set internal data on last search match from elements of LIST.\nLIST should have been created by calling `match-data' previously.\n\nIf optional arg RESEAT is non-nil, make markers on LIST point nowhere.",
            "fnname": "Fset_match_data",
            "intspec": "0",
            "lname": "set-match-data",
            "maxargs": 2,
            "minargs": 1,
            "path": "search.c",
            "sname": "Sset_match_data"
        },
        {
            "args": [
                "sound"
            ],
            "attributes": null,
            "doc": "Set the sound generated when the bell is rung.\nSOUND is `asterisk', `exclamation', `hand', `question', `ok', or `silent'\nto use the corresponding system sound for the bell.  The `silent' sound\nprevents Emacs from making any sound at all.\nSOUND is nil to use the normal beep.",
            "fnname": "Fset_message_beep",
            "intspec": "0",
            "lname": "set-message-beep",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Sset_message_beep"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Specify which minibuffer window to use for the minibuffer.\nThis affects where the minibuffer is displayed if you put text in it\nwithout invoking the usual minibuffer commands.",
            "fnname": "Fset_minibuffer_window",
            "intspec": "0",
            "lname": "set-minibuffer-window",
            "maxargs": 1,
            "minargs": 1,
            "path": "minibuf.c",
            "sname": "Sset_minibuffer_window"
        },
        {
            "args": [
                "frame",
                "x",
                "y"
            ],
            "attributes": null,
            "doc": "Move the mouse pointer to pixel position (X,Y) in FRAME.\nThe position is given in pixels, where (0, 0) is the upper-left corner\nof the frame, X is the horizontal offset, and Y is the vertical offset.\n\nNote, this is a no-op for an X frame that is not visible.\nIf you have just created a frame, you must wait for it to become visible\nbefore calling this function on it, like this.\n  (while (not (frame-visible-p frame)) (sleep-for .5))",
            "fnname": "Fset_mouse_pixel_position",
            "intspec": "0",
            "lname": "set-mouse-pixel-position",
            "maxargs": 3,
            "minargs": 3,
            "path": "frame.c",
            "sname": "Sset_mouse_pixel_position"
        },
        {
            "args": [
                "frame",
                "x",
                "y"
            ],
            "attributes": null,
            "doc": "Move the mouse pointer to the center of character cell (X,Y) in FRAME.\nCoordinates are relative to the frame, not a window,\nso the coordinates of the top left character in the frame\nmay be nonzero due to left-hand scroll bars or the menu bar.\n\nThe position is given in canonical character cells, where (0, 0) is\nthe upper-left corner of the frame, X is the horizontal offset, and\nY is the vertical offset, measured in units of the frame's default\ncharacter size.\n\nThis function is a no-op for an X frame that is not visible.\nIf you have just created a frame, you must wait for it to become visible\nbefore calling this function on it, like this.\n  (while (not (frame-visible-p frame)) (sleep-for .5))",
            "fnname": "Fset_mouse_position",
            "intspec": "0",
            "lname": "set-mouse-position",
            "maxargs": 3,
            "minargs": 3,
            "path": "frame.c",
            "sname": "Sset_mouse_position"
        },
        {
            "args": [
                "process",
                "option",
                "value",
                "no_error"
            ],
            "attributes": null,
            "doc": "For network process PROCESS set option OPTION to value VALUE.\nSee `make-network-process' for a list of options and values.\nIf optional fourth arg NO-ERROR is non-nil, don't signal an error if\nOPTION is not a supported option, return nil instead; otherwise return t.\n\nIf PROCESS is a non-blocking network process that hasn't been fully\nset up yet, this function will block until socket setup has completed.",
            "fnname": "Fset_network_process_option",
            "intspec": "0",
            "lname": "set-network-process-option",
            "maxargs": 4,
            "minargs": 3,
            "path": "process.c",
            "sname": "Sset_network_process_option"
        },
        {
            "args": [
                "flow",
                "terminal"
            ],
            "attributes": null,
            "doc": "Enable or disable ^S/^Q flow control for output to TERMINAL.\nIf FLOW is non-nil, flow control is enabled and you cannot use C-s or\nC-q in key sequences.\n\nThis setting only has an effect on tty terminals and only when\nEmacs reads input in CBREAK mode; see `set-input-interrupt-mode'.\n\nSee also `current-input-mode'.",
            "fnname": "Fset_output_flow_control",
            "intspec": "0",
            "lname": "set-output-flow-control",
            "maxargs": 2,
            "minargs": 1,
            "path": "keyboard.c",
            "sname": "Sset_output_flow_control"
        },
        {
            "args": [
                "process",
                "buffer"
            ],
            "attributes": null,
            "doc": "Set buffer associated with PROCESS to BUFFER (a buffer, or nil).\nReturn BUFFER.",
            "fnname": "Fset_process_buffer",
            "intspec": "0",
            "lname": "set-process-buffer",
            "maxargs": 2,
            "minargs": 2,
            "path": "process.c",
            "sname": "Sset_process_buffer"
        },
        {
            "args": [
                "process",
                "decoding",
                "encoding"
            ],
            "attributes": null,
            "doc": "Set coding systems of PROCESS to DECODING and ENCODING.\nDECODING will be used to decode subprocess output and ENCODING to\nencode subprocess input.",
            "fnname": "Fset_process_coding_system",
            "intspec": "0",
            "lname": "set-process-coding-system",
            "maxargs": 3,
            "minargs": 1,
            "path": "process.c",
            "sname": "Sset_process_coding_system"
        },
        {
            "args": [
                "process",
                "address"
            ],
            "attributes": null,
            "doc": "Set the datagram address for PROCESS to ADDRESS.\nReturn nil upon error setting address, ADDRESS otherwise.\n\nIf PROCESS is a non-blocking network process that hasn't been fully\nset up yet, this function will block until socket setup has completed.",
            "fnname": "Fset_process_datagram_address",
            "intspec": "0",
            "lname": "set-process-datagram-address",
            "maxargs": 2,
            "minargs": 2,
            "path": "process.c",
            "sname": "Sset_process_datagram_address"
        },
        {
            "args": [
                "process",
                "filter"
            ],
            "attributes": null,
            "doc": "Give PROCESS the filter function FILTER; nil means default.\nA value of t means stop accepting output from the process.\n\nWhen a process has a non-default filter, its buffer is not used for output.\nInstead, each time it does output, the entire string of output is\npassed to the filter.\n\nThe filter gets two arguments: the process and the string of output.\nThe string argument is normally a multibyte string, except:\n- if the process's input coding system is no-conversion or raw-text,\n  it is a unibyte string (the non-converted input).",
            "fnname": "Fset_process_filter",
            "intspec": "0",
            "lname": "set-process-filter",
            "maxargs": 2,
            "minargs": 2,
            "path": "process.c",
            "sname": "Sset_process_filter"
        },
        {
            "args": [
                "process",
                "flag"
            ],
            "attributes": null,
            "doc": "Determine whether buffer of PROCESS will inherit coding-system.\nIf the second argument FLAG is non-nil, then the variable\n`buffer-file-coding-system' of the buffer associated with PROCESS\nwill be bound to the value of the coding system used to decode\nthe process output.\n\nThis is useful when the coding system specified for the process buffer\nleaves either the character code conversion or the end-of-line conversion\nunspecified, or if the coding system used to decode the process output\nis more appropriate for saving the process buffer.\n\nBinding the variable `inherit-process-coding-system' to non-nil before\nstarting the process is an alternative way of setting the inherit flag\nfor the process which will run.\n\nThis function returns FLAG.",
            "fnname": "Fset_process_inherit_coding_system_flag",
            "intspec": "0",
            "lname": "set-process-inherit-coding-system-flag",
            "maxargs": 2,
            "minargs": 2,
            "path": "process.c",
            "sname": "Sset_process_inherit_coding_system_flag"
        },
        {
            "args": [
                "process",
                "plist"
            ],
            "attributes": null,
            "doc": "Replace the plist of PROCESS with PLIST.  Return PLIST.",
            "fnname": "Fset_process_plist",
            "intspec": "0",
            "lname": "set-process-plist",
            "maxargs": 2,
            "minargs": 2,
            "path": "process.c",
            "sname": "Sset_process_plist"
        },
        {
            "args": [
                "process",
                "flag"
            ],
            "attributes": null,
            "doc": "Specify if query is needed for PROCESS when Emacs is exited.\nIf the second argument FLAG is non-nil, Emacs will query the user before\nexiting or killing a buffer if PROCESS is running.  This function\nreturns FLAG.",
            "fnname": "Fset_process_query_on_exit_flag",
            "intspec": "0",
            "lname": "set-process-query-on-exit-flag",
            "maxargs": 2,
            "minargs": 2,
            "path": "process.c",
            "sname": "Sset_process_query_on_exit_flag"
        },
        {
            "args": [
                "process",
                "sentinel"
            ],
            "attributes": null,
            "doc": "Give PROCESS the sentinel SENTINEL; nil for default.\nThe sentinel is called as a function when the process changes state.\nIt gets two arguments: the process, and a string describing the change.",
            "fnname": "Fset_process_sentinel",
            "intspec": "0",
            "lname": "set-process-sentinel",
            "maxargs": 2,
            "minargs": 2,
            "path": "process.c",
            "sname": "Sset_process_sentinel"
        },
        {
            "args": [
                "process",
                "thread"
            ],
            "attributes": null,
            "doc": "Set the locking thread of PROCESS to be THREAD.\nIf THREAD is nil, the process is unlocked.",
            "fnname": "Fset_process_thread",
            "intspec": "0",
            "lname": "set-process-thread",
            "maxargs": 2,
            "minargs": 2,
            "path": "process.c",
            "sname": "Sset_process_thread"
        },
        {
            "args": [
                "process",
                "height",
                "width"
            ],
            "attributes": null,
            "doc": "Tell PROCESS that it has logical window size WIDTH by HEIGHT.\nValue is t if PROCESS was successfully told about the window size,\nnil otherwise.",
            "fnname": "Fset_process_window_size",
            "intspec": "0",
            "lname": "set-process-window-size",
            "maxargs": 3,
            "minargs": 3,
            "path": "process.c",
            "sname": "Sset_process_window_size"
        },
        {
            "args": [
                "quit"
            ],
            "attributes": null,
            "doc": "Specify character used for quitting.\nQUIT must be an ASCII character.\n\nThis function only has an effect on the controlling tty of the Emacs\nprocess.\n\nSee also `current-input-mode'.",
            "fnname": "Fset_quit_char",
            "intspec": "0",
            "lname": "set-quit-char",
            "maxargs": 1,
            "minargs": 1,
            "path": "keyboard.c",
            "sname": "Sset_quit_char"
        },
        {
            "args": [
                "coding_system"
            ],
            "attributes": null,
            "doc": "Internal use only.",
            "fnname": "Fset_safe_terminal_coding_system_internal",
            "intspec": "0",
            "lname": "set-safe-terminal-coding-system-internal",
            "maxargs": 1,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Sset_safe_terminal_coding_system_internal"
        },
        {
            "args": [
                "foreground",
                "background"
            ],
            "attributes": null,
            "doc": "Set screen foreground and background colors.\n\nArguments should be indices between 0 and 15, see w32console.el.",
            "fnname": "Fset_screen_color",
            "intspec": "0",
            "lname": "set-screen-color",
            "maxargs": 2,
            "minargs": 2,
            "path": "w32console.c",
            "sname": "Sset_screen_color"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Select a new standard case table for new buffers.\nSee `set-case-table' for more info on case tables.",
            "fnname": "Fset_standard_case_table",
            "intspec": "0",
            "lname": "set-standard-case-table",
            "maxargs": 1,
            "minargs": 1,
            "path": "casetab.c",
            "sname": "Sset_standard_case_table"
        },
        {
            "args": [
                "table"
            ],
            "attributes": null,
            "doc": "Select a new syntax table for the current buffer.\nOne argument, a syntax table.",
            "fnname": "Fset_syntax_table",
            "intspec": "0",
            "lname": "set-syntax-table",
            "maxargs": 1,
            "minargs": 1,
            "path": "syntax.c",
            "sname": "Sset_syntax_table"
        },
        {
            "args": [
                "coding_system",
                "terminal"
            ],
            "attributes": null,
            "doc": "Internal use only.",
            "fnname": "Fset_terminal_coding_system_internal",
            "intspec": "0",
            "lname": "set-terminal-coding-system-internal",
            "maxargs": 2,
            "minargs": 1,
            "path": "coding.c",
            "sname": "Sset_terminal_coding_system_internal"
        },
        {
            "args": [
                "terminal",
                "parameter",
                "value"
            ],
            "attributes": null,
            "doc": "Set TERMINAL's value for parameter PARAMETER to VALUE.\nReturn the previous value of PARAMETER.\n\nTERMINAL can be a terminal object, a frame or nil (meaning the\nselected frame's terminal).",
            "fnname": "Fset_terminal_parameter",
            "intspec": "0",
            "lname": "set-terminal-parameter",
            "maxargs": 3,
            "minargs": 3,
            "path": "terminal.c",
            "sname": "Sset_terminal_parameter"
        },
        {
            "args": [
                "value",
                "after_key_sequence"
            ],
            "attributes": null,
            "doc": "Set the current buffer's text conversion style to VALUE.\n\nAfter setting `text-conversion-style', force input methods\nediting in a selected window displaying this buffer on any frame\nto stop themselves.\n\nThis can lead to a significant amount of time being taken by the input\nmethod resetting itself, so you should not use this function lightly;\ninstead, set `text-conversion-style' before your buffer is displayed,\nand let redisplay manage the input method appropriately.\n\nIf a key sequence is currently being read (either through the command\nloop or by a call to `read-key-sequence') and AFTER-KEY-SEQUENCE is\nnon-nil, don't perform changes to the input method until the key\nsequence is read.  This is useful within a function bound to\n`input-decode-map' or `local-function-key-map', as it prevents the\ninput method from being redundantly enabled according to VALUE if the\nreplacement key sequence returned starts a new key sequence and makes\n`read-key-sequence' disable text conversion again.",
            "fnname": "Fset_text_conversion_style",
            "intspec": "0",
            "lname": "set-text-conversion-style",
            "maxargs": 2,
            "minargs": 1,
            "path": "textconv.c",
            "sname": "Sset_text_conversion_style"
        },
        {
            "args": [
                "start",
                "end",
                "properties",
                "object"
            ],
            "attributes": null,
            "doc": "Completely replace properties of text from START to END.\nThe third argument PROPERTIES is the new property list.\nIf the optional fourth argument OBJECT is a buffer (or nil, which means\nthe current buffer), START and END are buffer positions (integers or\nmarkers).  If OBJECT is a string, START and END are 0-based indices into it.\nIf PROPERTIES is nil, the effect is to remove all properties from\nthe designated part of OBJECT.",
            "fnname": "Fset_text_properties",
            "intspec": "0",
            "lname": "set-text-properties",
            "maxargs": 4,
            "minargs": 3,
            "path": "textprop.c",
            "sname": "Sset_text_properties"
        },
        {
            "args": [
                "tz"
            ],
            "attributes": null,
            "doc": "Set the Emacs local time zone using TZ, a string specifying a time zone rule.\nIf TZ is nil or `wall', use system wall clock time; this differs from\nthe usual Emacs convention where nil means current local time.  If TZ\nis t, use Universal Time.  If TZ is a list (as from\n`current-time-zone') or an integer (as from `decode-time'), use the\nspecified time zone without consideration for daylight saving time.\n\nInstead of calling this function, you typically want something else.\nTo temporarily use a different time zone rule for just one invocation\nof `decode-time', `encode-time', or `format-time-string', pass the\nfunction a ZONE argument.  To change local time consistently\nthroughout Emacs, call (setenv \"TZ\" TZ): this changes both the\nenvironment of the Emacs process and the variable\n`process-environment', whereas `set-time-zone-rule' affects only the\nformer.",
            "fnname": "Fset_time_zone_rule",
            "intspec": "0",
            "lname": "set-time-zone-rule",
            "maxargs": 1,
            "minargs": 1,
            "path": "timefns.c",
            "sname": "Sset_time_zone_rule"
        },
        {
            "args": [
                "time_flag"
            ],
            "attributes": null,
            "doc": "Update buffer's recorded modification time from the visited file's time.\nUseful if the buffer was not read from the file normally\nor if the file itself has been changed for some known benign reason.\nAn argument specifies the modification time value to use\n\\(instead of that of the visited file), in the form of a time value as\nin `current-time' or an integer flag as returned by `visited-file-modtime'.",
            "fnname": "Fset_visited_file_modtime",
            "intspec": "0",
            "lname": "set-visited-file-modtime",
            "maxargs": 1,
            "minargs": 0,
            "path": "fileio.c",
            "sname": "Sset_visited_file_modtime"
        },
        {
            "args": [
                "window",
                "buffer_or_name",
                "keep_margins"
            ],
            "attributes": null,
            "doc": "Make WINDOW display BUFFER-OR-NAME.\nWINDOW must be a live window and defaults to the selected one.\nBUFFER-OR-NAME must be a buffer or the name of an existing buffer.\n\nOptional third argument KEEP-MARGINS non-nil means that WINDOW's current\ndisplay margins, fringe widths, and scroll bar settings are preserved;\nthe default is to reset these from the local settings for BUFFER-OR-NAME\nor the frame defaults.  Return nil.\n\nThis function throws an error when WINDOW is strongly dedicated to its\nbuffer (that is `window-dedicated-p' returns t for WINDOW) and does not\nalready display BUFFER-OR-NAME.\n\nThis function runs `window-scroll-functions' before running\n`window-configuration-change-hook'.",
            "fnname": "Fset_window_buffer",
            "intspec": "0",
            "lname": "set-window-buffer",
            "maxargs": 3,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_buffer"
        },
        {
            "args": [
                "window",
                "limit"
            ],
            "attributes": null,
            "doc": "Set combination limit of window WINDOW to LIMIT; return LIMIT.\nWINDOW must be a valid window used in horizontal or vertical combination.\nIf LIMIT is nil, child windows of WINDOW can be recombined with WINDOW's\nsiblings.  LIMIT t means that child windows of WINDOW are never\n\\(re-)combined with WINDOW's siblings.  Other values are reserved for\nfuture use.",
            "fnname": "Fset_window_combination_limit",
            "intspec": "0",
            "lname": "set-window-combination-limit",
            "maxargs": 2,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_combination_limit"
        },
        {
            "args": [
                "configuration",
                "dont_set_frame",
                "dont_set_miniwindow"
            ],
            "attributes": null,
            "doc": "Set the configuration of windows and buffers as specified by CONFIGURATION.\nCONFIGURATION must be a value previously returned\nby `current-window-configuration' (which see).\n\nNormally, this function selects the frame of the CONFIGURATION, but if\nDONT-SET-FRAME is non-nil, it leaves selected the frame which was\ncurrent at the start of the function.  If DONT-SET-MINIWINDOW is non-nil,\nthe mini-window of the frame doesn't get set to the corresponding element\nof CONFIGURATION.\n\nIf CONFIGURATION was made from a frame that is now deleted,\nonly frame-independent values can be restored.  In this case,\nthe return value is nil.  Otherwise the value is t.",
            "fnname": "Fset_window_configuration",
            "intspec": "0",
            "lname": "set-window-configuration",
            "maxargs": 3,
            "minargs": 1,
            "path": "window.c",
            "sname": "Sset_window_configuration"
        },
        {
            "args": [
                "window",
                "flag"
            ],
            "attributes": null,
            "doc": "Mark WINDOW as dedicated according to FLAG.\nWINDOW must be a live window and defaults to the selected one.  FLAG\nnon-nil means mark WINDOW as dedicated to its buffer.  FLAG nil means\nmark WINDOW as non-dedicated.  Return FLAG.\n\nWhen a window is dedicated to its buffer, `display-buffer' will refrain\nfrom displaying another buffer in it.  `get-lru-window' and\n`get-largest-window' treat dedicated windows specially.\n`delete-windows-on', `replace-buffer-in-windows', `quit-window',\n`quit-restore-window' and `kill-buffer' can delete a dedicated window\nand the containing frame.\n\nAs a special case, if FLAG is t, mark WINDOW as \"strongly\" dedicated to\nits buffer.  Functions like `set-window-buffer' may change the buffer\ndisplayed by a window, unless that window is strongly dedicated to its\nbuffer.  If and when `set-window-buffer' displays another buffer in a\nwindow, it also makes sure that the window is no more dedicated.",
            "fnname": "Fset_window_dedicated_p",
            "intspec": "0",
            "lname": "set-window-dedicated-p",
            "maxargs": 2,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_dedicated_p"
        },
        {
            "args": [
                "window",
                "table"
            ],
            "attributes": null,
            "doc": "Set WINDOW's display-table to TABLE.\nWINDOW must be a live window and defaults to the selected one.",
            "fnname": "Fset_window_display_table",
            "intspec": "0",
            "lname": "set-window-display-table",
            "maxargs": 2,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_display_table"
        },
        {
            "args": [
                "window",
                "left_width",
                "right_width",
                "outside_margins",
                "persistent"
            ],
            "attributes": null,
            "doc": "Set fringes of specified WINDOW.\nWINDOW must specify a live window and defaults to the selected one.\n\nSecond arg LEFT-WIDTH specifies the number of pixels to reserve for\nthe left fringe.  Optional third arg RIGHT-WIDTH specifies the right\nfringe width.  If a fringe width arg is nil, that means to use the\nframe's default fringe width.  Default fringe widths can be set with\nthe command `set-fringe-style'.\n\nIf optional fourth arg OUTSIDE-MARGINS is non-nil, draw the fringes\noutside of the display margins.  By default, fringes are drawn between\ndisplay marginal areas and the text area.\n\nOptional fifth argument PERSISTENT non-nil means that fringe settings\nfor WINDOW are persistent, i.e., remain unchanged when another buffer\nis shown in WINDOW.  PERSISTENT nil means that fringes are reset from\nbuffer local values when `set-window-buffer' is called on WINDOW with\nthe argument KEEP-MARGINS nil.\n\nLeave fringes unchanged if WINDOW is not large enough to accommodate\nfringes of the desired width.  Return t if any fringe was actually\nchanged and nil otherwise.",
            "fnname": "Fset_window_fringes",
            "intspec": "0",
            "lname": "set-window-fringes",
            "maxargs": 5,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_fringes"
        },
        {
            "args": [
                "window",
                "ncol"
            ],
            "attributes": null,
            "doc": "Set number of columns WINDOW is scrolled from left margin to NCOL.\nWINDOW must be a live window and defaults to the selected one.\nClip the number to a reasonable value if out of range.\nReturn the new number.  NCOL should be zero or positive.\n\nNote that if `auto-hscroll-mode' is non-nil, you cannot scroll the\nwindow so that the location of point moves off-window.",
            "fnname": "Fset_window_hscroll",
            "intspec": "0",
            "lname": "set-window-hscroll",
            "maxargs": 2,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_hscroll"
        },
        {
            "args": [
                "window",
                "left_width",
                "right_width"
            ],
            "attributes": null,
            "doc": "Set width of marginal areas of window WINDOW.\nWINDOW must be a live window and defaults to the selected one.\n\nSecond arg LEFT-WIDTH specifies the number of character cells to\nreserve for the left marginal area.  Optional third arg RIGHT-WIDTH\ndoes the same for the right marginal area.  A nil width parameter\nmeans no margin.\n\nLeave margins unchanged if WINDOW is not large enough to accommodate\nmargins of the desired width.  Return t if any margin was actually\nchanged and nil otherwise.",
            "fnname": "Fset_window_margins",
            "intspec": "0",
            "lname": "set-window-margins",
            "maxargs": 3,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_margins"
        },
        {
            "args": [
                "window",
                "size"
            ],
            "attributes": null,
            "doc": "Set new normal size of WINDOW to SIZE.\nWINDOW must be a valid window and defaults to the selected one.\nReturn SIZE.\n\nThe new normal size of WINDOW, if valid, will be shortly installed as\nWINDOW's normal size (see `window-normal-size').\n\nNote: This function does not operate on any child windows of WINDOW.",
            "fnname": "Fset_window_new_normal",
            "intspec": "0",
            "lname": "set-window-new-normal",
            "maxargs": 2,
            "minargs": 1,
            "path": "window.c",
            "sname": "Sset_window_new_normal"
        },
        {
            "args": [
                "window",
                "size",
                "add"
            ],
            "attributes": null,
            "doc": "Set new pixel size of WINDOW to SIZE.\nWINDOW must be a valid window and defaults to the selected one.\nReturn SIZE.\n\nOptional argument ADD non-nil means add SIZE to the new pixel size of\nWINDOW and return the sum.\n\nThe new pixel size of WINDOW, if valid, will be shortly installed as\nWINDOW's pixel height (see `window-pixel-height') or pixel width (see\n`window-pixel-width').\n\nNote: This function does not operate on any child windows of WINDOW.",
            "fnname": "Fset_window_new_pixel",
            "intspec": "0",
            "lname": "set-window-new-pixel",
            "maxargs": 3,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_new_pixel"
        },
        {
            "args": [
                "window",
                "size",
                "add"
            ],
            "attributes": null,
            "doc": "Set new total size of WINDOW to SIZE.\nWINDOW must be a valid window and defaults to the selected one.\nReturn SIZE.\n\nOptional argument ADD non-nil means add SIZE to the new total size of\nWINDOW and return the sum.\n\nThe new total size of WINDOW, if valid, will be shortly installed as\nWINDOW's total height (see `window-total-height') or total width (see\n`window-total-width').\n\nNote: This function does not operate on any child windows of WINDOW.",
            "fnname": "Fset_window_new_total",
            "intspec": "0",
            "lname": "set-window-new-total",
            "maxargs": 3,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_new_total"
        },
        {
            "args": [
                "window",
                "next_buffers"
            ],
            "attributes": null,
            "doc": "Set WINDOW's next buffers to NEXT-BUFFERS.\nWINDOW must be a live window and defaults to the selected one.\nNEXT-BUFFERS should be a list of buffers.",
            "fnname": "Fset_window_next_buffers",
            "intspec": "0",
            "lname": "set-window-next-buffers",
            "maxargs": 2,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_next_buffers"
        },
        {
            "args": [
                "window",
                "parameter",
                "value"
            ],
            "attributes": null,
            "doc": "Set WINDOW's value of PARAMETER to VALUE.\nWINDOW can be any window and defaults to the selected one.\nReturn VALUE.",
            "fnname": "Fset_window_parameter",
            "intspec": "0",
            "lname": "set-window-parameter",
            "maxargs": 3,
            "minargs": 3,
            "path": "window.c",
            "sname": "Sset_window_parameter"
        },
        {
            "args": [
                "window",
                "pos"
            ],
            "attributes": null,
            "doc": "Make point value in WINDOW be at position POS in WINDOW's buffer.\nWINDOW must be a live window and defaults to the selected one.\nReturn POS.",
            "fnname": "Fset_window_point",
            "intspec": "0",
            "lname": "set-window-point",
            "maxargs": 2,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_point"
        },
        {
            "args": [
                "window",
                "prev_buffers"
            ],
            "attributes": null,
            "doc": "Set WINDOW's previous buffers to PREV-BUFFERS.\nWINDOW must be a live window and defaults to the selected one.\n\nPREV-BUFFERS should be a list of elements (BUFFER WINDOW-START POS),\nwhere BUFFER is a buffer, WINDOW-START is the start position of the\nwindow for that buffer, and POS is a window-specific point value.",
            "fnname": "Fset_window_prev_buffers",
            "intspec": "0",
            "lname": "set-window-prev-buffers",
            "maxargs": 2,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_prev_buffers"
        },
        {
            "args": [
                "window",
                "width",
                "vertical_type",
                "height",
                "horizontal_type",
                "persistent"
            ],
            "attributes": null,
            "doc": "Set width and type of scroll bars of specified WINDOW.\nWINDOW must specify a live window and defaults to the selected one.\n\nSecond argument WIDTH specifies the pixel width for the vertical scroll\nbar.  If WIDTH is nil, use the scroll bar width of WINDOW's frame.\nThird argument VERTICAL-TYPE specifies the type of the vertical scroll\nbar: left, right, nil or t where nil means to not display a vertical\nscroll bar on WINDOW and t means to use WINDOW frame's vertical scroll\nbar type.\n\nFourth argument HEIGHT specifies the pixel height for the horizontal\nscroll bar.  If HEIGHT is nil, use the scroll bar height of WINDOW's\nframe.  Fifth argument HORIZONTAL-TYPE specifies the type of the\nhorizontal scroll bar: bottom, nil, or t where nil means to not\ndisplay a horizontal scroll bar on WINDOW and t means to use WINDOW\nframe's horizontal scroll bar type.  If WINDOW is a mini window, t\neffectively behaves like nil.  HORIZONTAL-TYPE must equal bottom in\norder to show a scroll bar for mini windows.\n\nOptional sixth argument PERSISTENT non-nil means that scroll bar\nsettings for WINDOW are persistent, i.e., remain unchanged when\nanother buffer is shown in WINDOW.  PERSISTENT nil means that scroll\nbars are reset from buffer local values when `set-window-buffer' is\ncalled on WINDOW with the argument KEEP-MARGINS nil.\n\nIf WINDOW is not large enough to accommodate a scroll bar of the\ndesired dimension, leave the corresponding scroll bar unchanged.\nReturn t if scroll bars were actually changed and nil otherwise.",
            "fnname": "Fset_window_scroll_bars",
            "intspec": "0",
            "lname": "set-window-scroll-bars",
            "maxargs": 6,
            "minargs": 1,
            "path": "window.c",
            "sname": "Sset_window_scroll_bars"
        },
        {
            "args": [
                "window",
                "pos",
                "noforce"
            ],
            "attributes": null,
            "doc": "Make display in WINDOW start at position POS in WINDOW's buffer.\nWINDOW must be a live window and defaults to the selected one.  Return\nPOS.\n\nOptional third arg NOFORCE non-nil prevents next redisplay from\nmoving point if displaying the window at POS makes point invisible;\nredisplay will then choose the WINDOW's start position by itself in\nthat case, i.e. it will disregard POS if adhering to it will make\npoint not visible in the window.\n\nFor reliable setting of WINDOW start position, make sure point is\nat a position that will be visible when that start is in effect,\notherwise there's a chance POS will be disregarded, e.g., if point\nwinds up in a partially-visible line.\n\nThe setting of the WINDOW's start position takes effect during the\nnext redisplay cycle, not immediately.  If NOFORCE is nil or\nomitted, forcing the display of WINDOW to start at POS cancels\nany setting of WINDOW's vertical scroll (\\\"vscroll\\\") amount\nset by `set-window-vscroll' and by scrolling functions.",
            "fnname": "Fset_window_start",
            "intspec": "0",
            "lname": "set-window-start",
            "maxargs": 3,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_start"
        },
        {
            "args": [
                "window",
                "vscroll",
                "pixels_p",
                "preserve_vscroll_p"
            ],
            "attributes": null,
            "doc": "Set amount by which WINDOW should be scrolled vertically to VSCROLL.\nThis takes effect when displaying tall lines or images.\n\nWINDOW nil means use the selected window.  Normally, VSCROLL is a\nnon-negative multiple of the canonical character height of WINDOW;\noptional third arg PIXELS-P non-nil means that VSCROLL is in pixels.\nIf PIXELS-P is nil, VSCROLL may have to be rounded so that it\ncorresponds to an integral number of pixels.  The return value is the\nresult of this rounding.\nIf PIXELS-P is non-nil, the return value is VSCROLL.\n\nPRESERVE-VSCROLL-P makes setting the start of WINDOW preserve the\nvscroll if its start is \"frozen\" due to a resized mini-window.",
            "fnname": "Fset_window_vscroll",
            "intspec": "0",
            "lname": "set-window-vscroll",
            "maxargs": 4,
            "minargs": 2,
            "path": "window.c",
            "sname": "Sset_window_vscroll"
        },
        {
            "args": [
                "xwidget",
                "buffer"
            ],
            "attributes": null,
            "doc": "Set XWIDGET's buffer to BUFFER.",
            "fnname": "Fset_xwidget_buffer",
            "intspec": "0",
            "lname": "set-xwidget-buffer",
            "maxargs": 2,
            "minargs": 2,
            "path": "xwidget.c",
            "sname": "Sset_xwidget_buffer"
        },
        {
            "args": [
                "xwidget",
                "plist"
            ],
            "attributes": null,
            "doc": "Replace the plist of XWIDGET with PLIST.\nReturns PLIST.",
            "fnname": "Fset_xwidget_plist",
            "intspec": "0",
            "lname": "set-xwidget-plist",
            "maxargs": 2,
            "minargs": 2,
            "path": "xwidget.c",
            "sname": "Sset_xwidget_plist"
        },
        {
            "args": [
                "xwidget",
                "flag"
            ],
            "attributes": null,
            "doc": "Specify if query is needed for XWIDGET when Emacs is exited.\nIf the second argument FLAG is non-nil, Emacs will query the user before\nexiting or killing a buffer if XWIDGET is running.\nThis function returns FLAG.",
            "fnname": "Fset_xwidget_query_on_exit_flag",
            "intspec": "0",
            "lname": "set-xwidget-query-on-exit-flag",
            "maxargs": 2,
            "minargs": 2,
            "path": "xwidget.c",
            "sname": "Sset_xwidget_query_on_exit_flag"
        },
        {
            "args": [
                "cell",
                "newcar"
            ],
            "attributes": null,
            "doc": "Set the car of CELL to be NEWCAR.  Returns NEWCAR.",
            "fnname": "Fsetcar",
            "intspec": "0",
            "lname": "setcar",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Ssetcar"
        },
        {
            "args": [
                "cell",
                "newcdr"
            ],
            "attributes": null,
            "doc": "Set the cdr of CELL to be NEWCDR.  Returns NEWCDR.",
            "fnname": "Fsetcdr",
            "intspec": "0",
            "lname": "setcdr",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Ssetcdr"
        },
        {
            "args": [
                "symbol",
                "newplist"
            ],
            "attributes": null,
            "doc": "Set SYMBOL's property list to NEWPLIST, and return NEWPLIST.",
            "fnname": "Fsetplist",
            "intspec": "0",
            "lname": "setplist",
            "maxargs": 2,
            "minargs": 2,
            "path": "data.c",
            "sname": "Ssetplist"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Set each SYM to the value of its VAL.\nThe symbols SYM are variables; they are literal (not evaluated).\nThe values VAL are expressions; they are evaluated.\nThus, (setq x (1+ y)) sets `x' to the value of `(1+ y)'.\nThe second VAL is not computed until after the first SYM is set, and so on;\neach VAL can use the new value of variables set earlier in the `setq'.\nThe return value of the `setq' form is the value of the last VAL.\nusage: (setq [SYM VAL]...)",
            "fnname": "Fsetq",
            "intspec": "0",
            "lname": "setq",
            "maxargs": -2,
            "minargs": 0,
            "path": "eval.c",
            "sname": "Ssetq"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "",
            "fnname": "Fshow_face_resources",
            "intspec": "0",
            "lname": "show-face-resources",
            "maxargs": 0,
            "minargs": 0,
            "path": "xfaces.c",
            "sname": "Sshow_face_resources"
        },
        {
            "args": [
                "error_symbol",
                "data"
            ],
            "attributes": "noreturn",
            "doc": "Signal an error.  Args are ERROR-SYMBOL and associated DATA.\nThis function does not return.\n\nAn error symbol is a symbol with an `error-conditions' property\nthat is a list of condition names.  The symbol should be non-nil.\nA handler for any of those names will get to handle this signal.\nThe symbol `error' should normally be one of them.\n\nDATA should be a list.  Its elements are printed as part of the error message.\nSee Info anchor `(elisp)Definition of signal' for some details on how this\nerror message is constructed.\nIf the signal is handled, DATA is made available to the handler.\nSee also the function `condition-case'.",
            "fnname": "Fsignal",
            "intspec": "0",
            "lname": "signal",
            "maxargs": 2,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Ssignal"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of known signal names on this system.",
            "fnname": "Fsignal_names",
            "intspec": "0",
            "lname": "signal-names",
            "maxargs": 0,
            "minargs": 0,
            "path": "process.c",
            "sname": "Ssignal_names"
        },
        {
            "args": [
                "process",
                "sigcode",
                "remote"
            ],
            "attributes": null,
            "doc": "Send PROCESS the signal with code SIGCODE.\nPROCESS may also be a number specifying the process id of the\nprocess to signal; in this case, the process need not be a child of\nthis Emacs.\nIf PROCESS is a process object which contains the property\n`remote-pid', or PROCESS is a number and REMOTE is a remote file name,\nPROCESS is interpreted as process on the respective remote host, which\nwill be the process to signal.\nSIGCODE may be an integer, or a symbol whose name is a signal name.",
            "fnname": "Fsignal_process",
            "intspec": "(list (read-string \"Process (name or number): \") (read-signal-name))",
            "lname": "signal-process",
            "maxargs": 3,
            "minargs": 2,
            "path": "process.c",
            "sname": "Ssignal_process"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return the sine of ARG.",
            "fnname": "Fsin",
            "intspec": "0",
            "lname": "sin",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Ssin"
        },
        {
            "args": [
                "key",
                "no_angles"
            ],
            "attributes": null,
            "doc": "Return a pretty description of a character event KEY.\nControl characters turn into C-whatever, etc.\nOptional argument NO-ANGLES non-nil means don't put angle brackets\naround function keys and event symbols.\n\nSee `text-char-description' for describing character codes.",
            "fnname": "Fsingle_key_description",
            "intspec": "0",
            "lname": "single-key-description",
            "maxargs": 2,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Ssingle_key_description"
        },
        {
            "args": [
                "string",
                "lim"
            ],
            "attributes": null,
            "doc": "Move point backward, stopping after a char not in STRING, or at pos LIM.\nSee `skip-chars-forward' for details.\nReturns the distance traveled, either zero or negative.",
            "fnname": "Fskip_chars_backward",
            "intspec": "0",
            "lname": "skip-chars-backward",
            "maxargs": 2,
            "minargs": 1,
            "path": "syntax.c",
            "sname": "Sskip_chars_backward"
        },
        {
            "args": [
                "string",
                "lim"
            ],
            "attributes": null,
            "doc": "Move point forward, stopping before a char not in STRING, or at pos LIM.\nSTRING is like the inside of a `[...]' in a regular expression\nexcept that `]' is never special and `\\\\' quotes `^', `-' or `\\\\'\n (but not at the end of a range; quoting is never needed there).\nThus, with arg \"a-zA-Z\", this skips letters stopping before first nonletter.\nWith arg \"^a-zA-Z\", skips nonletters stopping before first letter.\nChar classes, e.g. `[:alpha:]', are supported.\n\nReturns the distance traveled, either zero or positive.",
            "fnname": "Fskip_chars_forward",
            "intspec": "0",
            "lname": "skip-chars-forward",
            "maxargs": 2,
            "minargs": 1,
            "path": "syntax.c",
            "sname": "Sskip_chars_forward"
        },
        {
            "args": [
                "syntax",
                "lim"
            ],
            "attributes": null,
            "doc": "Move point backward across chars in specified syntax classes.\nSYNTAX is a string of syntax code characters.\nStop on reaching a char whose syntax is not in SYNTAX, or at position LIM.\nIf SYNTAX starts with ^, skip characters whose syntax is NOT in SYNTAX.\nThis function returns either zero or a negative number, and the absolute value\nof this is the distance traveled.",
            "fnname": "Fskip_syntax_backward",
            "intspec": "0",
            "lname": "skip-syntax-backward",
            "maxargs": 2,
            "minargs": 1,
            "path": "syntax.c",
            "sname": "Sskip_syntax_backward"
        },
        {
            "args": [
                "syntax",
                "lim"
            ],
            "attributes": null,
            "doc": "Move point forward across chars in specified syntax classes.\nSYNTAX is a string of syntax code characters.\nStop before a char whose syntax is not in SYNTAX, or at position LIM.\nIf SYNTAX starts with ^, skip characters whose syntax is NOT in SYNTAX.\nThis function returns the distance traveled, either zero or positive.",
            "fnname": "Fskip_syntax_forward",
            "intspec": "0",
            "lname": "skip-syntax-forward",
            "maxargs": 2,
            "minargs": 1,
            "path": "syntax.c",
            "sname": "Sskip_syntax_forward"
        },
        {
            "args": [
                "seconds",
                "milliseconds"
            ],
            "attributes": null,
            "doc": "Pause, without updating display, for SECONDS seconds.\nSECONDS may be a floating-point value, meaning that you can wait for a\nfraction of a second.  Optional second arg MILLISECONDS specifies an\nadditional wait period, in milliseconds; this is for backwards compatibility.\n\\(Not all operating systems support waiting for a fraction of a second.)",
            "fnname": "Fsleep_for",
            "intspec": "0",
            "lname": "sleep-for",
            "maxargs": 2,
            "minargs": 1,
            "path": "dispnew.c",
            "sname": "Ssleep_for"
        },
        {
            "args": [
                "seq",
                "predicate"
            ],
            "attributes": null,
            "doc": "Sort SEQ, stably, comparing elements using PREDICATE.\nReturns the sorted sequence.  SEQ should be a list or vector.  SEQ is\nmodified by side effects.  PREDICATE is called with two elements of\nSEQ, and should return non-nil if the first element should sort before\nthe second.",
            "fnname": "Fsort",
            "intspec": "0",
            "lname": "sort",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Ssort"
        },
        {
            "args": [
                "charsets"
            ],
            "attributes": null,
            "doc": "Sort charset list CHARSETS by a priority of each charset.\nReturn the sorted list.  CHARSETS is modified by side effects.\nSee also `charset-priority-list' and `set-charset-priority'.",
            "fnname": "Fsort_charsets",
            "intspec": "0",
            "lname": "sort-charsets",
            "maxargs": 1,
            "minargs": 1,
            "path": "charset.c",
            "sname": "Ssort_charsets"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Return non-nil if SYMBOL's global binding has been declared special.\nA special variable is one that will be bound dynamically, even in a\ncontext where binding is lexical by default.",
            "fnname": "Fspecial_variable_p",
            "intspec": "0",
            "lname": "special-variable-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sspecial_variable_p"
        },
        {
            "args": [
                "ch"
            ],
            "attributes": null,
            "doc": "Return list of charset and one to four position-codes of CH.\nThe charset is decided by the current priority order of charsets.\nA position-code is a byte value of each dimension of the code-point of\nCH in the charset.",
            "fnname": "Fsplit_char",
            "intspec": "0",
            "lname": "split-char",
            "maxargs": 1,
            "minargs": 1,
            "path": "charset.c",
            "sname": "Ssplit_char"
        },
        {
            "args": [
                "old",
                "pixel_size",
                "side",
                "normal_size"
            ],
            "attributes": null,
            "doc": "Split window OLD.\nSecond argument PIXEL-SIZE specifies the number of pixels of the\nnew window.  It must be a positive integer.\n\nThird argument SIDE nil (or `below') specifies that the new window shall\nbe located below WINDOW.  SIDE `above' means the new window shall be\nlocated above WINDOW.  In both cases PIXEL-SIZE specifies the pixel\nheight of the new window including space reserved for the mode and/or\nheader/tab line.\n\nSIDE t (or `right') specifies that the new window shall be located on\nthe right side of WINDOW.  SIDE `left' means the new window shall be\nlocated on the left of WINDOW.  In both cases PIXEL-SIZE specifies the\nwidth of the new window including space reserved for fringes and the\nscrollbar or a divider column.\n\nFourth argument NORMAL-SIZE specifies the normal size of the new window\naccording to the SIDE argument.\n\nThe new pixel and normal sizes of all involved windows must have been\nset correctly.  See the code of `split-window' for how this is done.",
            "fnname": "Fsplit_window_internal",
            "intspec": "0",
            "lname": "split-window-internal",
            "maxargs": 4,
            "minargs": 4,
            "path": "window.c",
            "sname": "Ssplit_window_internal"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if sqlite3 support is available in this instance of Emacs.",
            "fnname": "Fsqlite_available_p",
            "intspec": "0",
            "lname": "sqlite-available-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "sqlite.c",
            "sname": "Ssqlite_available_p"
        },
        {
            "args": [
                "db"
            ],
            "attributes": null,
            "doc": "Close the sqlite database DB.",
            "fnname": "Fsqlite_close",
            "intspec": "0",
            "lname": "sqlite-close",
            "maxargs": 1,
            "minargs": 1,
            "path": "sqlite.c",
            "sname": "Ssqlite_close"
        },
        {
            "args": [
                "set"
            ],
            "attributes": null,
            "doc": "Return the column names of SET.",
            "fnname": "Fsqlite_columns",
            "intspec": "0",
            "lname": "sqlite-columns",
            "maxargs": 1,
            "minargs": 1,
            "path": "sqlite.c",
            "sname": "Ssqlite_columns"
        },
        {
            "args": [
                "db"
            ],
            "attributes": null,
            "doc": "Commit a transaction in DB.",
            "fnname": "Fsqlite_commit",
            "intspec": "0",
            "lname": "sqlite-commit",
            "maxargs": 1,
            "minargs": 1,
            "path": "sqlite.c",
            "sname": "Ssqlite_commit"
        },
        {
            "args": [
                "db",
                "query",
                "values"
            ],
            "attributes": null,
            "doc": "Execute a non-select SQL statement.\nIf VALUES is non-nil, it should be a vector or a list of values\nto bind when executing a statement like\n\n   insert into foo values (?, ?, ...)\n\nValue is the number of affected rows.",
            "fnname": "Fsqlite_execute",
            "intspec": "0",
            "lname": "sqlite-execute",
            "maxargs": 3,
            "minargs": 2,
            "path": "sqlite.c",
            "sname": "Ssqlite_execute"
        },
        {
            "args": [
                "set"
            ],
            "attributes": null,
            "doc": "Mark this SET as being finished.\nThis will free the resources held by SET.",
            "fnname": "Fsqlite_finalize",
            "intspec": "0",
            "lname": "sqlite-finalize",
            "maxargs": 1,
            "minargs": 1,
            "path": "sqlite.c",
            "sname": "Ssqlite_finalize"
        },
        {
            "args": [
                "db",
                "module"
            ],
            "attributes": null,
            "doc": "Load an SQlite MODULE into DB.\nMODULE should be the name of an SQlite module's file, a\nshared library in the system-dependent format and having a\nsystem-dependent file-name extension.\n\nOnly modules on Emacs' list of allowed modules can be loaded.",
            "fnname": "Fsqlite_load_extension",
            "intspec": "0",
            "lname": "sqlite-load-extension",
            "maxargs": 2,
            "minargs": 2,
            "path": "sqlite.c",
            "sname": "Ssqlite_load_extension"
        },
        {
            "args": [
                "set"
            ],
            "attributes": null,
            "doc": "Say whether there are any further results in SET.",
            "fnname": "Fsqlite_more_p",
            "intspec": "0",
            "lname": "sqlite-more-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "sqlite.c",
            "sname": "Ssqlite_more_p"
        },
        {
            "args": [
                "set"
            ],
            "attributes": null,
            "doc": "Return the next result set from SET.\nReturn nil when the statement has finished executing successfully.",
            "fnname": "Fsqlite_next",
            "intspec": "0",
            "lname": "sqlite-next",
            "maxargs": 1,
            "minargs": 1,
            "path": "sqlite.c",
            "sname": "Ssqlite_next"
        },
        {
            "args": [
                "file"
            ],
            "attributes": null,
            "doc": "Open FILE as an sqlite database.\nIf FILE is nil, an in-memory database will be opened instead.",
            "fnname": "Fsqlite_open",
            "intspec": "0",
            "lname": "sqlite-open",
            "maxargs": 1,
            "minargs": 0,
            "path": "sqlite.c",
            "sname": "Ssqlite_open"
        },
        {
            "args": [
                "db",
                "pragma"
            ],
            "attributes": null,
            "doc": "Execute PRAGMA in DB.",
            "fnname": "Fsqlite_pragma",
            "intspec": "0",
            "lname": "sqlite-pragma",
            "maxargs": 2,
            "minargs": 2,
            "path": "sqlite.c",
            "sname": "Ssqlite_pragma"
        },
        {
            "args": [
                "db"
            ],
            "attributes": null,
            "doc": "Roll back a transaction in DB.",
            "fnname": "Fsqlite_rollback",
            "intspec": "0",
            "lname": "sqlite-rollback",
            "maxargs": 1,
            "minargs": 1,
            "path": "sqlite.c",
            "sname": "Ssqlite_rollback"
        },
        {
            "args": [
                "db",
                "query",
                "values",
                "return_type"
            ],
            "attributes": null,
            "doc": "Select data from the database DB that matches QUERY.\nIf VALUES is non-nil, it should be a list or a vector specifying the\nvalues that will be interpolated into a parameterized statement.\n\nBy default, the return value is a list, whose contents depend on\nthe value of the optional argument RETURN-TYPE.\n\nIf RETURN-TYPE is nil or omitted, the function returns a list of rows\nmatching QUERY.  If RETURN-TYPE is `full', the function returns a\nlist whose first element is the list of column names, and the rest\nof the elements are the rows matching QUERY.  If RETURN-TYPE is `set',\nthe function returns a set object that can be queried with functions\nlike `sqlite-next' etc., in order to get the data.",
            "fnname": "Fsqlite_select",
            "intspec": "0",
            "lname": "sqlite-select",
            "maxargs": 4,
            "minargs": 2,
            "path": "sqlite.c",
            "sname": "Ssqlite_select"
        },
        {
            "args": [
                "db"
            ],
            "attributes": null,
            "doc": "Start a transaction in DB.",
            "fnname": "Fsqlite_transaction",
            "intspec": "0",
            "lname": "sqlite-transaction",
            "maxargs": 1,
            "minargs": 1,
            "path": "sqlite.c",
            "sname": "Ssqlite_transaction"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the version string of the SQLite library.\nSignal an error if SQLite support is not available.",
            "fnname": "Fsqlite_version",
            "intspec": "0",
            "lname": "sqlite-version",
            "maxargs": 0,
            "minargs": 0,
            "path": "sqlite.c",
            "sname": "Ssqlite_version"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Say whether OBJECT is an SQlite object.",
            "fnname": "Fsqlitep",
            "intspec": "0",
            "lname": "sqlitep",
            "maxargs": 1,
            "minargs": 1,
            "path": "sqlite.c",
            "sname": "Ssqlitep"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return the square root of ARG.",
            "fnname": "Fsqrt",
            "intspec": "0",
            "lname": "sqrt",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Ssqrt"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the standard case table.\nThis is the one used for new buffers.",
            "fnname": "Fstandard_case_table",
            "intspec": "0",
            "lname": "standard-case-table",
            "maxargs": 0,
            "minargs": 0,
            "path": "casetab.c",
            "sname": "Sstandard_case_table"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the standard category table.\nThis is the one used for new buffers.",
            "fnname": "Fstandard_category_table",
            "intspec": "0",
            "lname": "standard-category-table",
            "maxargs": 0,
            "minargs": 0,
            "path": "category.c",
            "sname": "Sstandard_category_table"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the standard syntax table.\nThis is the one used for new buffers.",
            "fnname": "Fstandard_syntax_table",
            "intspec": "0",
            "lname": "standard-syntax-table",
            "maxargs": 0,
            "minargs": 0,
            "path": "syntax.c",
            "sname": "Sstandard_syntax_table"
        },
        {
            "args": [
                "append",
                "no_exec"
            ],
            "attributes": null,
            "doc": "Record subsequent keyboard input, defining a keyboard macro.\nThe commands are recorded even as they are executed.\nUse \\\\[end-kbd-macro] to finish recording and make the macro available.\nUse \\\\[name-last-kbd-macro] to give it a permanent name.\nNon-nil arg (prefix arg) means append to last macro defined;\nthis begins by re-executing that macro as if you typed it again.\nIf optional second arg, NO-EXEC, is non-nil, do not re-execute last\nmacro before appending to it.",
            "fnname": "Fstart_kbd_macro",
            "intspec": "P",
            "lname": "start-kbd-macro",
            "maxargs": 2,
            "minargs": 1,
            "path": "macros.c",
            "sname": "Sstart_kbd_macro"
        },
        {
            "args": [
                "process",
                "current_group"
            ],
            "attributes": null,
            "doc": "Stop process PROCESS.  May be process or name of one.\nSee function `interrupt-process' for more details on usage.\nIf PROCESS is a network or serial or pipe connection, inhibit handling\nof incoming traffic.",
            "fnname": "Fstop_process",
            "intspec": "0",
            "lname": "stop-process",
            "maxargs": 2,
            "minargs": 0,
            "path": "process.c",
            "sname": "Sstop_process"
        },
        {
            "args": [
                "event"
            ],
            "attributes": null,
            "doc": "Store EVENT into the keyboard macro being defined.",
            "fnname": "Fstore_kbd_macro_event",
            "intspec": "0",
            "lname": "store-kbd-macro-event",
            "maxargs": 1,
            "minargs": 1,
            "path": "macros.c",
            "sname": "Sstore_kbd_macro_event"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Concatenate all the argument characters and make the result a string.\nusage: (string &rest CHARACTERS)",
            "fnname": "Fstring",
            "intspec": "0",
            "lname": "string",
            "maxargs": -1,
            "minargs": 0,
            "path": "character.c",
            "sname": "Sstring"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Return a multibyte string with the same individual bytes as STRING.\nIf STRING is multibyte, the result is STRING itself.\nOtherwise it is a newly created string, with no text properties.\n\nIf STRING is unibyte and contains an individual 8-bit byte (i.e. not\npart of a correct utf-8 sequence), it is converted to the corresponding\nmultibyte character of charset `eight-bit'.\nSee also `string-to-multibyte'.\n\nBeware, this often doesn't really do what you think it does.\nIt is similar to (decode-coding-string STRING \\\\='utf-8-emacs).\nIf you're not sure, whether to use `string-as-multibyte' or\n`string-to-multibyte', use `string-to-multibyte'.",
            "fnname": "Fstring_as_multibyte",
            "intspec": "0",
            "lname": "string-as-multibyte",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sstring_as_multibyte"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Return a unibyte string with the same individual bytes as STRING.\nIf STRING is unibyte, the result is STRING itself.\nOtherwise it is a newly created string, with no text properties.\nIf STRING is multibyte and contains a character of charset\n`eight-bit', it is converted to the corresponding single byte.",
            "fnname": "Fstring_as_unibyte",
            "intspec": "0",
            "lname": "string-as-unibyte",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sstring_as_unibyte"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Return the number of bytes in STRING.\nIf STRING is multibyte, this may be greater than the length of STRING.",
            "fnname": "Fstring_bytes",
            "intspec": "0",
            "lname": "string-bytes",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sstring_bytes"
        },
        {
            "args": [
                "s1",
                "s2",
                "locale",
                "ignore_case"
            ],
            "attributes": null,
            "doc": "Return t if two strings have identical contents.\nSymbols are also allowed; their print names are used instead.\n\nThis function obeys the conventions for collation order in your locale\nsettings.  For example, characters with different coding points but\nthe same meaning might be considered as equal, like different grave\naccent Unicode characters:\n\n\\(string-collate-equalp (string ?\\\\uFF40) (string ?\\\\u1FEF))\n  => t\n\nThe optional argument LOCALE, a string, overrides the setting of your\ncurrent locale identifier for collation.  The value is system\ndependent; a LOCALE \\\"en_US.UTF-8\\\" is applicable on POSIX systems,\nwhile it would be \\\"enu_USA.1252\\\" on MS Windows systems.\n\nIf IGNORE-CASE is non-nil, characters are converted to lower-case\nbefore comparing them.\n\nTo emulate Unicode-compliant collation on MS-Windows systems,\nbind `w32-collate-ignore-punctuation' to a non-nil value, since\nthe codeset part of the locale cannot be \\\"UTF-8\\\" on MS-Windows.\n\nIf your system does not support a locale environment, this function\nbehaves like `string-equal', and in that case the IGNORE-CASE argument\nis ignored.\n\nDo NOT use this function to compare file names for equality.",
            "fnname": "Fstring_collate_equalp",
            "intspec": "0",
            "lname": "string-collate-equalp",
            "maxargs": 4,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sstring_collate_equalp"
        },
        {
            "args": [
                "s1",
                "s2",
                "locale",
                "ignore_case"
            ],
            "attributes": null,
            "doc": "Return t if first arg string is less than second in collation order.\nSymbols are also allowed; their print names are used instead.\n\nThis function obeys the conventions for collation order in your\nlocale settings.  For example, punctuation and whitespace characters\nmight be considered less significant for sorting:\n\n\\(sort \\\\='(\"11\" \"12\" \"1 1\" \"1 2\" \"1.1\" \"1.2\") \\\\='string-collate-lessp)\n  => (\"11\" \"1 1\" \"1.1\" \"12\" \"1 2\" \"1.2\")\n\nThe optional argument LOCALE, a string, overrides the setting of your\ncurrent locale identifier for collation.  The value is system\ndependent; a LOCALE \\\"en_US.UTF-8\\\" is applicable on POSIX systems,\nwhile it would be, e.g., \\\"enu_USA.1252\\\" on MS-Windows systems.\n\nIf IGNORE-CASE is non-nil, characters are converted to lower-case\nbefore comparing them.\n\nTo emulate Unicode-compliant collation on MS-Windows systems,\nbind `w32-collate-ignore-punctuation' to a non-nil value, since\nthe codeset part of the locale cannot be \\\"UTF-8\\\" on MS-Windows.\n\nSome operating systems do not implement correct collation (in specific\nlocale environments or at all).  Then, this functions falls back to\ncase-sensitive `string-lessp' and IGNORE-CASE argument is ignored.",
            "fnname": "Fstring_collate_lessp",
            "intspec": "0",
            "lname": "string-collate-lessp",
            "maxargs": 4,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sstring_collate_lessp"
        },
        {
            "args": [
                "string1",
                "string2",
                "bytecompare"
            ],
            "attributes": null,
            "doc": "Return Levenshtein distance between STRING1 and STRING2.\nThe distance is the number of deletions, insertions, and substitutions\nrequired to transform STRING1 into STRING2.\nIf BYTECOMPARE is nil or omitted, compute distance in terms of characters.\nIf BYTECOMPARE is non-nil, compute distance in terms of bytes.\nLetter-case is significant, but text properties are ignored.",
            "fnname": "Fstring_distance",
            "intspec": "0",
            "lname": "string-distance",
            "maxargs": 3,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sstring_distance"
        },
        {
            "args": [
                "s1",
                "s2"
            ],
            "attributes": null,
            "doc": "Return t if two strings have identical contents.\nCase is significant, but text properties are ignored.\nSymbols are also allowed; their print names are used instead.\n\nSee also `string-equal-ignore-case'.",
            "fnname": "Fstring_equal",
            "intspec": "0",
            "lname": "string-equal",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sstring_equal"
        },
        {
            "args": [
                "string1",
                "string2"
            ],
            "attributes": null,
            "doc": "Return non-nil if STRING1 is less than STRING2 in lexicographic order.\nCase is significant.\nSymbols are also allowed; their print names are used instead.",
            "fnname": "Fstring_lessp",
            "intspec": "0",
            "lname": "string-lessp",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sstring_lessp"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Return the multibyte equivalent of STRING.\nIf STRING is unibyte and contains non-ASCII characters, the function\n`unibyte-char-to-multibyte' is used to convert each unibyte character\nto a multibyte character.  In this case, the returned string is a\nnewly created string with no text properties.  If STRING is multibyte\nor entirely ASCII, it is returned unchanged.  In particular, when\nSTRING is unibyte and entirely ASCII, the returned string is unibyte.\n\\(When the characters are all ASCII, Emacs primitives will treat the\nstring the same way whether it is unibyte or multibyte.)",
            "fnname": "Fstring_make_multibyte",
            "intspec": "0",
            "lname": "string-make-multibyte",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sstring_make_multibyte"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Return the unibyte equivalent of STRING.\nMultibyte character codes above 255 are converted to unibyte\nby taking just the low 8 bits of each character's code.",
            "fnname": "Fstring_make_unibyte",
            "intspec": "0",
            "lname": "string-make-unibyte",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sstring_make_unibyte"
        },
        {
            "args": [
                "regexp",
                "string",
                "start",
                "inhibit_modify"
            ],
            "attributes": null,
            "doc": "Return index of start of first match for REGEXP in STRING, or nil.\nMatching ignores case if `case-fold-search' is non-nil.\nIf third arg START is non-nil, start search at that index in STRING.\n\nIf INHIBIT-MODIFY is non-nil, match data is not changed.\n\nIf INHIBIT-MODIFY is nil or missing, match data is changed, and\n`match-end' and `match-beginning' give indices of substrings matched\nby parenthesis constructs in the pattern.  You can use the function\n`match-string' to extract the substrings matched by the parenthesis\nconstructions in REGEXP.  For index of first char beyond the match, do\n(match-end 0).",
            "fnname": "Fstring_match",
            "intspec": "0",
            "lname": "string-match",
            "maxargs": 4,
            "minargs": 2,
            "path": "search.c",
            "sname": "Sstring_match"
        },
        {
            "args": [
                "needle",
                "haystack",
                "start_pos"
            ],
            "attributes": null,
            "doc": "Search for the string NEEDLE in the string HAYSTACK.\nThe return value is the position of the first occurrence of NEEDLE in\nHAYSTACK, or nil if no match was found.\n\nThe optional START-POS argument says where to start searching in\nHAYSTACK and defaults to zero (start at the beginning).\nIt must be between zero and the length of HAYSTACK, inclusive.\n\nCase is always significant and text properties are ignored.",
            "fnname": "Fstring_search",
            "intspec": "0",
            "lname": "string-search",
            "maxargs": 3,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sstring_search"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Return the first character in STRING.",
            "fnname": "Fstring_to_char",
            "intspec": "0",
            "lname": "string-to-char",
            "maxargs": 1,
            "minargs": 1,
            "path": "editfns.c",
            "sname": "Sstring_to_char"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Return a multibyte string with the same individual chars as STRING.\nIf STRING is multibyte, the result is STRING itself.\nOtherwise it is a newly created string, with no text properties.\n\nIf STRING is unibyte and contains an 8-bit byte, it is converted to\nthe corresponding multibyte character of charset `eight-bit'.\n\nThis differs from `string-as-multibyte' by converting each byte of a correct\nutf-8 sequence to an eight-bit character, not just bytes that don't form a\ncorrect sequence.",
            "fnname": "Fstring_to_multibyte",
            "intspec": "0",
            "lname": "string-to-multibyte",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sstring_to_multibyte"
        },
        {
            "args": [
                "string",
                "base"
            ],
            "attributes": null,
            "doc": "Parse STRING as a decimal number and return the number.\nIgnore leading spaces and tabs, and all trailing chars.  Return 0 if\nSTRING cannot be parsed as an integer or floating point number.\n\nIf BASE, interpret STRING as a number in that base.  If BASE isn't\npresent, base 10 is used.  BASE must be between 2 and 16 (inclusive).\nIf the base used is not 10, STRING is always parsed as an integer.",
            "fnname": "Fstring_to_number",
            "intspec": "0",
            "lname": "string-to-number",
            "maxargs": 2,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sstring_to_number"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Convert a syntax descriptor STRING into a raw syntax descriptor.\nSTRING should be a string of the form allowed as argument of\n`modify-syntax-entry'.  The return value is a raw syntax descriptor: a\ncons cell (CODE . MATCHING-CHAR) which can be used, for example, as\nthe value of a `syntax-table' text property.",
            "fnname": "Fstring_to_syntax",
            "intspec": "0",
            "lname": "string-to-syntax",
            "maxargs": 1,
            "minargs": 1,
            "path": "syntax.c",
            "sname": "Sstring_to_syntax"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Return a unibyte string with the same individual chars as STRING.\nIf STRING is unibyte, the result is STRING itself.\nOtherwise it is a newly created string, with no text properties,\nwhere each `eight-bit' character is converted to the corresponding byte.\nIf STRING contains a non-ASCII, non-`eight-bit' character,\nan error is signaled.",
            "fnname": "Fstring_to_unibyte",
            "intspec": "0",
            "lname": "string-to-unibyte",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Sstring_to_unibyte"
        },
        {
            "args": [
                "string1",
                "string2"
            ],
            "attributes": null,
            "doc": "Return non-nil if S1 is less than S2, as version strings.\n\nThis function compares version strings S1 and S2:\n   1) By prefix lexicographically.\n   2) Then by version (similarly to version comparison of Debian's dpkg).\n      Leading zeros in version numbers are ignored.\n   3) If both prefix and version are equal, compare as ordinary strings.\n\nFor example, \\\"foo2.png\\\" compares less than \\\"foo12.png\\\".\nCase is significant.\nSymbols are also allowed; their print names are used instead.",
            "fnname": "Fstring_version_lessp",
            "intspec": "0",
            "lname": "string-version-lessp",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Sstring_version_lessp"
        },
        {
            "args": [
                "str",
                "from",
                "to"
            ],
            "attributes": null,
            "doc": "Return width of STRING in columns when displayed in the current buffer.\nWidth of STRING is measured by how many columns it will occupy on the screen.\n\nOptional arguments FROM and TO specify the substring of STRING to\nconsider, and are interpreted as in `substring'.\n\nWidth of each character in STRING is generally taken according to\n`char-width', but character compositions and the display table in\neffect are taken into consideration.\nTabs in STRING are always assumed to occupy `tab-width' columns,\nalthough they might take fewer columns depending on the column where\nthey begin on display.\nThe effect of faces and fonts, including fonts used for non-Latin and\nother unusual characters, such as emoji, is ignored, as are display\nproperties and invisible text.\n\nFor these reasons, the results are just an approximation, especially\non GUI frames; for accurate dimensions of text as it will be\ndisplayed, use `string-pixel-width' or `window-text-pixel-size'\ninstead.\nusage: (string-width STRING &optional FROM TO)",
            "fnname": "Fstring_width",
            "intspec": "0",
            "lname": "string-width",
            "maxargs": 3,
            "minargs": 1,
            "path": "character.c",
            "sname": "Sstring_width"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is a string.",
            "fnname": "Fstringp",
            "intspec": "0",
            "lname": "stringp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sstringp"
        },
        {
            "args": [
                "subr"
            ],
            "attributes": null,
            "doc": "Return minimum and maximum number of args allowed for SUBR.\nSUBR must be a built-in function.\nThe returned value is a pair (MIN . MAX).  MIN is the minimum number\nof args.  MAX is the maximum number or the symbol `many', for a\nfunction with `&rest' args, or `unevalled' for a special form.",
            "fnname": "Fsubr_arity",
            "intspec": "0",
            "lname": "subr-arity",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssubr_arity"
        },
        {
            "args": [
                "subr"
            ],
            "attributes": null,
            "doc": "Return name of subroutine SUBR.\nSUBR must be a built-in function.",
            "fnname": "Fsubr_name",
            "intspec": "0",
            "lname": "subr-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssubr_name"
        },
        {
            "args": [
                "subr"
            ],
            "attributes": null,
            "doc": "Return the native compilation unit.",
            "fnname": "Fsubr_native_comp_unit",
            "intspec": "0",
            "lname": "subr-native-comp-unit",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssubr_native_comp_unit"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if the object is native compiled lisp\nfunction, nil otherwise.",
            "fnname": "Fsubr_native_elisp_p",
            "intspec": "0",
            "lname": "subr-native-elisp-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssubr_native_elisp_p"
        },
        {
            "args": [
                "subr"
            ],
            "attributes": null,
            "doc": "Return the lambda list for a native compiled lisp/d\nfunction or t otherwise.",
            "fnname": "Fsubr_native_lambda_list",
            "intspec": "0",
            "lname": "subr-native-lambda-list",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssubr_native_lambda_list"
        },
        {
            "args": [
                "subr"
            ],
            "attributes": null,
            "doc": "Return the type of SUBR.",
            "fnname": "Fsubr_type",
            "intspec": "0",
            "lname": "subr-type",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssubr_type"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a built-in function.",
            "fnname": "Fsubrp",
            "intspec": "0",
            "lname": "subrp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssubrp"
        },
        {
            "args": [
                "start",
                "end",
                "fromchar",
                "tochar",
                "noundo"
            ],
            "attributes": null,
            "doc": "From START to END, replace FROMCHAR with TOCHAR each time it occurs.\nIf optional arg NOUNDO is non-nil, don't record this change for undo\nand don't mark the buffer as really changed.\nBoth characters must have the same length of multi-byte form.",
            "fnname": "Fsubst_char_in_region",
            "intspec": "0",
            "lname": "subst-char-in-region",
            "maxargs": 5,
            "minargs": 4,
            "path": "editfns.c",
            "sname": "Ssubst_char_in_region"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Substitute environment variables referred to in FILENAME.\n`$FOO' where FOO is an environment variable name means to substitute\nthe value of that variable.  The variable name should be terminated\nwith a character not a letter, digit or underscore; otherwise, enclose\nthe entire variable name in braces.\n\nIf FOO is not defined in the environment, `$FOO' is left unchanged in\nthe value of this function.\n\nIf `/~' appears, all of FILENAME through that `/' is discarded.\nIf `//' appears, everything up to and including the first of\nthose `/' is discarded.",
            "fnname": "Fsubstitute_in_file_name",
            "intspec": "0",
            "lname": "substitute-in-file-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Ssubstitute_in_file_name"
        },
        {
            "args": [
                "string",
                "from",
                "to"
            ],
            "attributes": null,
            "doc": "Return a new string whose contents are a substring of STRING.\nThe returned string consists of the characters between index FROM\n\\(inclusive) and index TO (exclusive) of STRING.  FROM and TO are\nzero-indexed: 0 means the first character of STRING.  Negative values\nare counted from the end of STRING.  If TO is nil, the substring runs\nto the end of STRING.\n\nThe STRING argument may also be a vector.  In that case, the return\nvalue is a new vector that contains the elements between index FROM\n\\(inclusive) and index TO (exclusive) of that vector argument.\n\nWith one argument, just copy STRING (with properties, if any).",
            "fnname": "Fsubstring",
            "intspec": "0",
            "lname": "substring",
            "maxargs": 3,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Ssubstring"
        },
        {
            "args": [
                "string",
                "from",
                "to"
            ],
            "attributes": null,
            "doc": "Return a substring of STRING, without text properties.\nIt starts at index FROM and ends before TO.\nTO may be nil or omitted; then the substring runs to the end of STRING.\nIf FROM is nil or omitted, the substring starts at the beginning of STRING.\nIf FROM or TO is negative, it counts from the end.\n\nWith one argument, just copy STRING without its properties.",
            "fnname": "Fsubstring_no_properties",
            "intspec": "0",
            "lname": "substring-no-properties",
            "maxargs": 3,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Ssubstring_no_properties"
        },
        {
            "args": [
                "stuffstring"
            ],
            "attributes": null,
            "doc": "Stop Emacs and return to superior process.  You can resume later.\nIf `cannot-suspend' is non-nil, or if the system doesn't support job\ncontrol, run a subshell instead.\n\nIf optional arg STUFFSTRING is non-nil, its characters are stuffed\nto be read as terminal input by Emacs's parent, after suspension.\n\nBefore suspending, run the normal hook `suspend-hook'.\nAfter resumption run the normal hook `suspend-resume-hook'.\n\nSome operating systems cannot stop the Emacs process and resume it later.\nOn such systems, Emacs starts a subshell instead of suspending.",
            "fnname": "Fsuspend_emacs",
            "intspec": "",
            "lname": "suspend-emacs",
            "maxargs": 1,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Ssuspend_emacs"
        },
        {
            "args": [
                "tty"
            ],
            "attributes": null,
            "doc": "Suspend the terminal device TTY.\n\nThe device is restored to its default state, and Emacs ceases all\naccess to the tty device.  Frames that use the device are not deleted,\nbut input is not read from them and if they change, their display is\nnot updated.\n\nTTY may be a terminal object, a frame, or nil for the terminal device\nof the currently selected frame.\n\nThis function runs `suspend-tty-functions' after suspending the\ndevice.  The functions are run with one arg, the id of the suspended\nterminal device.\n\n`suspend-tty' does nothing if it is called on a device that is already\nsuspended.\n\nA suspended tty may be resumed by calling `resume-tty' on it.",
            "fnname": "Fsuspend_tty",
            "intspec": "0",
            "lname": "suspend-tty",
            "maxargs": 1,
            "minargs": 0,
            "path": "term.c",
            "sname": "Ssuspend_tty"
        },
        {
            "args": [
                "obj"
            ],
            "attributes": null,
            "doc": "Return OBJ, maybe marking it for extra scrutiny.\nIf Emacs is compiled with suspicious object checking, capture\na stack trace when OBJ is freed in order to help track down\ngarbage collection bugs.  Otherwise, do nothing and return OBJ.",
            "fnname": "Fsuspicious_object",
            "intspec": "0",
            "lname": "suspicious-object",
            "maxargs": 1,
            "minargs": 1,
            "path": "alloc.c",
            "sname": "Ssuspicious_object"
        },
        {
            "args": [
                "obj"
            ],
            "attributes": null,
            "doc": "Return an integer hash code for OBJ suitable for `eq'.\nIf (eq A B), then (= (sxhash-eq A) (sxhash-eq B)).\n\nHash codes are not guaranteed to be preserved across Emacs sessions.",
            "fnname": "Fsxhash_eq",
            "intspec": "0",
            "lname": "sxhash-eq",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Ssxhash_eq"
        },
        {
            "args": [
                "obj"
            ],
            "attributes": null,
            "doc": "Return an integer hash code for OBJ suitable for `eql'.\nIf (eql A B), then (= (sxhash-eql A) (sxhash-eql B)), but the opposite\nisn't necessarily true.\n\nHash codes are not guaranteed to be preserved across Emacs sessions.",
            "fnname": "Fsxhash_eql",
            "intspec": "0",
            "lname": "sxhash-eql",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Ssxhash_eql"
        },
        {
            "args": [
                "obj"
            ],
            "attributes": null,
            "doc": "Return an integer hash code for OBJ suitable for `equal'.\nIf (equal A B), then (= (sxhash-equal A) (sxhash-equal B)), but the\nopposite isn't necessarily true.\n\nHash codes are not guaranteed to be preserved across Emacs sessions.",
            "fnname": "Fsxhash_equal",
            "intspec": "0",
            "lname": "sxhash-equal",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Ssxhash_equal"
        },
        {
            "args": [
                "obj"
            ],
            "attributes": null,
            "doc": "Return an integer hash code for OBJ suitable for\n`equal-including-properties'.\nIf (sxhash-equal-including-properties A B), then\n(= (sxhash-equal-including-properties A) (sxhash-equal-including-properties B)).\n\nHash codes are not guaranteed to be preserved across Emacs sessions.",
            "fnname": "Fsxhash_equal_including_properties",
            "intspec": "0",
            "lname": "sxhash-equal-including-properties",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Ssxhash_equal_including_properties"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Return SYMBOL's function definition, or nil if that is void.",
            "fnname": "Fsymbol_function",
            "intspec": "0",
            "lname": "symbol-function",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssymbol_function"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Return SYMBOL's name, a string.\n\nWarning: never alter the string returned by `symbol-name'.\nDoing that might make Emacs dysfunctional, and might even crash Emacs.",
            "fnname": "Fsymbol_name",
            "intspec": "0",
            "lname": "symbol-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssymbol_name"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Return SYMBOL's property list.",
            "fnname": "Fsymbol_plist",
            "intspec": "0",
            "lname": "symbol-plist",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssymbol_plist"
        },
        {
            "args": [
                "symbol"
            ],
            "attributes": null,
            "doc": "Return SYMBOL's value.  Error if that is void.\nNote that if `lexical-binding' is in effect, this returns the\nglobal value outside of any lexical scope.",
            "fnname": "Fsymbol_value",
            "intspec": "0",
            "lname": "symbol-value",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssymbol_value"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is a symbol together with position.",
            "fnname": "Fsymbol_with_pos_p",
            "intspec": "0",
            "lname": "symbol-with-pos-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssymbol_with_pos_p"
        },
        {
            "args": [
                "ls"
            ],
            "attributes": null,
            "doc": "Extract the position from a symbol with position.",
            "fnname": "Fsymbol_with_pos_pos",
            "intspec": "0",
            "lname": "symbol-with-pos-pos",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssymbol_with_pos_pos"
        },
        {
            "args": [
                "object"
            ],
            "attributes": "const",
            "doc": "Return t if OBJECT is a symbol.",
            "fnname": "Fsymbolp",
            "intspec": "0",
            "lname": "symbolp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Ssymbolp"
        },
        {
            "args": [
                "syntax"
            ],
            "attributes": null,
            "doc": "Return the syntax char of CLASS, described by an integer.\nFor example, if SYNTAX is word constituent (the integer 2), the\ncharacter `w' (119) is returned.",
            "fnname": "Fsyntax_class_to_char",
            "intspec": "0",
            "lname": "syntax-class-to-char",
            "maxargs": 1,
            "minargs": 1,
            "path": "syntax.c",
            "sname": "Ssyntax_class_to_char"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current syntax table.\nThis is the one specified by the current buffer.",
            "fnname": "Fsyntax_table",
            "intspec": "0",
            "lname": "syntax-table",
            "maxargs": 0,
            "minargs": 0,
            "path": "syntax.c",
            "sname": "Ssyntax_table"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a syntax table.\nCurrently, any char-table counts as a syntax table.",
            "fnname": "Fsyntax_table_p",
            "intspec": "0",
            "lname": "syntax-table-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "syntax.c",
            "sname": "Ssyntax_table_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of user group names currently registered in the system.\nThe value may be nil if not supported on this platform.",
            "fnname": "Fsystem_groups",
            "intspec": "0",
            "lname": "system-groups",
            "maxargs": 0,
            "minargs": 0,
            "path": "dired.c",
            "sname": "Ssystem_groups"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Move file or directory named FILENAME to the recycle bin.",
            "fnname": "Fsystem_move_file_to_trash",
            "intspec": "0",
            "lname": "system-move-file-to-trash",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Ssystem_move_file_to_trash"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the host name of the machine you are running on, as a string.",
            "fnname": "Fsystem_name",
            "intspec": "0",
            "lname": "system-name",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Ssystem_name"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of user names currently registered in the system.\nIf we don't know how to determine that on this platform, just\nreturn a list with one element, taken from `user-real-login-name'.",
            "fnname": "Fsystem_users",
            "intspec": "0",
            "lname": "system-users",
            "maxargs": 0,
            "minargs": 0,
            "path": "dired.c",
            "sname": "Ssystem_users"
        },
        {
            "args": [
                "frame",
                "pixelwise"
            ],
            "attributes": null,
            "doc": "Return the number of lines occupied by the tab bar of FRAME.\nIf FRAME is nil or omitted, use the selected frame.  Optional argument\nPIXELWISE non-nil means return the height of the tab bar in pixels.",
            "fnname": "Ftab_bar_height",
            "intspec": "0",
            "lname": "tab-bar-height",
            "maxargs": 2,
            "minargs": 0,
            "path": "xdisp.c",
            "sname": "Stab_bar_height"
        },
        {
            "args": [
                "n",
                "list"
            ],
            "attributes": null,
            "doc": "Return the first N elements of LIST.\nIf N is zero or negative, return nil.\nIf N is greater or equal to the length of LIST, return LIST (or a copy).",
            "fnname": "Ftake",
            "intspec": "0",
            "lname": "take",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Stake"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Return the tangent of ARG.",
            "fnname": "Ftan",
            "intspec": "0",
            "lname": "tan",
            "maxargs": 1,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Stan"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return coding system specified for terminal output on the given terminal.\nTERMINAL may be a terminal object, a frame, or nil for the selected\nframe's terminal device.",
            "fnname": "Fterminal_coding_system",
            "intspec": "0",
            "lname": "terminal-coding-system",
            "maxargs": 1,
            "minargs": 0,
            "path": "coding.c",
            "sname": "Sterminal_coding_system"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of all terminal devices.",
            "fnname": "Fterminal_list",
            "intspec": "0",
            "lname": "terminal-list",
            "maxargs": 0,
            "minargs": 0,
            "path": "terminal.c",
            "sname": "Sterminal_list"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return non-nil if OBJECT is a terminal which has not been deleted.\nReturn nil if OBJECT is not a live display terminal.\nOBJECT may be a terminal object, a frame, or nil (meaning the\nselected frame's terminal).\nIf OBJECT is a live display terminal, return what sort of output\nterminal it uses.  See the documentation of `framep' for possible\nreturn values.",
            "fnname": "Fterminal_live_p",
            "intspec": "0",
            "lname": "terminal-live-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "terminal.c",
            "sname": "Sterminal_live_p"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the name of the terminal device TERMINAL.\nIt is not guaranteed that the returned value is unique among opened devices.\n\nTERMINAL may be a terminal object, a frame, or nil (meaning the\nselected frame's terminal).",
            "fnname": "Fterminal_name",
            "intspec": "0",
            "lname": "terminal-name",
            "maxargs": 1,
            "minargs": 0,
            "path": "terminal.c",
            "sname": "Sterminal_name"
        },
        {
            "args": [
                "terminal",
                "parameter"
            ],
            "attributes": null,
            "doc": "Return TERMINAL's value for parameter PARAMETER.\nTERMINAL can be a terminal object, a frame, or nil (meaning the\nselected frame's terminal).",
            "fnname": "Fterminal_parameter",
            "intspec": "0",
            "lname": "terminal-parameter",
            "maxargs": 2,
            "minargs": 2,
            "path": "terminal.c",
            "sname": "Sterminal_parameter"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the parameter-alist of terminal TERMINAL.\nThe value is a list of elements of the form (PARM . VALUE), where PARM\nis a symbol.\n\nTERMINAL can be a terminal object, a frame, or nil (meaning the\nselected frame's terminal).",
            "fnname": "Fterminal_parameters",
            "intspec": "0",
            "lname": "terminal-parameters",
            "maxargs": 1,
            "minargs": 0,
            "path": "terminal.c",
            "sname": "Sterminal_parameters"
        },
        {
            "args": [
                "printcharfun",
                "ensure"
            ],
            "attributes": null,
            "doc": "Output a newline to stream PRINTCHARFUN.\nIf ENSURE is non-nil only output a newline if not already at the\nbeginning of a line.  Value is non-nil if a newline is printed.\nIf PRINTCHARFUN is omitted or nil, the value of `standard-output' is used.",
            "fnname": "Fterpri",
            "intspec": "0",
            "lname": "terpri",
            "maxargs": 2,
            "minargs": 0,
            "path": "print.c",
            "sname": "Sterpri"
        },
        {
            "args": [
                "string",
                "collection",
                "predicate"
            ],
            "attributes": null,
            "doc": "Return non-nil if STRING is a valid completion.\nFor instance, if COLLECTION is a list of strings, STRING is a\nvalid completion if it appears in the list and PREDICATE is satisfied.\n\nTakes the same arguments as `all-completions' and `try-completion'.\n\nIf COLLECTION is a function, it is called with three arguments:\nthe values STRING, PREDICATE and `lambda'.",
            "fnname": "Ftest_completion",
            "intspec": "0",
            "lname": "test-completion",
            "maxargs": 3,
            "minargs": 2,
            "path": "minibuf.c",
            "sname": "Stest_completion"
        },
        {
            "args": [
                "character"
            ],
            "attributes": null,
            "doc": "Return the description of CHARACTER in standard Emacs notation.\nCHARACTER must be a valid character code that passes the `characterp' test.\nControl characters turn into \"^char\", and characters with Meta and other\nmodifiers signal an error, as they are not valid character codes.\nThis differs from `single-key-description' which accepts character events,\nand thus doesn't enforce the `characterp' condition, turns control\ncharacters into \"C-char\", and uses the 2**27 bit for Meta.\nSee Info node `(elisp)Describing Characters' for examples.",
            "fnname": "Ftext_char_description",
            "intspec": "0",
            "lname": "text-char-description",
            "maxargs": 1,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Stext_char_description"
        },
        {
            "args": [
                "position",
                "object"
            ],
            "attributes": null,
            "doc": "Return the list of properties of the character at POSITION in OBJECT.\nIf the optional second argument OBJECT is a buffer (or nil, which means\nthe current buffer), POSITION is a buffer position (integer or marker).\n\nIf OBJECT is a string, POSITION is a 0-based index into it.\n\nIf POSITION is at the end of OBJECT, the value is nil, but note that\nbuffer narrowing does not affect the value.  That is, if OBJECT is a\nbuffer or nil, and the buffer is narrowed and POSITION is at the end\nof the narrowed buffer, the result may be non-nil.\n\nIf you want to display the text properties at point in a human-readable\nform, use the `describe-text-properties' command.",
            "fnname": "Ftext_properties_at",
            "intspec": "0",
            "lname": "text-properties-at",
            "maxargs": 2,
            "minargs": 1,
            "path": "textprop.c",
            "sname": "Stext_properties_at"
        },
        {
            "args": [
                "start",
                "end",
                "property",
                "value",
                "object"
            ],
            "attributes": null,
            "doc": "Check text from START to END for property PROPERTY equaling VALUE.\nIf so, return the position of the first character whose property PROPERTY\nis `eq' to VALUE.  Otherwise return nil.\nIf the optional fifth argument OBJECT is a buffer (or nil, which means\nthe current buffer), START and END are buffer positions (integers or\nmarkers).  If OBJECT is a string, START and END are 0-based indices into it.",
            "fnname": "Ftext_property_any",
            "intspec": "0",
            "lname": "text-property-any",
            "maxargs": 5,
            "minargs": 4,
            "path": "textprop.c",
            "sname": "Stext_property_any"
        },
        {
            "args": [
                "start",
                "end",
                "property",
                "value",
                "object"
            ],
            "attributes": null,
            "doc": "Check text from START to END for property PROPERTY not equaling VALUE.\nIf so, return the position of the first character whose property PROPERTY\nis not `eq' to VALUE.  Otherwise, return nil.\nIf the optional fifth argument OBJECT is a buffer (or nil, which means\nthe current buffer), START and END are buffer positions (integers or\nmarkers).  If OBJECT is a string, START and END are 0-based indices into it.",
            "fnname": "Ftext_property_not_all",
            "intspec": "0",
            "lname": "text-property-not-all",
            "maxargs": 5,
            "minargs": 4,
            "path": "textprop.c",
            "sname": "Stext_property_not_all"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current effective text quoting style.\nIf the variable `text-quoting-style' is `grave', `straight' or\n`curve', just return that value.  If it is nil (the default), return\n`grave' if curved quotes cannot be displayed (for instance, on a\nterminal with no support for these characters), otherwise return\n`quote'.  Any other value is treated as `grave'.\n\nNote that in contrast to the variable `text-quoting-style', this\nfunction will never return nil.",
            "fnname": "Ftext_quoting_style",
            "intspec": "0",
            "lname": "text-quoting-style",
            "maxargs": 0,
            "minargs": 0,
            "path": "doc.c",
            "sname": "Stext_quoting_style"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the key sequence that invoked this command.\nHowever, if the command has called `read-key-sequence', it returns\nthe last key sequence that has been read.\nThe value is a string or a vector.\n\nSee also `this-command-keys-vector'.",
            "fnname": "Fthis_command_keys",
            "intspec": "0",
            "lname": "this-command-keys",
            "maxargs": 0,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Sthis_command_keys"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the key sequence that invoked this command, as a vector.\nHowever, if the command has called `read-key-sequence', it returns\nthe last key sequence that has been read.\n\nSee also `this-command-keys'.",
            "fnname": "Fthis_command_keys_vector",
            "intspec": "0",
            "lname": "this-command-keys-vector",
            "maxargs": 0,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Sthis_command_keys_vector"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the key sequence that invoked this command.\nMore generally, it returns the last key sequence read, either by\nthe command loop or by `read-key-sequence'.\nThe value is always a vector.",
            "fnname": "Fthis_single_command_keys",
            "intspec": "0",
            "lname": "this-single-command-keys",
            "maxargs": 0,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Sthis_single_command_keys"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the raw events that were read for this command.\nMore generally, it returns the last key sequence read, either by\nthe command loop or by `read-key-sequence'.\nUnlike `this-single-command-keys', this function's value\nshows the events before all translations (except for input methods).\nThe value is always a vector.",
            "fnname": "Fthis_single_command_raw_keys",
            "intspec": "0",
            "lname": "this-single-command-raw-keys",
            "maxargs": 0,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Sthis_single_command_raw_keys"
        },
        {
            "args": [
                "thread"
            ],
            "attributes": null,
            "doc": "Return the object that THREAD is blocking on.\nIf THREAD is blocked in `thread-join' on a second thread, return that\nthread.\nIf THREAD is blocked in `mutex-lock', return the mutex.\nIf THREAD is blocked in `condition-wait', return the condition variable.\nOtherwise, if THREAD is not blocked, return nil.",
            "fnname": "Fthread_blocker",
            "intspec": "0",
            "lname": "thread--blocker",
            "maxargs": 1,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Sthread_blocker"
        },
        {
            "args": [
                "thread"
            ],
            "attributes": null,
            "doc": "Wait for THREAD to exit.\nThis blocks the current thread until THREAD exits or until the current\nthread is signaled.  It returns the result of the THREAD function.  It\nis an error for a thread to try to join itself.",
            "fnname": "Fthread_join",
            "intspec": "0",
            "lname": "thread-join",
            "maxargs": 1,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Sthread_join"
        },
        {
            "args": [
                "cleanup"
            ],
            "attributes": null,
            "doc": "Return the last error form recorded by a dying thread.\nIf CLEANUP is non-nil, remove this error form from history.",
            "fnname": "Fthread_last_error",
            "intspec": "0",
            "lname": "thread-last-error",
            "maxargs": 1,
            "minargs": 0,
            "path": "thread.c",
            "sname": "Sthread_last_error"
        },
        {
            "args": [
                "thread"
            ],
            "attributes": null,
            "doc": "Return t if THREAD is alive, or nil if it has exited.",
            "fnname": "Fthread_live_p",
            "intspec": "0",
            "lname": "thread-live-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Sthread_live_p"
        },
        {
            "args": [
                "thread"
            ],
            "attributes": null,
            "doc": "Return the name of the THREAD.\nThe name is the same object that was passed to `make-thread'.",
            "fnname": "Fthread_name",
            "intspec": "0",
            "lname": "thread-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "thread.c",
            "sname": "Sthread_name"
        },
        {
            "args": [
                "thread",
                "error_symbol",
                "data"
            ],
            "attributes": null,
            "doc": "Signal an error in a thread.\nThis acts like `signal', but arranges for the signal to be raised\nin THREAD.  If THREAD is the current thread, acts just like `signal'.\nThis will interrupt a blocked call to `mutex-lock', `condition-wait',\nor `thread-join' in the target thread.\nIf THREAD is the main thread, just the error message is shown.",
            "fnname": "Fthread_signal",
            "intspec": "0",
            "lname": "thread-signal",
            "maxargs": 3,
            "minargs": 3,
            "path": "thread.c",
            "sname": "Sthread_signal"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Yield the CPU to another thread.",
            "fnname": "Fthread_yield",
            "intspec": "0",
            "lname": "thread-yield",
            "maxargs": 0,
            "minargs": 0,
            "path": "thread.c",
            "sname": "Sthread_yield"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a thread.",
            "fnname": "Fthreadp",
            "intspec": "0",
            "lname": "threadp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Sthreadp"
        },
        {
            "args": [
                "tag",
                "value"
            ],
            "attributes": "noreturn",
            "doc": "Throw to the catch for TAG and return VALUE from it.\nBoth TAG and VALUE are evalled.",
            "fnname": "Fthrow",
            "intspec": "0",
            "lname": "throw",
            "maxargs": 2,
            "minargs": 2,
            "path": "eval.c",
            "sname": "Sthrow"
        },
        {
            "args": [
                "a",
                "b"
            ],
            "attributes": null,
            "doc": "Return the sum of two time values A and B, as a time value.\nSee `format-time-string' for the various forms of a time value.\nFor example, nil stands for the current time.",
            "fnname": "Ftime_add",
            "intspec": "0",
            "lname": "time-add",
            "maxargs": 2,
            "minargs": 2,
            "path": "timefns.c",
            "sname": "Stime_add"
        },
        {
            "args": [
                "time",
                "form"
            ],
            "attributes": null,
            "doc": "Convert TIME value to a Lisp timestamp of the given FORM.\nTruncate the returned value toward minus infinity.\n\nIf FORM is a positive integer, return a pair of integers (TICKS . FORM),\nwhere TICKS is the number of clock ticks and FORM is the clock frequency\nin ticks per second.\n\nIf FORM is t, return (TICKS . PHZ), where PHZ is a suitable clock\nfrequency in ticks per second.\n\nIf FORM is `integer', return an integer count of seconds.\n\nIf FORM is `list', return an integer list (HIGH LOW USEC PSEC), where\nHIGH has the most significant bits of the seconds, LOW has the least\nsignificant 16 bits, and USEC and PSEC are the microsecond and\npicosecond counts.\n\nIf FORM is nil, the behavior depends on `current-time-list',\nbut new code should not rely on it.",
            "fnname": "Ftime_convert",
            "intspec": "0",
            "lname": "time-convert",
            "maxargs": 2,
            "minargs": 1,
            "path": "timefns.c",
            "sname": "Stime_convert"
        },
        {
            "args": [
                "a",
                "b"
            ],
            "attributes": null,
            "doc": "Return non-nil if A and B are equal time values.\nSee `format-time-string' for the various forms of a time value.",
            "fnname": "Ftime_equal_p",
            "intspec": "0",
            "lname": "time-equal-p",
            "maxargs": 2,
            "minargs": 2,
            "path": "timefns.c",
            "sname": "Stime_equal_p"
        },
        {
            "args": [
                "a",
                "b"
            ],
            "attributes": null,
            "doc": "Return non-nil if time value A is less than time value B.\nSee `format-time-string' for the various forms of a time value.\nFor example, nil stands for the current time.",
            "fnname": "Ftime_less_p",
            "intspec": "0",
            "lname": "time-less-p",
            "maxargs": 2,
            "minargs": 2,
            "path": "timefns.c",
            "sname": "Stime_less_p"
        },
        {
            "args": [
                "a",
                "b"
            ],
            "attributes": null,
            "doc": "Return the difference between two time values A and B, as a time value.\nYou can use `float-time' to convert the difference into elapsed seconds.\nSee `format-time-string' for the various forms of a time value.\nFor example, nil stands for the current time.",
            "fnname": "Ftime_subtract",
            "intspec": "0",
            "lname": "time-subtract",
            "maxargs": 2,
            "minargs": 2,
            "path": "timefns.c",
            "sname": "Stime_subtract"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Get the system tool bar style.\nIf no system tool bar style is known, return `tool-bar-style' if set to a\nknown style.  Otherwise return image.",
            "fnname": "Ftool_bar_get_system_style",
            "intspec": "0",
            "lname": "tool-bar-get-system-style",
            "maxargs": 0,
            "minargs": 0,
            "path": "xsettings.c",
            "sname": "Stool_bar_get_system_style"
        },
        {
            "args": [
                "frame",
                "pixelwise"
            ],
            "attributes": null,
            "doc": "Return the number of lines occupied by the tool bar of FRAME.\nIf FRAME is nil or omitted, use the selected frame.  Optional argument\nPIXELWISE non-nil means return the height of the tool bar in pixels.",
            "fnname": "Ftool_bar_height",
            "intspec": "0",
            "lname": "tool-bar-height",
            "maxargs": 2,
            "minargs": 0,
            "path": "xdisp.c",
            "sname": "Stool_bar_height"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return width in pixels of FRAME's tool bar.\nThe result is greater than zero only when the tool bar is on the left\nor right side of FRAME.  If FRAME is omitted or nil, the selected frame\nis used.",
            "fnname": "Ftool_bar_pixel_width",
            "intspec": "0",
            "lname": "tool-bar-pixel-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Stool_bar_pixel_width"
        },
        {
            "args": null,
            "attributes": "noreturn",
            "doc": "Exit all recursive editing levels.\nThis also exits all active minibuffers.",
            "fnname": "Ftop_level",
            "intspec": "",
            "lname": "top-level",
            "maxargs": 0,
            "minargs": 0,
            "path": "keyboard.c",
            "sname": "Stop_level"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Toggle tracing of redisplay.\nWith ARG, turn tracing on if and only if ARG is positive.",
            "fnname": "Ftrace_redisplay",
            "intspec": "P",
            "lname": "trace-redisplay",
            "maxargs": 1,
            "minargs": 0,
            "path": "xdisp.c",
            "sname": "Strace_redisplay"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Like `format', but print result to stderr.\nusage: (trace-to-stderr STRING &rest OBJECTS)",
            "fnname": "Ftrace_to_stderr",
            "intspec": "",
            "lname": "trace-to-stderr",
            "maxargs": -1,
            "minargs": 1,
            "path": "xdisp.c",
            "sname": "Strace_to_stderr"
        },
        {
            "args": [
                "start",
                "end",
                "table"
            ],
            "attributes": null,
            "doc": "Internal use only.\nFrom START to END, translate characters according to TABLE.\nTABLE is a string or a char-table; the Nth character in it is the\nmapping for the character with code N.\nIt returns the number of characters changed.",
            "fnname": "Ftranslate_region_internal",
            "intspec": "0",
            "lname": "translate-region-internal",
            "maxargs": 3,
            "minargs": 3,
            "path": "editfns.c",
            "sname": "Stranslate_region_internal"
        },
        {
            "args": [
                "startr1",
                "endr1",
                "startr2",
                "endr2",
                "leave_markers"
            ],
            "attributes": null,
            "doc": "Transpose region STARTR1 to ENDR1 with STARTR2 to ENDR2.\nThe regions should not be overlapping, because the size of the buffer is\nnever changed in a transposition.\n\nOptional fifth arg LEAVE-MARKERS, if non-nil, means don't update\nany markers that happen to be located in the regions.\n\nTransposing beyond buffer boundaries is an error.\n\nInteractively, STARTR1 and ENDR1 are point and mark; STARTR2 and ENDR2\nare the last two marks pushed to the mark ring; LEAVE-MARKERS is nil.\nIf a prefix argument N is given, STARTR2 and ENDR2 are the two\nsuccessive marks N entries back in the mark ring.  A negative prefix\nargument instead counts forward from the oldest mark in the mark\nring.",
            "fnname": "Ftranspose_regions",
            "intspec": "(if (< (length mark-ring) 2)\\\n            (error \"Other region must be marked before transposing two regions\")\\\n          (let* ((num (if current-prefix-arg\\\n                         (prefix-numeric-value current-prefix-arg)\\\n                        0))\\\n                 (ring-length (length mark-ring))\\\n                 (eltnum (mod num ring-length))\\\n                 (eltnum2 (mod (1+ num) ring-length)))\\\n            (list (point) (mark) (elt mark-ring eltnum) (elt mark-ring eltnum2))))",
            "lname": "transpose-regions",
            "maxargs": 5,
            "minargs": 4,
            "path": "editfns.c",
            "sname": "Stranspose_regions"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return non-nil if tree-sitter support is built-in and available.",
            "fnname": "Ftreesit_available_p",
            "intspec": "0",
            "lname": "treesit-available-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "treesit.c",
            "sname": "Streesit_available_p"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a compiled tree-sitter query.",
            "fnname": "Ftreesit_compiled_query_p",
            "intspec": "0",
            "lname": "treesit-compiled-query-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_compiled_query_p"
        },
        {
            "args": [
                "root",
                "predicate",
                "process_fn",
                "depth"
            ],
            "attributes": null,
            "doc": "Create a sparse tree of ROOT's subtree.\n\nThis takes the subtree under ROOT, and combs it so only the nodes that\nmatch PREDICATE are left, like picking out grapes on the vine.\n\nPREDICATE can be a regexp string that matches against each node's\ntype, a predicate function, and more.  See `treesit-thing-settings'\nfor the possible predicates.  PREDICATE can also be a thing defined in\n`treesit-thing-settings'.  Using an undefined thing doesn't raise an\nerror.\n\nFor a subtree on the left that consist of both numbers and letters, if\nPREDICATE is \"is letter\", the returned tree is the one on the right.\n\n        a                 a              a\n        |                 |              |\n    +---+---+         +---+---+      +---+---+\n    |   |   |         |   |   |      |   |   |\n    b   1   2         b   |   |      b   c   d\n        |   |     =>      |   |  =>      |\n        c   +--+          c   +          e\n        |   |  |          |   |\n     +--+   d  4       +--+   d\n     |  |              |\n     e  5              e\n\nIf PROCESS-FN is non-nil, it should be a function of one argument.  In\nthat case, instead of returning the matched nodes, pass each node to\nPROCESS-FN, and use its return value instead.\n\nIf non-nil, DEPTH is the number of levels to go down the tree from\nROOT.  If DEPTH is nil or omitted, it defaults to 1000.\n\nEach node in the returned tree looks like (NODE . (CHILD ...)).  The\nroot of this tree might be nil, if ROOT doesn't match PREDICATE.\n\nIf no node matches PREDICATE, return nil.",
            "fnname": "Ftreesit_induce_sparse_tree",
            "intspec": "0",
            "lname": "treesit-induce-sparse-tree",
            "maxargs": 4,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_induce_sparse_tree"
        },
        {
            "args": [
                "language"
            ],
            "attributes": null,
            "doc": "Return the ABI version of the tree-sitter grammar for LANGUAGE.\nReturn nil if a grammar library for LANGUAGE is not available.",
            "fnname": "Ftreesit_language_abi_version",
            "intspec": "0",
            "lname": "treesit-language-abi-version",
            "maxargs": 1,
            "minargs": 0,
            "path": "treesit.c",
            "sname": "Streesit_language_abi_version"
        },
        {
            "args": [
                "language",
                "detail"
            ],
            "attributes": null,
            "doc": "Return non-nil if LANGUAGE exists and is loadable.\n\nIf DETAIL is non-nil, return (t . nil) when LANGUAGE is available,\n(nil . DATA) when unavailable.  DATA is the signal data of\n`treesit-load-language-error'.",
            "fnname": "Ftreesit_language_available_p",
            "intspec": "0",
            "lname": "treesit-language-available-p",
            "maxargs": 2,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_language_available_p"
        },
        {
            "args": [
                "min_compatible"
            ],
            "attributes": null,
            "doc": "Return the language ABI version of the tree-sitter library.\n\nBy default, report the latest ABI version supported by the library for\nloading language support modules.  The library is backward-compatible\nwith language modules which use older ABI versions; if MIN-COMPATIBLE\nis non-nil, return the oldest compatible ABI version.",
            "fnname": "Ftreesit_library_abi_version",
            "intspec": "0",
            "lname": "treesit-library-abi-version",
            "maxargs": 1,
            "minargs": 0,
            "path": "treesit.c",
            "sname": "Streesit_library_abi_version"
        },
        {
            "args": [
                "node",
                "property"
            ],
            "attributes": null,
            "doc": "Return non-nil if NODE has PROPERTY, nil otherwise.\n\nPROPERTY could be `named', `missing', `extra', `outdated',\n`has-error', or `live'.\n\nNamed nodes correspond to named rules in the language definition,\nwhereas \"anonymous\" nodes correspond to string literals in the\nlanguage definition.\n\nMissing nodes are inserted by the parser in order to recover from\ncertain kinds of syntax errors, i.e., should be there but not there.\n\nExtra nodes represent things like comments, which are not required the\nlanguage definition, but can appear anywhere.\n\nA node is \"outdated\" if the parser has reparsed at least once after\nthe node was created.\n\nA node \"has error\" if itself is a syntax error or contains any syntax\nerrors.\n\nA node is \"live\" if its parser is not deleted and its buffer is\nlive.",
            "fnname": "Ftreesit_node_check",
            "intspec": "0",
            "lname": "treesit-node-check",
            "maxargs": 2,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_node_check"
        },
        {
            "args": [
                "node",
                "n",
                "named"
            ],
            "attributes": null,
            "doc": "Return the Nth child of NODE.\n\nReturn nil if there is no Nth child.  If NAMED is non-nil, look for\nnamed child only.  NAMED defaults to nil.  If NODE is nil, return\nnil.\n\nN could be negative, e.g., -1 represents the last child.",
            "fnname": "Ftreesit_node_child",
            "intspec": "0",
            "lname": "treesit-node-child",
            "maxargs": 3,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_node_child"
        },
        {
            "args": [
                "node",
                "field_name"
            ],
            "attributes": null,
            "doc": "Return the child of NODE with FIELD-NAME.\nReturn nil if there is no such child.  If NODE is nil, return nil.",
            "fnname": "Ftreesit_node_child_by_field_name",
            "intspec": "0",
            "lname": "treesit-node-child-by-field-name",
            "maxargs": 2,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_node_child_by_field_name"
        },
        {
            "args": [
                "node",
                "named"
            ],
            "attributes": null,
            "doc": "Return the number of children of NODE.\n\nIf NAMED is non-nil, count named children only.  NAMED defaults to\nnil.  If NODE is nil, return nil.",
            "fnname": "Ftreesit_node_child_count",
            "intspec": "0",
            "lname": "treesit-node-child-count",
            "maxargs": 2,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_node_child_count"
        },
        {
            "args": [
                "node",
                "beg",
                "end",
                "named"
            ],
            "attributes": null,
            "doc": "Return the smallest node that covers buffer positions BEG to END.\n\nThe returned node is a descendant of NODE.\nReturn nil if there is no such node.\nIf NAMED is non-nil, look for named child only.  NAMED defaults to nil.\nIf NODE is nil, return nil.",
            "fnname": "Ftreesit_node_descendant_for_range",
            "intspec": "0",
            "lname": "treesit-node-descendant-for-range",
            "maxargs": 4,
            "minargs": 3,
            "path": "treesit.c",
            "sname": "Streesit_node_descendant_for_range"
        },
        {
            "args": [
                "node"
            ],
            "attributes": null,
            "doc": "Return the NODE's end position in its buffer.\nIf NODE is nil, return nil.",
            "fnname": "Ftreesit_node_end",
            "intspec": "0",
            "lname": "treesit-node-end",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_node_end"
        },
        {
            "args": [
                "node1",
                "node2"
            ],
            "attributes": null,
            "doc": "Return non-nil if NODE1 and NODE2 refer to the same node.\nIf any one of NODE1 and NODE2 is nil, return nil.\nThis function uses the same equivalence metric as `equal', and returns\nnon-nil if NODE1 and NODE2 refer to the same node in a syntax tree\nproduced by tree-sitter.",
            "fnname": "Ftreesit_node_eq",
            "intspec": "0",
            "lname": "treesit-node-eq",
            "maxargs": 2,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_node_eq"
        },
        {
            "args": [
                "node",
                "n"
            ],
            "attributes": null,
            "doc": "Return the field name of the Nth child of NODE.\n\nReturn nil if there's no Nth child, or if it has no field.\nIf NODE is nil, return nil.\n\nN counts all children, i.e., named ones and anonymous ones.\n\nN could be negative, e.g., -1 represents the last child.",
            "fnname": "Ftreesit_node_field_name_for_child",
            "intspec": "0",
            "lname": "treesit-node-field-name-for-child",
            "maxargs": 2,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_node_field_name_for_child"
        },
        {
            "args": [
                "node",
                "pos",
                "named"
            ],
            "attributes": null,
            "doc": "Return the first child of NODE for buffer position POS.\n\nSpecifically, return the first child that extends beyond POS.\nReturn nil if there is no such child.\nIf NAMED is non-nil, look for named children only.  NAMED defaults to nil.\nNote that this function returns an immediate child, not the smallest\n(grand)child.  If NODE is nil, return nil.",
            "fnname": "Ftreesit_node_first_child_for_pos",
            "intspec": "0",
            "lname": "treesit-node-first-child-for-pos",
            "maxargs": 3,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_node_first_child_for_pos"
        },
        {
            "args": [
                "node",
                "predicate",
                "ignore_missing"
            ],
            "attributes": null,
            "doc": "Check whether NODE matches PREDICATE.\n\nPREDICATE can be a symbol representing a thing in\n`treesit-thing-settings', or a predicate, like regexp matching node\ntype, etc.  See `treesit-thing-settings' for more details.\n\nReturn non-nil if NODE matches PREDICATE, nil otherwise.\n\nSignals `treesit-invalid-predicate' if there's no definition of THING\nin `treesit-thing-settings', or if PREDICATE is malformed.  If\nIGNORE-MISSING is non-nil, don't signal an error for missing THING\ndefinition, but still signal for malformed PREDICATE.",
            "fnname": "Ftreesit_node_match_p",
            "intspec": "0",
            "lname": "treesit-node-match-p",
            "maxargs": 3,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_node_match_p"
        },
        {
            "args": [
                "node",
                "named"
            ],
            "attributes": null,
            "doc": "Return the next sibling of NODE.\n\nReturn nil if there is no next sibling.  If NAMED is non-nil, look for named\nsiblings only.  NAMED defaults to nil.  If NODE is nil, return nil.",
            "fnname": "Ftreesit_node_next_sibling",
            "intspec": "0",
            "lname": "treesit-node-next-sibling",
            "maxargs": 2,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_node_next_sibling"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a tree-sitter node.",
            "fnname": "Ftreesit_node_p",
            "intspec": "0",
            "lname": "treesit-node-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_node_p"
        },
        {
            "args": [
                "node"
            ],
            "attributes": null,
            "doc": "Return the immediate parent of NODE.\nReturn nil if NODE has no parent.  If NODE is nil, return nil.",
            "fnname": "Ftreesit_node_parent",
            "intspec": "0",
            "lname": "treesit-node-parent",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_node_parent"
        },
        {
            "args": [
                "node"
            ],
            "attributes": null,
            "doc": "Return the parser to which NODE belongs.",
            "fnname": "Ftreesit_node_parser",
            "intspec": "0",
            "lname": "treesit-node-parser",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_node_parser"
        },
        {
            "args": [
                "node",
                "named"
            ],
            "attributes": null,
            "doc": "Return the previous sibling of NODE.\n\nReturn nil if there is no previous sibling.  If NAMED is non-nil, look\nfor named siblings only.  NAMED defaults to nil.  If NODE is nil,\nreturn nil.",
            "fnname": "Ftreesit_node_prev_sibling",
            "intspec": "0",
            "lname": "treesit-node-prev-sibling",
            "maxargs": 2,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_node_prev_sibling"
        },
        {
            "args": [
                "node"
            ],
            "attributes": null,
            "doc": "Return the NODE's start position in its buffer.\nIf NODE is nil, return nil.",
            "fnname": "Ftreesit_node_start",
            "intspec": "0",
            "lname": "treesit-node-start",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_node_start"
        },
        {
            "args": [
                "node"
            ],
            "attributes": null,
            "doc": "Return the string representation of NODE.\nIf NODE is nil, return nil.",
            "fnname": "Ftreesit_node_string",
            "intspec": "0",
            "lname": "treesit-node-string",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_node_string"
        },
        {
            "args": [
                "node"
            ],
            "attributes": null,
            "doc": "Return the NODE's type as a string.\nIf NODE is nil, return nil.",
            "fnname": "Ftreesit_node_type",
            "intspec": "0",
            "lname": "treesit-node-type",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_node_type"
        },
        {
            "args": [
                "parser",
                "function"
            ],
            "attributes": null,
            "doc": "Add FUNCTION to the list of PARSER's after-change notifiers.\nFUNCTION must be a function symbol, rather than a lambda form.\nFUNCTION should take 2 arguments, RANGES and PARSER.  RANGES is a list\nof cons cells of the form (START . END), where START and END are buffer\npositions.  PARSER is the parser issuing the notification.",
            "fnname": "Ftreesit_parser_add_notifier",
            "intspec": "0",
            "lname": "treesit-parser-add-notifier",
            "maxargs": 2,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_parser_add_notifier"
        },
        {
            "args": [
                "parser"
            ],
            "attributes": null,
            "doc": "Return the buffer of PARSER.",
            "fnname": "Ftreesit_parser_buffer",
            "intspec": "0",
            "lname": "treesit-parser-buffer",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_parser_buffer"
        },
        {
            "args": [
                "language",
                "buffer",
                "no_reuse",
                "tag"
            ],
            "attributes": null,
            "doc": "Create and return a parser in BUFFER for LANGUAGE with TAG.\n\nThe parser is automatically added to BUFFER's parser list, as returned\nby `treesit-parser-list'.  LANGUAGE is a language symbol.  If BUFFER\nis nil or omitted, it defaults to the current buffer.  If BUFFER\nalready has a parser for LANGUAGE with TAG, return that parser, but if\nNO-REUSE is non-nil, always create a new parser.\n\nTAG can be any symbol except t, and defaults to nil.  Different\nparsers can have the same tag.\n\nIf that buffer is an indirect buffer, its base buffer is used instead.\nThat is, indirect buffers use their base buffer's parsers.  Lisp\nprograms should widen as necessary should they want to use a parser in\nan indirect buffer.",
            "fnname": "Ftreesit_parser_create",
            "intspec": "0",
            "lname": "treesit-parser-create",
            "maxargs": 4,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_parser_create"
        },
        {
            "args": [
                "parser"
            ],
            "attributes": null,
            "doc": "Delete PARSER from its buffer's parser list.\nSee `treesit-parser-list' for the buffer's parser list.",
            "fnname": "Ftreesit_parser_delete",
            "intspec": "0",
            "lname": "treesit-parser-delete",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_parser_delete"
        },
        {
            "args": [
                "parser"
            ],
            "attributes": null,
            "doc": "Return the ranges set for PARSER.\nIf no ranges are set for PARSER, return nil.\nSee also `treesit-parser-set-included-ranges'.",
            "fnname": "Ftreesit_parser_included_ranges",
            "intspec": "0",
            "lname": "treesit-parser-included-ranges",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_parser_included_ranges"
        },
        {
            "args": [
                "parser"
            ],
            "attributes": null,
            "doc": "Return PARSER's language symbol.\nThis symbol is the one used to create the parser.",
            "fnname": "Ftreesit_parser_language",
            "intspec": "0",
            "lname": "treesit-parser-language",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_parser_language"
        },
        {
            "args": [
                "buffer",
                "language",
                "tag"
            ],
            "attributes": null,
            "doc": "Return BUFFER's parser list, filtered by LANGUAGE and TAG.\n\nBUFFER defaults to the current buffer.  If that buffer is an indirect\nbuffer, its base buffer is used instead.  That is, indirect buffers\nuse their base buffer's parsers.\n\nIf LANGUAGE is non-nil, only return parsers for that language.\n\nThe returned list only contain parsers with TAG.  TAG defaults to nil.\nIf TAG is t, include parsers in the returned list regardless of their\ntag.",
            "fnname": "Ftreesit_parser_list",
            "intspec": "0",
            "lname": "treesit-parser-list",
            "maxargs": 3,
            "minargs": 0,
            "path": "treesit.c",
            "sname": "Streesit_parser_list"
        },
        {
            "args": [
                "parser"
            ],
            "attributes": null,
            "doc": "Return the list of after-change notifier functions for PARSER.",
            "fnname": "Ftreesit_parser_notifiers",
            "intspec": "0",
            "lname": "treesit-parser-notifiers",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_parser_notifiers"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a tree-sitter parser.",
            "fnname": "Ftreesit_parser_p",
            "intspec": "0",
            "lname": "treesit-parser-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_parser_p"
        },
        {
            "args": [
                "parser",
                "function"
            ],
            "attributes": null,
            "doc": "Remove FUNCTION from the list of PARSER's after-change notifiers.\n  FUNCTION must be a function symbol, rather than a lambda form.\nFUNCTION should take 2 arguments, RANGES and PARSER.  RANGES is a list\nof cons of the form (START . END), where START and END are buffer\npositions.  PARSER is the parser issuing the notification.",
            "fnname": "Ftreesit_parser_remove_notifier",
            "intspec": "0",
            "lname": "treesit-parser-remove-notifier",
            "maxargs": 2,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_parser_remove_notifier"
        },
        {
            "args": [
                "parser"
            ],
            "attributes": null,
            "doc": "Return the root node of PARSER.",
            "fnname": "Ftreesit_parser_root_node",
            "intspec": "0",
            "lname": "treesit-parser-root-node",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_parser_root_node"
        },
        {
            "args": [
                "parser",
                "ranges"
            ],
            "attributes": null,
            "doc": "Limit PARSER to RANGES.\n\nRANGES is a list of (BEG . END), each (BEG . END) defines a region in\nwhich the parser should operate.  Regions must not overlap, and the\nregions should come in order in the list.  Signal\n`treesit-set-range-error' if the argument is invalid, or something\nelse went wrong.  If RANGES is nil, the PARSER is to parse the whole\nbuffer.",
            "fnname": "Ftreesit_parser_set_included_ranges",
            "intspec": "0",
            "lname": "treesit-parser-set-included-ranges",
            "maxargs": 2,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_parser_set_included_ranges"
        },
        {
            "args": [
                "parser"
            ],
            "attributes": null,
            "doc": "Return PARSER's tag.",
            "fnname": "Ftreesit_parser_tag",
            "intspec": "0",
            "lname": "treesit-parser-tag",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_parser_tag"
        },
        {
            "args": [
                "pattern"
            ],
            "attributes": null,
            "doc": "Expand PATTERN to its string form.\n\nPATTERN can be\n\n    :anchor\n    :?\n    :*\n    :+\n    :equal\n    :match\n    (TYPE PATTERN...)\n    [PATTERN...]\n    FIELD-NAME:\n    @CAPTURE-NAME\n    (_)\n    _\n    \\\"TYPE\\\"\n\nSee Info node `(elisp)Pattern Matching' for detailed explanation.",
            "fnname": "Ftreesit_pattern_expand",
            "intspec": "0",
            "lname": "treesit-pattern-expand",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_pattern_expand"
        },
        {
            "args": [
                "node",
                "query",
                "beg",
                "end",
                "node_only"
            ],
            "attributes": null,
            "doc": "Query NODE with patterns in QUERY.\n\nReturn a list of (CAPTURE_NAME . NODE).  CAPTURE_NAME is the name\nassigned to the node in PATTERN.  NODE is the captured node.\n\nQUERY is either a string query, a sexp query, or a compiled query.\nSee Info node `(elisp)Pattern Matching' for how to write a query in\neither string or sexp form.  When using repeatedly, a compiled query\nis much faster than a string or sexp one, so it is recommend to\ncompile your query if it will be used repeatedly.\n\nBEG and END, if both non-nil, specify the region of buffer positions\nin which the query is executed.  Any matching node whose span overlaps\nwith the region between BEG and END are captured, it doesn't have to\nbe completely in the region.\n\nIf NODE-ONLY is non-nil, return a list of nodes.\n\nBesides a node, NODE can also be a parser, in which case the root node\nof that parser is used.\nNODE can also be a language symbol, in which case the root node of a\nparser for that language is used.  If such a parser doesn't exist, it\nis created.\n\nSignal `treesit-query-error' if QUERY is malformed or something else\ngoes wrong.  You can use `treesit-query-validate' to validate and debug\nthe query.",
            "fnname": "Ftreesit_query_capture",
            "intspec": "0",
            "lname": "treesit-query-capture",
            "maxargs": 5,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_query_capture"
        },
        {
            "args": [
                "language",
                "query",
                "eager"
            ],
            "attributes": null,
            "doc": "Compile QUERY to a compiled query.\n\nQuerying with a compiled query is much faster than an uncompiled one.\nLANGUAGE is the language this query is for.\n\nIf EAGER is non-nil, immediately load LANGUAGE and compile the query.\nOtherwise defer the compilation until the query is first used.\n\nSignal `treesit-query-error' if QUERY is malformed or something else\ngoes wrong.  (This only happens if EAGER is non-nil.)\nYou can use `treesit-query-validate' to validate and debug a query.",
            "fnname": "Ftreesit_query_compile",
            "intspec": "0",
            "lname": "treesit-query-compile",
            "maxargs": 3,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_query_compile"
        },
        {
            "args": [
                "query"
            ],
            "attributes": null,
            "doc": "Expand sexp QUERY to its string form.\n\nA PATTERN in QUERY can be\n\n    :anchor\n    :?\n    :*\n    :+\n    :equal\n    :match\n    (TYPE PATTERN...)\n    [PATTERN...]\n    FIELD-NAME:\n    @CAPTURE-NAME\n    (_)\n    _\n    \\\"TYPE\\\"\n\nSee Info node `(elisp)Pattern Matching' for detailed explanation.",
            "fnname": "Ftreesit_query_expand",
            "intspec": "0",
            "lname": "treesit-query-expand",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_query_expand"
        },
        {
            "args": [
                "query"
            ],
            "attributes": null,
            "doc": "Return the language of QUERY.\nQUERY has to be a compiled query.",
            "fnname": "Ftreesit_query_language",
            "intspec": "0",
            "lname": "treesit-query-language",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_query_language"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a generic tree-sitter query.",
            "fnname": "Ftreesit_query_p",
            "intspec": "0",
            "lname": "treesit-query-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_query_p"
        },
        {
            "args": [
                "start",
                "predicate",
                "backward",
                "all"
            ],
            "attributes": null,
            "doc": "Search for node matching PREDICATE in the parse tree of START.\n\nStart traversing the tree from node START, and match PREDICATE with\neach node (except START itself) along the way.\n\nPREDICATE can be a regexp string that matches against each node's\ntype, a predicate function, and more.  See `treesit-thing-settings'\nfor the possible predicates.  PREDICATE can also be a thing defined in\n`treesit-thing-settings'.  Using an undefined thing doesn't raise an\nerror.\n\nBy default, only search for named nodes, but if ALL is non-nil, search\nfor all nodes.  If BACKWARD is non-nil, search backwards.\n\nReturn the first matched node, or nil if none matches.\n\nFor a tree like below, where START is marked by S, traverse as\nnumbered from 1 to 12:\n\n                12\n                |\n       S--------3----------11\n       |        |          |\n  o--o-+--o  1--+--2    6--+-----10\n  |  |                  |        |\n  o  o                +-+-+   +--+--+\n                      |   |   |  |  |\n                      4   5   7  8  9\n\nNote that this function doesn't traverse the subtree of START, and it\nalways traverse leaf nodes first, then upwards.",
            "fnname": "Ftreesit_search_forward",
            "intspec": "0",
            "lname": "treesit-search-forward",
            "maxargs": 4,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_search_forward"
        },
        {
            "args": [
                "node",
                "predicate",
                "backward",
                "all",
                "depth"
            ],
            "attributes": null,
            "doc": "Traverse the parse tree of NODE depth-first using PREDICATE.\n\nTraverse the subtree of NODE, and match PREDICATE with each node along\nthe way.\n\nPREDICATE can be a regexp string that matches against each node's\ntype, a predicate function, and more.  See `treesit-thing-settings'\nfor the possible predicates.  PREDICATE can also be a thing defined in\n`treesit-thing-settings'.  Using an undefined thing doesn't raise an\nerror.\n\nBy default, only traverse named nodes, but if ALL is non-nil, traverse\nall nodes.  If BACKWARD is non-nil, traverse backwards.  If DEPTH is\nnon-nil, only traverse nodes up to that number of levels down in the\ntree.  If DEPTH is nil, default to 1000.\n\nReturn the first matched node, or nil if none matches.",
            "fnname": "Ftreesit_search_subtree",
            "intspec": "0",
            "lname": "treesit-search-subtree",
            "maxargs": 5,
            "minargs": 2,
            "path": "treesit.c",
            "sname": "Streesit_search_subtree"
        },
        {
            "args": [
                "node"
            ],
            "attributes": null,
            "doc": "Return information about the subtree of NODE.\n\nReturn a list (MAX-DEPTH MAX-WIDTH COUNT), where MAX-DEPTH is the\nmaximum depth of the subtree, MAX-WIDTH is the maximum number of\ndirect children of nodes in the subtree, and COUNT is the number of\nnodes in the subtree, including NODE.",
            "fnname": "Ftreesit_subtree_stat",
            "intspec": "0",
            "lname": "treesit-subtree-stat",
            "maxargs": 1,
            "minargs": 1,
            "path": "treesit.c",
            "sname": "Streesit_subtree_stat"
        },
        {
            "args": [
                "arg",
                "divisor"
            ],
            "attributes": null,
            "doc": "Truncate a floating point number to an int.\nRounds ARG toward zero.\nWith optional DIVISOR, truncate ARG/DIVISOR.",
            "fnname": "Ftruncate",
            "intspec": "0",
            "lname": "truncate",
            "maxargs": 2,
            "minargs": 1,
            "path": "floatfns.c",
            "sname": "Struncate"
        },
        {
            "args": [
                "string",
                "collection",
                "predicate"
            ],
            "attributes": null,
            "doc": "Return longest common substring of all completions of STRING in COLLECTION.\n\nTest each possible completion specified by COLLECTION\nto see if it begins with STRING.  The possible completions may be\nstrings or symbols.  Symbols are converted to strings before testing,\nby using `symbol-name'.\n\nIf no possible completions match, the function returns nil; if\nthere's just one exact match, it returns t; otherwise it returns\nthe longest initial substring common to all possible completions\nthat begin with STRING.\n\nIf COLLECTION is an alist, the keys (cars of elements) are the\npossible completions.  If an element is not a cons cell, then the\nelement itself is a possible completion.\nIf COLLECTION is a hash-table, all the keys that are either strings\nor symbols are the possible completions.\nIf COLLECTION is an obarray, the names of all symbols in the obarray\nare the possible completions.\n\nCOLLECTION can also be a function to do the completion itself.\nIt receives three arguments: STRING, PREDICATE and nil.\nWhatever it returns becomes the value of `try-completion'.\n\nIf optional third argument PREDICATE is non-nil, it must be a function\nof one or two arguments, and is used to test each possible completion.\nA possible completion is accepted only if PREDICATE returns non-nil.\n\nThe argument given to PREDICATE is either a string or a cons cell (whose\ncar is a string) from the alist, or a symbol from the obarray.\nIf COLLECTION is a hash-table, PREDICATE is called with two arguments:\nthe string key and the associated value.\n\nTo be acceptable, a possible completion must also match all the regexps\nin `completion-regexp-list' (unless COLLECTION is a function, in\nwhich case that function should itself handle `completion-regexp-list').\n\nIf `completion-ignore-case' is non-nil, possible completions are matched\nwhile ignoring letter-case, but no guarantee is made about the letter-case\nof the return value, except that it comes either from the user's input\nor from one of the possible completions.",
            "fnname": "Ftry_completion",
            "intspec": "0",
            "lname": "try-completion",
            "maxargs": 3,
            "minargs": 2,
            "path": "minibuf.c",
            "sname": "Stry_completion"
        },
        {
            "args": [
                "tty"
            ],
            "attributes": null,
            "doc": "Return the output buffer size of TTY.\n\nTTY may be a terminal object, a frame, or nil (meaning the selected\nframe's terminal).\n\nA value of zero means TTY uses the system's default value.",
            "fnname": "Ftty__output_buffer_size",
            "intspec": "0",
            "lname": "tty--output-buffer-size",
            "maxargs": 1,
            "minargs": 0,
            "path": "term.c",
            "sname": "Stty__output_buffer_size"
        },
        {
            "args": [
                "size",
                "tty"
            ],
            "attributes": null,
            "doc": "Set the output buffer size for a TTY.\n\nSIZE zero means use the system's default value.  If SIZE is\nnon-zero, this also avoids flushing the output stream.\n\nTTY may be a terminal object, a frame, or nil (meaning the selected\nframe's terminal).\n\nThis function temporarily suspends and resumes the terminal\ndevice.",
            "fnname": "Ftty__set_output_buffer_size",
            "intspec": "0",
            "lname": "tty--set-output-buffer-size",
            "maxargs": 2,
            "minargs": 1,
            "path": "term.c",
            "sname": "Stty__set_output_buffer_size"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the number of colors supported by the tty device TERMINAL.\n\nTERMINAL can be a terminal object, a frame, or nil (meaning the\nselected frame's terminal).  This function always returns 0 if\nTERMINAL does not refer to a text terminal.",
            "fnname": "Ftty_display_color_cells",
            "intspec": "0",
            "lname": "tty-display-color-cells",
            "maxargs": 1,
            "minargs": 0,
            "path": "term.c",
            "sname": "Stty_display_color_cells"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return non-nil if the tty device TERMINAL can display colors.\n\nTERMINAL can be a terminal object, a frame, or nil (meaning the\nselected frame's terminal).  This function always returns nil if\nTERMINAL does not refer to a text terminal.",
            "fnname": "Ftty_display_color_p",
            "intspec": "0",
            "lname": "tty-display-color-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "term.c",
            "sname": "Stty_display_color_p"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Declare that the tty used by TERMINAL does not handle underlining.\nThis is used to override the terminfo data, for certain terminals that\ndo not really do underlining, but say that they do.  This function has\nno effect if used on a non-tty terminal.\n\nTERMINAL can be a terminal object, a frame or nil (meaning the\nselected frame's terminal).  This function always returns nil if\nTERMINAL does not refer to a text terminal.",
            "fnname": "Ftty_no_underline",
            "intspec": "0",
            "lname": "tty-no-underline",
            "maxargs": 1,
            "minargs": 0,
            "path": "term.c",
            "sname": "Stty_no_underline"
        },
        {
            "args": [
                "suppress"
            ],
            "attributes": null,
            "doc": "Suppress/allow boldness of faces with inverse default colors.\nSUPPRESS non-nil means suppress it.\nThis affects bold faces on TTYs whose foreground is the default background\ncolor of the display and whose background is the default foreground color.\nFor such faces, the bold face attribute is ignored if this variable\nis non-nil.",
            "fnname": "Ftty_suppress_bold_inverse_default_colors",
            "intspec": "0",
            "lname": "tty-suppress-bold-inverse-default-colors",
            "maxargs": 1,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Stty_suppress_bold_inverse_default_colors"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the topmost terminal frame on TERMINAL.\nTERMINAL can be a terminal object, a frame or nil (meaning the\nselected frame's terminal).  This function returns nil if TERMINAL\ndoes not refer to a text terminal.  Otherwise, it returns the\ntop-most frame on the text terminal.",
            "fnname": "Ftty_top_frame",
            "intspec": "0",
            "lname": "tty-top-frame",
            "maxargs": 1,
            "minargs": 0,
            "path": "term.c",
            "sname": "Stty_top_frame"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the type of the tty device that TERMINAL uses.\nReturns nil if TERMINAL is not on a tty device.\n\nTERMINAL can be a terminal object, a frame, or nil (meaning the\nselected frame's terminal).",
            "fnname": "Ftty_type",
            "intspec": "0",
            "lname": "tty-type",
            "maxargs": 1,
            "minargs": 0,
            "path": "term.c",
            "sname": "Stty_type"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return a symbol representing the type of OBJECT.\nThe symbol returned names the object's basic type;\nfor example, (type-of 1) returns `integer'.",
            "fnname": "Ftype_of",
            "intspec": "0",
            "lname": "type-of",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Stype_of"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Mark a boundary between units of undo.\nAn undo command will stop at this point,\nbut another undo command will undo to the previous boundary.",
            "fnname": "Fundo_boundary",
            "intspec": "0",
            "lname": "undo-boundary",
            "maxargs": 0,
            "minargs": 0,
            "path": "undo.c",
            "sname": "Sundo_boundary"
        },
        {
            "args": [
                "start",
                "end",
                "coding_system",
                "count",
                "string"
            ],
            "attributes": null,
            "doc": "Return position of first un-encodable character in a region.\nSTART and END specify the region and CODING-SYSTEM specifies the\nencoding to check.  Return nil if CODING-SYSTEM does encode the region.\n\nIf optional 4th argument COUNT is non-nil, it specifies at most how\nmany un-encodable characters to search.  In this case, the value is a\nlist of positions.\n\nIf optional 5th argument STRING is non-nil, it is a string to search\nfor un-encodable characters.  In that case, START and END are indexes\nto the string and treated as in `substring'.",
            "fnname": "Funencodable_char_position",
            "intspec": "0",
            "lname": "unencodable-char-position",
            "maxargs": 5,
            "minargs": 3,
            "path": "coding.c",
            "sname": "Sunencodable_char_position"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return a directly usable directory name somehow associated with FILENAME.\nA `directly usable' directory name is one that may be used without the\nintervention of any file name handler.\nIf FILENAME is a directly usable file itself, return\n\\(file-name-as-directory FILENAME).\nIf FILENAME refers to a file which is not accessible from a local process,\nthen this should return nil.\nThe `call-process' and `start-process' functions use this function to\nget a current directory to run processes in.",
            "fnname": "Funhandled_file_name_directory",
            "intspec": "0",
            "lname": "unhandled-file-name-directory",
            "maxargs": 1,
            "minargs": 1,
            "path": "fileio.c",
            "sname": "Sunhandled_file_name_directory"
        },
        {
            "args": [
                "ch"
            ],
            "attributes": null,
            "doc": "Convert the byte CH to multibyte character.",
            "fnname": "Funibyte_char_to_multibyte",
            "intspec": "0",
            "lname": "unibyte-char-to-multibyte",
            "maxargs": 1,
            "minargs": 1,
            "path": "character.c",
            "sname": "Sunibyte_char_to_multibyte"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Concatenate all the argument bytes and make the result a unibyte string.\nusage: (unibyte-string &rest BYTES)",
            "fnname": "Funibyte_string",
            "intspec": "0",
            "lname": "unibyte-string",
            "maxargs": -1,
            "minargs": 0,
            "path": "character.c",
            "sname": "Sunibyte_string"
        },
        {
            "args": [
                "prop"
            ],
            "attributes": null,
            "doc": "Return a char-table for Unicode character property PROP.\nUse `get-unicode-property-internal' and\n`put-unicode-property-internal' instead of `aref' and `aset' to get\nand put an element value.",
            "fnname": "Funicode_property_table_internal",
            "intspec": "0",
            "lname": "unicode-property-table-internal",
            "maxargs": 1,
            "minargs": 1,
            "path": "chartab.c",
            "sname": "Sunicode_property_table_internal"
        },
        {
            "args": [
                "charset",
                "unify_map",
                "deunify"
            ],
            "attributes": null,
            "doc": "Unify characters of CHARSET with Unicode.\nThis means reading the relevant file and installing the table defined\nby CHARSET's `:unify-map' property.\n\nOptional second arg UNIFY-MAP is a file name string or a vector.  It has\nthe same meaning as the `:unify-map' attribute in the function\n`define-charset' (which see).\n\nOptional third argument DEUNIFY, if non-nil, means to de-unify CHARSET.",
            "fnname": "Funify_charset",
            "intspec": "0",
            "lname": "unify-charset",
            "maxargs": 3,
            "minargs": 1,
            "path": "charset.c",
            "sname": "Sunify_charset"
        },
        {
            "args": [
                "name",
                "obarray"
            ],
            "attributes": null,
            "doc": "Delete the symbol named NAME, if any, from OBARRAY.\nThe value is t if a symbol was found and deleted, nil otherwise.\nNAME may be a string or a symbol.  If it is a symbol, that symbol\nis deleted, if it belongs to OBARRAY--no other symbol is deleted.\nOBARRAY, if nil, defaults to the value of the variable `obarray'.\nusage: (unintern NAME OBARRAY)",
            "fnname": "Funintern",
            "intspec": "0",
            "lname": "unintern",
            "maxargs": 2,
            "minargs": 1,
            "path": "lread.c",
            "sname": "Sunintern"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Tell Unix to finish all pending disk updates.",
            "fnname": "Funix_sync",
            "intspec": "",
            "lname": "unix-sync",
            "maxargs": 0,
            "minargs": 0,
            "path": "fileio.c",
            "sname": "Sunix_sync"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Unlock the file visited in the current buffer.\nIf the buffer is not modified, this does nothing because the file\nshould not be locked in that case.  It also does nothing if the\ncurrent buffer is not visiting a file, or is not locked.  Handles file\nsystem errors by calling `display-warning' and continuing as if the\nerror did not occur.",
            "fnname": "Funlock_buffer",
            "intspec": "0",
            "lname": "unlock-buffer",
            "maxargs": 0,
            "minargs": 0,
            "path": "filelock.c",
            "sname": "Sunlock_buffer"
        },
        {
            "args": [
                "file"
            ],
            "attributes": null,
            "doc": "Unlock FILE.",
            "fnname": "Funlock_file",
            "intspec": "0",
            "lname": "unlock-file",
            "maxargs": 1,
            "minargs": 1,
            "path": "filelock.c",
            "sname": "Sunlock_file"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "Do BODYFORM, protecting with UNWINDFORMS.\nIf BODYFORM completes normally, its value is returned\nafter executing the UNWINDFORMS.\nIf BODYFORM exits nonlocally, the UNWINDFORMS are executed anyway.\nusage: (unwind-protect BODYFORM UNWINDFORMS...)",
            "fnname": "Funwind_protect",
            "intspec": "0",
            "lname": "unwind-protect",
            "maxargs": -2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Sunwind_protect"
        },
        {
            "args": [
                "obj"
            ],
            "attributes": null,
            "doc": "Convert argument to upper case and return that.\nThe argument may be a character or string.  The result has the same\ntype.  (See `downcase' for further details about the type.)\n\nThe argument object is not altered--the value is a copy.  If argument\nis a character, characters which map to multiple code points when\ncased, e.g. \ufb01, are returned unchanged.\n\nSee also `capitalize', `downcase' and `upcase-initials'.",
            "fnname": "Fupcase",
            "intspec": "0",
            "lname": "upcase",
            "maxargs": 1,
            "minargs": 1,
            "path": "casefiddle.c",
            "sname": "Supcase"
        },
        {
            "args": [
                "obj"
            ],
            "attributes": null,
            "doc": "Convert the initial of each word in the argument to upper case.\nThis means that each word's first character is converted to either\ntitle case or upper case, and the rest are left unchanged.\n\nThe argument may be a character or string.  The result has the same\ntype.  (See `downcase' for further details about the type.)\n\nThe argument object is not altered--the value is a copy.  If argument\nis a character, characters which map to multiple code points when\ncased, e.g. \ufb01, are returned unchanged.",
            "fnname": "Fupcase_initials",
            "intspec": "0",
            "lname": "upcase-initials",
            "maxargs": 1,
            "minargs": 1,
            "path": "casefiddle.c",
            "sname": "Supcase_initials"
        },
        {
            "args": [
                "beg",
                "end",
                "region_noncontiguous_p"
            ],
            "attributes": null,
            "doc": "Upcase the initial of each word in the region.\nThis means that each word's first character is converted to either\ntitle case or upper case, and the rest are left unchanged.\nIn programs, give two arguments, the starting and ending\ncharacter positions to operate on.",
            "fnname": "Fupcase_initials_region",
            "intspec": "(list (region-beginning) (region-end) (region-noncontiguous-p))",
            "lname": "upcase-initials-region",
            "maxargs": 3,
            "minargs": 2,
            "path": "casefiddle.c",
            "sname": "Supcase_initials_region"
        },
        {
            "args": [
                "beg",
                "end",
                "region_noncontiguous_p"
            ],
            "attributes": null,
            "doc": "Convert the region to upper case.  In programs, wants two arguments.\nThese arguments specify the starting and ending character numbers of\nthe region to operate on.  When used as a command, the text between\npoint and the mark is operated on.\nSee also `capitalize-region'.",
            "fnname": "Fupcase_region",
            "intspec": "(list (region-beginning) (region-end) (region-noncontiguous-p))",
            "lname": "upcase-region",
            "maxargs": 3,
            "minargs": 2,
            "path": "casefiddle.c",
            "sname": "Supcase_region"
        },
        {
            "args": [
                "arg"
            ],
            "attributes": null,
            "doc": "Convert to upper case from point to end of word, moving over.\n\nIf point is in the middle of a word, the part of that word before point\nis ignored when moving forward.\n\nWith negative argument, convert previous words but do not move.\nSee also `capitalize-word'.",
            "fnname": "Fupcase_word",
            "intspec": "p",
            "lname": "upcase-word",
            "maxargs": 1,
            "minargs": 1,
            "path": "casefiddle.c",
            "sname": "Supcase_word"
        },
        {
            "args": [
                "keymap"
            ],
            "attributes": null,
            "doc": "Select KEYMAP as the global keymap.",
            "fnname": "Fuse_global_map",
            "intspec": "0",
            "lname": "use-global-map",
            "maxargs": 1,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Suse_global_map"
        },
        {
            "args": [
                "keymap"
            ],
            "attributes": null,
            "doc": "Select KEYMAP as the local keymap.\nIf KEYMAP is nil, that means no local keymap.",
            "fnname": "Fuse_local_map",
            "intspec": "0",
            "lname": "use-local-map",
            "maxargs": 1,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Suse_local_map"
        },
        {
            "args": [
                "uid"
            ],
            "attributes": null,
            "doc": "Return the full name of the user logged in, as a string.\nIf the full name corresponding to Emacs's userid is not known,\nreturn \"unknown\".\n\nIf optional argument UID is an integer, return the full name\nof the user with that uid, or nil if there is no such user.\nIf UID is a string, return the full name of the user with that login\nname, or nil if there is no such user.\n\nIf the full name includes commas, remove everything starting with\nthe first comma, because the \\\\='gecos\\\\=' field of the \\\\='/etc/passwd\\\\=' file\nis in general a comma-separated list.",
            "fnname": "Fuser_full_name",
            "intspec": "0",
            "lname": "user-full-name",
            "maxargs": 1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Suser_full_name"
        },
        {
            "args": [
                "uid"
            ],
            "attributes": null,
            "doc": "Return the name under which the user logged in, as a string.\nThis is based on the effective uid, not the real uid.\nAlso, if the environment variables LOGNAME or USER are set,\nthat determines the value of this function.\n\nIf optional argument UID is an integer, return the login name\nof the user with that uid, or nil if there is no such user.",
            "fnname": "Fuser_login_name",
            "intspec": "0",
            "lname": "user-login-name",
            "maxargs": 1,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Suser_login_name"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a module user pointer.",
            "fnname": "Fuser_ptrp",
            "intspec": "0",
            "lname": "user-ptrp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Suser_ptrp"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the name of the user's real uid, as a string.\nThis ignores the environment variables LOGNAME and USER, so it differs from\n`user-login-name' when running under `su'.",
            "fnname": "Fuser_real_login_name",
            "intspec": "0",
            "lname": "user-real-login-name",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Suser_real_login_name"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the real uid of Emacs, as an integer.",
            "fnname": "Fuser_real_uid",
            "intspec": "0",
            "lname": "user-real-uid",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Suser_real_uid"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the effective uid of Emacs, as an integer.",
            "fnname": "Fuser_uid",
            "intspec": "0",
            "lname": "user-uid",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Suser_uid"
        },
        {
            "args": [
                "variable"
            ],
            "attributes": null,
            "doc": "Return a value indicating where VARIABLE's current binding comes from.\nIf the current binding is buffer-local, the value is the current buffer.\nIf the current binding is global (the default), the value is nil.",
            "fnname": "Fvariable_binding_locus",
            "intspec": "0",
            "lname": "variable-binding-locus",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Svariable_binding_locus"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Concatenate all the arguments and make the result a vector.\nThe result is a vector whose elements are the elements of all the arguments.\nEach argument may be a list, vector or string.\nusage: (vconcat &rest SEQUENCES)",
            "fnname": "Fvconcat",
            "intspec": "0",
            "lname": "vconcat",
            "maxargs": -1,
            "minargs": 0,
            "path": "fns.c",
            "sname": "Svconcat"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a newly created vector with specified arguments as elements.\nAllows any number of arguments, including zero.\nusage: (vector &rest OBJECTS)",
            "fnname": "Fvector",
            "intspec": "0",
            "lname": "vector",
            "maxargs": -1,
            "minargs": 0,
            "path": "alloc.c",
            "sname": "Svector"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a char-table or vector.",
            "fnname": "Fvector_or_char_table_p",
            "intspec": "0",
            "lname": "vector-or-char-table-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Svector_or_char_table_p"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a vector.",
            "fnname": "Fvectorp",
            "intspec": "0",
            "lname": "vectorp",
            "maxargs": 1,
            "minargs": 1,
            "path": "data.c",
            "sname": "Svectorp"
        },
        {
            "args": [
                "buf"
            ],
            "attributes": null,
            "doc": "Return t if last mod time of BUF's visited file matches what BUF records.\nThis means that the file has not been changed since it was visited or saved.\nIf BUF is omitted or nil, it defaults to the current buffer.\nSee Info node `(elisp)Modification Time' for more details.",
            "fnname": "Fverify_visited_file_modtime",
            "intspec": "0",
            "lname": "verify-visited-file-modtime",
            "maxargs": 1,
            "minargs": 0,
            "path": "fileio.c",
            "sname": "Sverify_visited_file_modtime"
        },
        {
            "args": [
                "lines",
                "window",
                "cur_col"
            ],
            "attributes": null,
            "doc": "Move point to start of the screen line LINES lines down.\nIf LINES is negative, this means moving up.\n\nThis function is an ordinary cursor motion function\nwhich calculates the new position based on how text would be displayed.\nThe new position may be the start of a line,\nor the start of a continuation line,\nor the start of the visible portion of a horizontally-scrolled line.\n\nThe function returns number of screen lines moved over;\nthat usually equals LINES, but may be closer to zero if\nbeginning or end of buffer was reached.\n\nThe optional second argument WINDOW specifies the window to use for\nparameters such as width, horizontal scrolling, and so on.\nThe default is to use the selected window's parameters.\n\nIf LINES is zero, point will move to the first visible character on\nthe current screen line.\n\nLINES can optionally take the form (COLS . LINES), in which case the\nmotion will stop at the COLSth column from the visual start of the\nline (if such column exists on that line, that is).  If the line is\nscrolled horizontally, COLS is interpreted visually, i.e., as addition\nto the columns of text beyond the left edge of the window.\nIf LINES is a cons cell, its car COLS can be a float, which allows\nspecifying an accurate position of point on a screen line that mixes\nfonts or uses variable-pitch font: COLS is interpreted in units of the\ncanonical character width, and is internally converted to pixel units;\npoint will then stop at the position closest to that pixel coordinate.\nThe cdr of the cons, LINES, must be an integer; if it is zero, this\nfunction moves point horizontally in the current screen line, to the\nposition specified by COLS.\n\nThe optional third argument CUR-COL specifies the horizontal\nwindow-relative coordinate of point, in units of frame's canonical\ncharacter width, where the function is invoked.  If this argument is\nomitted or nil, the function will determine the point coordinate by\ngoing back to the beginning of the line.\n\n`vertical-motion' always uses the current buffer, regardless of which\nbuffer is displayed in WINDOW.  This is consistent with other cursor\nmotion functions and makes it possible to use `vertical-motion' in any\nbuffer, whether or not it is currently displayed in some window.",
            "fnname": "Fvertical_motion",
            "intspec": "0",
            "lname": "vertical-motion",
            "maxargs": 3,
            "minargs": 1,
            "path": "indent.c",
            "sname": "Svertical_motion"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return a list of all frames now \\\"visible\\\" (being updated).",
            "fnname": "Fvisible_frame_list",
            "intspec": "0",
            "lname": "visible-frame-list",
            "maxargs": 0,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Svisible_frame_list"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the current buffer's recorded visited file modification time.\nReturn a Lisp timestamp (as in `current-time') if the current buffer\nhas a recorded file modification time, 0 if it doesn't, and -1 if the\nvisited file doesn't exist.\nSee Info node `(elisp)Modification Time' for more details.",
            "fnname": "Fvisited_file_modtime",
            "intspec": "0",
            "lname": "visited-file-modtime",
            "maxargs": 0,
            "minargs": 0,
            "path": "fileio.c",
            "sname": "Svisited_file_modtime"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "This gets the clipboard data in text format.",
            "fnname": "Fw16_get_clipboard_data",
            "intspec": "0",
            "lname": "w16-get-clipboard-data",
            "maxargs": 1,
            "minargs": 0,
            "path": "w16select.c",
            "sname": "Sw16_get_clipboard_data"
        },
        {
            "args": [
                "selection",
                "terminal"
            ],
            "attributes": null,
            "doc": "Whether there is an owner for the given X selection.\nSELECTION should be the name of the selection in question, typically\none of the symbols `PRIMARY', `SECONDARY', or `CLIPBOARD'.  (X expects\nthese literal upper-case names.)  The symbol nil is the same as\n`PRIMARY', and t is the same as `SECONDARY'.\n\nTERMINAL should be a terminal object or a frame specifying the X\nserver to query.  If omitted or nil, that stands for the selected\nframe's display, or the first available X display.",
            "fnname": "Fw16_selection_exists_p",
            "intspec": "0",
            "lname": "w16-selection-exists-p",
            "maxargs": 2,
            "minargs": 0,
            "path": "w16select.c",
            "sname": "Sw16_selection_exists_p"
        },
        {
            "args": [
                "string",
                "frame"
            ],
            "attributes": null,
            "doc": "This sets the clipboard data to the given text.",
            "fnname": "Fw16_set_clipboard_data",
            "intspec": "0",
            "lname": "w16-set-clipboard-data",
            "maxargs": 2,
            "minargs": 1,
            "path": "w16select.c",
            "sname": "Sw16_set_clipboard_data"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return non-nil when a menu-bar menu is being used.\nInternal use only.",
            "fnname": "Fw32__menu_bar_in_use",
            "intspec": "0",
            "lname": "w32--menu-bar-in-use",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32fns.c",
            "sname": "Sw32__menu_bar_in_use"
        },
        {
            "args": [
                "program"
            ],
            "attributes": null,
            "doc": "Return the type of an MS-Windows PROGRAM.\n\nKnowing the type of an executable could be useful for formatting\nfile names passed to it or for quoting its command-line arguments.\n\nPROGRAM should specify an executable file, including the extension.\n\nThe value is one of the following:\n\n`dos'        -- a DOS .com program or some other non-PE executable\n`cygwin'     -- a Cygwin program that depends on Cygwin DLL\n`msys'       -- an MSYS 1.x or MSYS2 program\n`w32-native' -- a native Windows application\n`unknown'    -- a file that doesn't exist, or cannot be open, or whose\n                name is not encodable in the current ANSI codepage.\n\nNote that for .bat and .cmd batch files the function returns the type\nof their command interpreter, as specified by the \\\"COMSPEC\\\"\nenvironment variable.\n\nThis function returns `unknown' for programs whose file names\ninclude characters not supported by the current ANSI codepage, as\nsuch programs cannot be invoked by Emacs anyway.",
            "fnname": "Fw32_application_type",
            "intspec": "0",
            "lname": "w32-application-type",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32proc.c",
            "sname": "Sw32_application_type"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Get power status information from Windows system.\n\nThe following %-sequences are provided:\n%L AC line status (verbose)\n%B Battery status (verbose)\n%b Battery status, empty means high, `-' means low,\n   `!' means critical, and `+' means charging\n%p Battery load percentage\n%s Remaining time (to charge or discharge) in seconds\n%m Remaining time (to charge or discharge) in minutes\n%h Remaining time (to charge or discharge) in hours\n%t Remaining time (to charge or discharge) in the form `h:min'",
            "fnname": "Fw32_battery_status",
            "intspec": "0",
            "lname": "w32-battery-status",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32cygwinx.c",
            "sname": "Sw32_battery_status"
        },
        {
            "args": [
                "red",
                "green",
                "blue",
                "name"
            ],
            "attributes": null,
            "doc": "Convert RGB numbers to a Windows color reference and associate with NAME.\nThis adds or updates a named color to `w32-color-map', making it\navailable for use.  The original entry's RGB ref is returned, or nil\nif the entry is new.",
            "fnname": "Fw32_define_rgb_color",
            "intspec": "0",
            "lname": "w32-define-rgb-color",
            "maxargs": 4,
            "minargs": 4,
            "path": "w32fns.c",
            "sname": "Sw32_define_rgb_color"
        },
        {
            "args": [
                "display"
            ],
            "attributes": null,
            "doc": "Return a list of physical monitor attributes on the W32 display DISPLAY.\n\nThe optional argument DISPLAY specifies which display to ask about.\nDISPLAY should be either a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nInternal use only, use `display-monitor-attributes-list' instead.",
            "fnname": "Fw32_display_monitor_attributes_list",
            "intspec": "0",
            "lname": "w32-display-monitor-attributes-list",
            "maxargs": 1,
            "minargs": 0,
            "path": "w32fns.c",
            "sname": "Sw32_display_monitor_attributes_list"
        },
        {
            "args": [
                "frame",
                "type"
            ],
            "attributes": null,
            "doc": "Return edge coordinates of FRAME.\nFRAME must be a live frame and defaults to the selected one.  The return\nvalue is a list of the form (LEFT, TOP, RIGHT, BOTTOM).  All values are\nin pixels relative to the origin - the position (0, 0) - of FRAME's\ndisplay.\n\nIf optional argument TYPE is the symbol `outer-edges', return the outer\nedges of FRAME.  The outer edges comprise the decorations of the window\nmanager (like the title bar or external borders) as well as any external\nmenu or tool bar of FRAME.  If optional argument TYPE is the symbol\n`native-edges' or nil, return the native edges of FRAME.  The native\nedges exclude the decorations of the window manager and any external\nmenu or tool bar of FRAME.  If TYPE is the symbol `inner-edges', return\nthe inner edges of FRAME.  These edges exclude title bar, any borders,\nmenu bar or tool bar of FRAME.",
            "fnname": "Fw32_frame_edges",
            "intspec": "0",
            "lname": "w32-frame-edges",
            "maxargs": 2,
            "minargs": 0,
            "path": "w32fns.c",
            "sname": "Sw32_frame_edges"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return geometric attributes of FRAME.\nFRAME must be a live frame and defaults to the selected one.  The return\nvalue is an association list of the attributes listed below.  All height\nand width values are in pixels.\n\n`outer-position' is a cons of the outer left and top edges of FRAME\n  relative to the origin - the position (0, 0) - of FRAME's display.\n\n`outer-size' is a cons of the outer width and height of FRAME.  The\n  outer size includes the title bar and the external borders as well as\n  any menu and/or tool bar of frame.\n\n`external-border-size' is a cons of the horizontal and vertical width of\n  FRAME's external borders as supplied by the window manager.\n\n`title-bar-size' is a cons of the width and height of the title bar of\n  FRAME as supplied by the window manager.  If both of them are zero,\n  FRAME has no title bar.  If only the width is zero, Emacs was not\n  able to retrieve the width information.\n\n`menu-bar-external', if non-nil, means the menu bar is external (never\n  included in the inner edges of FRAME).\n\n`menu-bar-size' is a cons of the width and height of the menu bar of\n  FRAME.\n\n`tab-bar-size' is a cons of the width and height of the tab bar of\n  FRAME.\n\n`tool-bar-external', if non-nil, means the tool bar is external (never\n  included in the inner edges of FRAME).\n\n`tool-bar-position' tells on which side the tool bar on FRAME is and can\n  be one of `left', `top', `right' or `bottom'.  If this is nil, FRAME\n  has no tool bar.\n\n`tool-bar-size' is a cons of the width and height of the tool bar of\n  FRAME.\n\n`internal-border-width' is the width of the internal border of\n  FRAME.",
            "fnname": "Fw32_frame_geometry",
            "intspec": "0",
            "lname": "w32-frame-geometry",
            "maxargs": 1,
            "minargs": 0,
            "path": "w32fns.c",
            "sname": "Sw32_frame_geometry"
        },
        {
            "args": [
                "display"
            ],
            "attributes": null,
            "doc": "Return list of Emacs' frames, in Z (stacking) order.\nThe optional argument DISPLAY specifies which display to ask about.\nDISPLAY should be either a frame or a display name (a string).  If\nomitted or nil, that stands for the selected frame's display.\n\nAs a special case, if DISPLAY is non-nil and specifies a live frame,\nreturn the child frames of that frame in Z (stacking) order.\n\nFrames are listed from topmost (first) to bottommost (last).",
            "fnname": "Fw32_frame_list_z_order",
            "intspec": "0",
            "lname": "w32-frame-list-z-order",
            "maxargs": 1,
            "minargs": 0,
            "path": "w32fns.c",
            "sname": "Sw32_frame_list_z_order"
        },
        {
            "args": [
                "frame1",
                "frame2",
                "above"
            ],
            "attributes": null,
            "doc": "Restack FRAME1 below FRAME2.\nThis means that if both frames are visible and the display areas of\nthese frames overlap, FRAME2 (partially) obscures FRAME1.  If optional\nthird argument ABOVE is non-nil, restack FRAME1 above FRAME2.  This\nmeans that if both frames are visible and the display areas of these\nframes overlap, FRAME1 (partially) obscures FRAME2.\n\nThis may be thought of as an atomic action performed in two steps: The\nfirst step removes FRAME1's window-system window from the display.  The\nsecond step reinserts FRAME1's window below (above if ABOVE is true)\nthat of FRAME2.  Hence the position of FRAME2 in its display's Z\n\\(stacking) order relative to all other frames excluding FRAME1 remains\nunaltered.\n\nSome window managers may refuse to restack windows.",
            "fnname": "Fw32_frame_restack",
            "intspec": "0",
            "lname": "w32-frame-restack",
            "maxargs": 3,
            "minargs": 2,
            "path": "w32fns.c",
            "sname": "Sw32_frame_restack"
        },
        {
            "args": [
                "ignored"
            ],
            "attributes": null,
            "doc": "This gets the clipboard data in text format.",
            "fnname": "Fw32_get_clipboard_data",
            "intspec": "0",
            "lname": "w32-get-clipboard-data",
            "maxargs": 1,
            "minargs": 0,
            "path": "w32select.c",
            "sname": "Sw32_get_clipboard_data"
        },
        {
            "args": [
                "cp"
            ],
            "attributes": null,
            "doc": "Return charset ID corresponding to codepage CP.\nReturns nil if the codepage is not valid or its charset ID could\nnot be determined.\n\nNote that this function is only guaranteed to work with ANSI\ncodepages; most console codepages are not supported and will\nyield nil.",
            "fnname": "Fw32_get_codepage_charset",
            "intspec": "0",
            "lname": "w32-get-codepage-charset",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32proc.c",
            "sname": "Sw32_get_codepage_charset"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return current Windows codepage for console input.",
            "fnname": "Fw32_get_console_codepage",
            "intspec": "0",
            "lname": "w32-get-console-codepage",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32proc.c",
            "sname": "Sw32_get_console_codepage"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return current Windows codepage for console output.",
            "fnname": "Fw32_get_console_output_codepage",
            "intspec": "0",
            "lname": "w32-get-console-output-codepage",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32proc.c",
            "sname": "Sw32_get_console_output_codepage"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return Windows locale id for current locale setting.\nThis is a numerical value; use `w32-get-locale-info' to convert to a\nhuman-readable form.",
            "fnname": "Fw32_get_current_locale_id",
            "intspec": "0",
            "lname": "w32-get-current-locale-id",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32proc.c",
            "sname": "Sw32_get_current_locale_id"
        },
        {
            "args": [
                "userp"
            ],
            "attributes": null,
            "doc": "Return Windows locale id for default locale setting.\nBy default, the system default locale setting is returned; if the optional\nparameter USERP is non-nil, the user default locale setting is returned.\nThis is a numerical value; use `w32-get-locale-info' to convert to a\nhuman-readable form.",
            "fnname": "Fw32_get_default_locale_id",
            "intspec": "0",
            "lname": "w32-get-default-locale-id",
            "maxargs": 1,
            "minargs": 0,
            "path": "w32proc.c",
            "sname": "Sw32_get_default_locale_id"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return non-nil if IME is active, otherwise return nil.\n\nIME, the MS-Windows Input Method Editor, can be active or inactive.\nThis function returns non-nil if the IME is active, otherwise nil.",
            "fnname": "Fw32_get_ime_open_status",
            "intspec": "0",
            "lname": "w32-get-ime-open-status",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32fns.c",
            "sname": "Sw32_get_ime_open_status"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return current Windows keyboard language and layout.\nThe return value is the cons of the language id and the layout id.",
            "fnname": "Fw32_get_keyboard_layout",
            "intspec": "0",
            "lname": "w32-get-keyboard-layout",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32proc.c",
            "sname": "Sw32_get_keyboard_layout"
        },
        {
            "args": [
                "lcid",
                "longform"
            ],
            "attributes": null,
            "doc": "Return information about the Windows locale LCID.\nBy default, return a three letter locale code which encodes the default\nlanguage as the first two characters, and the country or regional variant\nas the third letter.  For example, ENU refers to `English (United States)',\nwhile ENC means `English (Canadian)'.\n\nIf the optional argument LONGFORM is t, the long form of the locale\nname is returned, e.g. `English (United States)' instead; if LONGFORM\nis a number, it is interpreted as an LCTYPE constant and the corresponding\nlocale information is returned.\n\nIf LCID (a 16-bit number) is not a valid locale, the result is nil.",
            "fnname": "Fw32_get_locale_info",
            "intspec": "0",
            "lname": "w32-get-locale-info",
            "maxargs": 2,
            "minargs": 1,
            "path": "w32proc.c",
            "sname": "Sw32_get_locale_info"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return list of all valid Windows codepages.",
            "fnname": "Fw32_get_valid_codepages",
            "intspec": "0",
            "lname": "w32-get-valid-codepages",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32proc.c",
            "sname": "Sw32_get_valid_codepages"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return list of Windows keyboard languages and layouts.\nThe return value is a list of pairs of language id and layout id.",
            "fnname": "Fw32_get_valid_keyboard_layouts",
            "intspec": "0",
            "lname": "w32-get-valid-keyboard-layouts",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32proc.c",
            "sname": "Sw32_get_valid_keyboard_layouts"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return list of all valid Windows locale ids.\nEach id is a numerical value; use `w32-get-locale-info' to convert to a\nhuman-readable form.",
            "fnname": "Fw32_get_valid_locale_ids",
            "intspec": "0",
            "lname": "w32-get-valid-locale-ids",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32proc.c",
            "sname": "Sw32_get_valid_locale_ids"
        },
        {
            "args": [
                "load_now"
            ],
            "attributes": null,
            "doc": "Test for presence of the Windows socket library `winsock'.\nReturns non-nil if winsock support is present, nil otherwise.\n\nIf the optional argument LOAD-NOW is non-nil, the winsock library is\nalso loaded immediately if not already loaded.  If winsock is loaded,\nthe winsock local hostname is returned (since this may be different from\nthe value of `system-name' and should supplant it), otherwise t is\nreturned to indicate winsock support is present.",
            "fnname": "Fw32_has_winsock",
            "intspec": "0",
            "lname": "w32-has-winsock",
            "maxargs": 1,
            "minargs": 0,
            "path": "w32proc.c",
            "sname": "Sw32_has_winsock"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return the long file name version of the full path of FILENAME.\nIf FILENAME does not exist, return nil.\nAll path elements in FILENAME are converted to their long names.",
            "fnname": "Fw32_long_file_name",
            "intspec": "0",
            "lname": "w32-long-file-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32proc.c",
            "sname": "Sw32_long_file_name"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return absolute position of mouse cursor in pixels.\nThe position is returned as a cons cell (X . Y) of the coordinates of\nthe mouse cursor position in pixels relative to a position (0, 0) of the\nselected frame's display.",
            "fnname": "Fw32_mouse_absolute_pixel_position",
            "intspec": "0",
            "lname": "w32-mouse-absolute-pixel-position",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32fns.c",
            "sname": "Sw32_mouse_absolute_pixel_position"
        },
        {
            "args": [
                "id"
            ],
            "attributes": null,
            "doc": "Remove the MS-Windows tray notification specified by its ID.",
            "fnname": "Fw32_notification_close",
            "intspec": "0",
            "lname": "w32-notification-close",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Sw32_notification_close"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Display an MS-Windows tray notification as specified by PARAMS.\n\nValue is the integer unique ID of the notification that can be used\nto remove the notification using `w32-notification-close', which see.\nIf the function fails, the return value is nil.\n\nTray notifications, a.k.a. \\\"taskbar messages\\\", are messages that\ninform the user about events unrelated to the current user activity,\nsuch as a significant system event, by briefly displaying informative\ntext in a balloon from an icon in the notification area of the taskbar.\n\nParameters in PARAMS are specified as keyword/value pairs.  All the\nparameters are optional, but if no parameters are specified, the\nfunction will do nothing and return nil.\n\nThe following parameters are supported:\n\n:icon ICON       -- Display ICON in the system tray.  If ICON is a string,\n                    it should specify a file name from which to load the\n                    icon; the specified file should be a .ico Windows icon\n                    file.  If ICON is not a string, or if this parameter\n                    is not specified, the standard Emacs icon will be used.\n\n:tip TIP         -- Use TIP as the tooltip for the notification.  If TIP\n                    is a string, this is the text of a tooltip that will\n                    be shown when the mouse pointer hovers over the tray\n                    icon added by the notification.  If TIP is not a\n                    string, or if this parameter is not specified, the\n                    default tooltip text is \\\"Emacs notification\\\".  The\n                    tooltip text can be up to 127 characters long (63\n                    on Windows versions before W2K).  Longer strings\n                    will be truncated.\n\n:level LEVEL     -- Notification severity level, one of `info',\n                    `warning', or `error'.  If given, the value\n                    determines the icon displayed to the left of the\n                    notification title, but only if the `:title'\n                    parameter (see below) is also specified and is a\n                    string.\n\n:title TITLE     -- The title of the notification.  If TITLE is a string,\n                    it is displayed in a larger font immediately above\n                    the body text.  The title text can be up to 63\n                    characters long; longer text will be truncated.\n\n:body BODY       -- The body of the notification.  If BODY is a string,\n                    it specifies the text of the notification message.\n                    Use embedded newlines to control how the text is\n                    broken into lines.  The body text can be up to 255\n                    characters long, and will be truncated if it's longer.\n\nNote that versions of Windows before W2K support only `:icon' and `:tip'.\nYou can pass the other parameters, but they will be ignored on those\nold systems.\n\nThere can be at most one active notification at any given time.  An\nactive notification must be removed by calling `w32-notification-close'\nbefore a new one can be shown.\n\nusage: (w32-notification-notify &rest PARAMS)",
            "fnname": "Fw32_notification_notify",
            "intspec": "0",
            "lname": "w32-notification-notify",
            "maxargs": -1,
            "minargs": 0,
            "path": "w32fns.c",
            "sname": "Sw32_notification_notify"
        },
        {
            "args": [
                "root",
                "key",
                "name"
            ],
            "attributes": null,
            "doc": "Return the value stored in MS-Windows Registry under ROOT/KEY/NAME.\n\nROOT is a symbol, one of `HKCR', `HKCU', `HKLM', `HKU', or `HKCC'.\nIt can also be nil, which means try `HKCU', and if that fails, try `HKLM'.\n\nKEY and NAME must be strings, and NAME must not include slashes.\nKEY can use either forward- or back-slashes.\nTo access the default value of KEY (if it is defined), use NAME\nthat is an empty string.\n\nIf the named KEY or its subkey called NAME don't exist, or cannot be\naccessed by the current user, the function returns nil.  Otherwise,\nthe return value depends on the type of the data stored in Registry:\n\n  If the data type is REG_NONE, the function returns t.\n  If the data type is REG_DWORD or REG_QWORD, the function returns\n    its integer value.  If the value is too large for a fixnum,\n    the function returns a bignum.\n  If the data type is REG_BINARY, the function returns a vector whose\n    elements are individual bytes of the value.\n  If the data type is REG_SZ, the function returns a string.\n  If the data type is REG_EXPAND_SZ, the function returns a string\n    with all the %..% references to environment variables replaced\n    by the values of those variables.  If the expansion fails, or\n    some variables are not defined in the environment, some or all\n    of the environment variables will remain unexpanded.\n  If the data type is REG_MULTI_SZ, the function returns a list whose\n    elements are the individual strings.\n\nNote that this function doesn't know whether a string value is a file\nname, so file names will be returned with backslashes, which may need\nto be converted to forward slashes by the caller.",
            "fnname": "Fw32_read_registry",
            "intspec": "0",
            "lname": "w32-read-registry",
            "maxargs": 3,
            "minargs": 3,
            "path": "w32fns.c",
            "sname": "Sw32_read_registry"
        },
        {
            "args": [
                "hotkeyid"
            ],
            "attributes": null,
            "doc": "Convert hot-key ID to a lisp key combination.\nusage: (w32-reconstruct-hot-key ID)",
            "fnname": "Fw32_reconstruct_hot_key",
            "intspec": "0",
            "lname": "w32-reconstruct-hot-key",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Sw32_reconstruct_hot_key"
        },
        {
            "args": [
                "key"
            ],
            "attributes": null,
            "doc": "Register KEY as a hot-key combination.\nCertain key combinations like Alt-Tab and Win-R are reserved for\nsystem use on Windows, and therefore are normally intercepted by the\nsystem.  These key combinations can be used in Emacs by registering\nthem as hot-keys, except for Win-L which always locks the computer.\n\nOn Windows 98 and ME, KEY must be a one element key definition in\nvector form that would be acceptable to `define-key' (e.g. [A-tab] for\nAlt-Tab).  The meta modifier is interpreted as Alt if\n`w32-alt-is-meta' is t, and hyper is always interpreted as the Windows\nmodifier keys.  The return value is the hotkey-id if registered,\notherwise nil.\n\nOn Windows versions since NT, KEY can also be specified as just a\nmodifier key, [M-], [s-] or [H-], to indicate that all combinations\nof the respective modifier key should be processed by Emacs instead\nof the operating system.  The super and hyper modifiers are\ninterpreted according to the current values of `w32-lwindow-modifier'\nand `w32-rwindow-modifier'.  For instance, setting `w32-lwindow-modifier'\nto `super' and then calling `(w32-register-hot-key [s-])' grabs all\ncombinations of the left Windows key to Emacs as keys with the Super\nmodifier, but leaves the right Windows key free for the operating\nsystem keyboard shortcuts.\n\nThe return value is t if the call affected any key combinations,\notherwise nil.",
            "fnname": "Fw32_register_hot_key",
            "intspec": "0",
            "lname": "w32-register-hot-key",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Sw32_register_hot_key"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return list of registered hot-key IDs.",
            "fnname": "Fw32_registered_hot_keys",
            "intspec": "0",
            "lname": "w32-registered-hot-keys",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32fns.c",
            "sname": "Sw32_registered_hot_keys"
        },
        {
            "args": [
                "selection",
                "terminal"
            ],
            "attributes": null,
            "doc": "Whether there is an owner for the given X selection.\nSELECTION should be the name of the selection in question, typically\none of the symbols `PRIMARY', `SECONDARY', or `CLIPBOARD'.  (X expects\nthese literal upper-case names.)  The symbol nil is the same as\n`PRIMARY', and t is the same as `SECONDARY'.\n\nTERMINAL should be a terminal object or a frame specifying the X\nserver to query.  If omitted or nil, that stands for the selected\nframe's display, or the first available X display.",
            "fnname": "Fw32_selection_exists_p",
            "intspec": "0",
            "lname": "w32-selection-exists-p",
            "maxargs": 2,
            "minargs": 0,
            "path": "w32select.c",
            "sname": "Sw32_selection_exists_p"
        },
        {
            "args": [
                "selection",
                "terminal"
            ],
            "attributes": null,
            "doc": "Return a vector of data formats available in the specified SELECTION.\nSELECTION should be the name of the selection in question, typically\none of the symbols `PRIMARY', `SECONDARY', or `CLIPBOARD'.\nThe symbol nil is the same as `PRIMARY', and t is the same as `SECONDARY'.\n\nTERMINAL should be a terminal object or a frame specifying the X\nserver to query.  If omitted or nil, that stands for the selected\nframe's display, or the first available X display.\n\nThis function currently ignores TERMINAL, and only returns non-nil\nfor `CLIPBOARD'.  The return value is a vector of symbols, each symbol\nrepresenting a data format that is currently available in the clipboard.",
            "fnname": "Fw32_selection_targets",
            "intspec": "0",
            "lname": "w32-selection-targets",
            "maxargs": 2,
            "minargs": 0,
            "path": "w32select.c",
            "sname": "Sw32_selection_targets"
        },
        {
            "args": [
                "command",
                "frame"
            ],
            "attributes": null,
            "doc": "Send frame a Windows WM_SYSCOMMAND message of type COMMAND.\nSome useful values for COMMAND are #xf030 to maximize frame (#xf020\nto minimize), #xf120 to restore frame to original size, and #xf100\nto activate the menubar for keyboard access.  #xf140 activates the\nscreen saver if defined.\n\nIf optional parameter FRAME is not specified, use selected frame.",
            "fnname": "Fw32_send_sys_command",
            "intspec": "0",
            "lname": "w32-send-sys-command",
            "maxargs": 2,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Sw32_send_sys_command"
        },
        {
            "args": [
                "string",
                "ignored"
            ],
            "attributes": null,
            "doc": "This sets the clipboard data to the given text.",
            "fnname": "Fw32_set_clipboard_data",
            "intspec": "0",
            "lname": "w32-set-clipboard-data",
            "maxargs": 2,
            "minargs": 1,
            "path": "w32select.c",
            "sname": "Sw32_set_clipboard_data"
        },
        {
            "args": [
                "cp"
            ],
            "attributes": null,
            "doc": "Make Windows codepage CP be the codepage for Emacs tty keyboard input.\nThis codepage setting affects keyboard input in tty mode.\nIf successful, the new CP is returned, otherwise nil.",
            "fnname": "Fw32_set_console_codepage",
            "intspec": "0",
            "lname": "w32-set-console-codepage",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32proc.c",
            "sname": "Sw32_set_console_codepage"
        },
        {
            "args": [
                "cp"
            ],
            "attributes": null,
            "doc": "Make Windows codepage CP be the codepage for Emacs console output.\nThis codepage setting affects display in tty mode.\nIf successful, the new CP is returned, otherwise nil.",
            "fnname": "Fw32_set_console_output_codepage",
            "intspec": "0",
            "lname": "w32-set-console-output-codepage",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32proc.c",
            "sname": "Sw32_set_console_output_codepage"
        },
        {
            "args": [
                "lcid"
            ],
            "attributes": null,
            "doc": "Make Windows locale LCID be the current locale setting for Emacs.\nIf successful, the new locale id is returned, otherwise nil.",
            "fnname": "Fw32_set_current_locale",
            "intspec": "0",
            "lname": "w32-set-current-locale",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32proc.c",
            "sname": "Sw32_set_current_locale"
        },
        {
            "args": [
                "status"
            ],
            "attributes": null,
            "doc": "Open or close the IME according to STATUS.\n\nThis function activates the IME, the MS-Windows Input Method Editor,\nif STATUS is non-nil, otherwise it deactivates the IME.",
            "fnname": "Fw32_set_ime_open_status",
            "intspec": "0",
            "lname": "w32-set-ime-open-status",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Sw32_set_ime_open_status"
        },
        {
            "args": [
                "layout"
            ],
            "attributes": null,
            "doc": "Make LAYOUT be the current keyboard layout for Emacs.\nThe keyboard layout setting affects interpretation of keyboard input.\nIf successful, the new layout id is returned, otherwise nil.",
            "fnname": "Fw32_set_keyboard_layout",
            "intspec": "0",
            "lname": "w32-set-keyboard-layout",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32proc.c",
            "sname": "Sw32_set_keyboard_layout"
        },
        {
            "args": [
                "x",
                "y"
            ],
            "attributes": null,
            "doc": "Move mouse pointer to absolute pixel position (X, Y).\nThe coordinates X and Y are interpreted in pixels relative to a position\n\\(0, 0) of the selected frame's display.",
            "fnname": "Fw32_set_mouse_absolute_pixel_position",
            "intspec": "0",
            "lname": "w32-set-mouse-absolute-pixel-position",
            "maxargs": 2,
            "minargs": 2,
            "path": "w32fns.c",
            "sname": "Sw32_set_mouse_absolute_pixel_position"
        },
        {
            "args": [
                "process",
                "priority"
            ],
            "attributes": null,
            "doc": "Set the priority of PROCESS to PRIORITY.\nIf PROCESS is nil, the priority of Emacs is changed, otherwise the\npriority of the process whose pid is PROCESS is changed.\nPRIORITY should be one of the symbols high, normal, or low;\nany other symbol will be interpreted as normal.\n\nIf successful, the return value is t, otherwise nil.",
            "fnname": "Fw32_set_process_priority",
            "intspec": "0",
            "lname": "w32-set-process-priority",
            "maxargs": 2,
            "minargs": 2,
            "path": "w32proc.c",
            "sname": "Sw32_set_process_priority"
        },
        {
            "args": [
                "image_file"
            ],
            "attributes": null,
            "doc": "Set the desktop wallpaper image to IMAGE-FILE.",
            "fnname": "Fw32_set_wallpaper",
            "intspec": "0",
            "lname": "w32-set-wallpaper",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Sw32_set_wallpaper"
        },
        {
            "args": [
                "operation",
                "document",
                "parameters",
                "show_flag"
            ],
            "attributes": null,
            "doc": "Get Windows to perform OPERATION on DOCUMENT.\nThis is a wrapper around the ShellExecute system function, which\ninvokes the application registered to handle OPERATION for DOCUMENT.\n\nOPERATION is either nil or a string that names a supported operation.\nWhat operations can be used depends on the particular DOCUMENT and its\nhandler application, but typically it is one of the following common\noperations:\n\n \\\"open\\\"    - open DOCUMENT, which could be a file, a directory, or an\n               executable program (application).  If it is an application,\n               that application is launched in the current buffer's default\n               directory.  Otherwise, the application associated with\n               DOCUMENT is launched in the buffer's default directory.\n \\\"opennew\\\" - like \\\"open\\\", but instruct the application to open\n               DOCUMENT in a new window.\n \\\"openas\\\"  - open the \\\"Open With\\\" dialog for DOCUMENT.\n \\\"print\\\"   - print DOCUMENT, which must be a file.\n \\\"printto\\\" - print DOCUMENT, which must be a file, to a specified printer.\n               The printer should be provided in PARAMETERS, see below.\n \\\"explore\\\" - start the Windows Explorer on DOCUMENT.\n \\\"edit\\\"    - launch an editor and open DOCUMENT for editing; which\n               editor is launched depends on the association for the\n               specified DOCUMENT.\n \\\"find\\\"    - initiate search starting from DOCUMENT, which must specify\n               a directory.\n \\\"delete\\\"  - move DOCUMENT, a file or a directory, to Recycle Bin.\n \\\"copy\\\"    - copy DOCUMENT, which must be a file or a directory, into\n               the clipboard.\n \\\"cut\\\"     - move DOCUMENT, a file or a directory, into the clipboard.\n \\\"paste\\\"   - paste the file whose name is in the clipboard into DOCUMENT,\n               which must be a directory.\n \\\"pastelink\\\"\n           - create a shortcut in DOCUMENT (which must be a directory)\n               the file or directory whose name is in the clipboard.\n \\\"runas\\\"   - run DOCUMENT, which must be an executable file, with\n               elevated privileges (a.k.a. \\\"as Administrator\\\").\n \\\"properties\\\"\n           - open the property sheet dialog for DOCUMENT.\n nil       - invoke the default OPERATION, or \\\"open\\\" if default is\n               not defined or unavailable.\n\nDOCUMENT is typically the name of a document file or a URL, but can\nalso be an executable program to run, or a directory to open in the\nWindows Explorer.  If it is a file or a directory, it must be a local\none; this function does not support remote file names.\n\nIf DOCUMENT is an executable program, the optional third arg PARAMETERS\ncan be a string containing command line parameters, separated by blanks,\nthat will be passed to the program.  Some values of OPERATION also require\nparameters (e.g., \\\"printto\\\" requires the printer address).  Otherwise,\nPARAMETERS should be nil or unspecified.  Note that double quote characters\nin PARAMETERS must each be enclosed in 2 additional quotes, as in \\\"\\\"\\\".\n\nOptional fourth argument SHOW-FLAG can be used to control how the\napplication will be displayed when it is invoked.  If SHOW-FLAG is nil\nor unspecified, the application is displayed as if SHOW-FLAG of 10 was\nspecified, otherwise it is an integer between 0 and 11 representing\na ShowWindow flag:\n\n  0 - start hidden\n  1 - start as normal-size window\n  3 - start in a maximized window\n  6 - start in a minimized window\n 10 - start as the application itself specifies; this is the default.",
            "fnname": "Fw32_shell_execute",
            "intspec": "0",
            "lname": "w32-shell-execute",
            "maxargs": 4,
            "minargs": 2,
            "path": "w32fns.c",
            "sname": "Sw32_shell_execute"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Return the short file name version (8.3) of the full path of FILENAME.\nIf FILENAME does not exist, return nil.\nAll path elements in FILENAME are converted to their short names.",
            "fnname": "Fw32_short_file_name",
            "intspec": "0",
            "lname": "w32-short-file-name",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32proc.c",
            "sname": "Sw32_short_file_name"
        },
        {
            "args": [
                "key",
                "new_state"
            ],
            "attributes": null,
            "doc": "Toggle the state of the lock key KEY.\nKEY can be `capslock', `kp-numlock', or `scroll'.\nIf the optional parameter NEW-STATE is a number, then the state of KEY\nis set to off if the low bit of NEW-STATE is zero, otherwise on.\nIf NEW-STATE is omitted or nil, the function toggles the state,\n\nValue is the new state of the key, or nil if the function failed\nto change the state.",
            "fnname": "Fw32_toggle_lock_key",
            "intspec": "0",
            "lname": "w32-toggle-lock-key",
            "maxargs": 2,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Sw32_toggle_lock_key"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Unload the Windows socket library `winsock' if loaded.\nThis is provided to allow dial-up socket connections to be disconnected\nwhen no longer needed.  Returns nil without unloading winsock if any\nsocket connections still exist.",
            "fnname": "Fw32_unload_winsock",
            "intspec": "0",
            "lname": "w32-unload-winsock",
            "maxargs": 0,
            "minargs": 0,
            "path": "w32proc.c",
            "sname": "Sw32_unload_winsock"
        },
        {
            "args": [
                "key"
            ],
            "attributes": null,
            "doc": "Unregister KEY as a hot-key combination.",
            "fnname": "Fw32_unregister_hot_key",
            "intspec": "0",
            "lname": "w32-unregister-hot-key",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Sw32_unregister_hot_key"
        },
        {
            "args": [
                "class",
                "name"
            ],
            "attributes": null,
            "doc": "Return non-nil if a window exists with the specified CLASS and NAME.\n\nThis is a direct interface to the Windows API FindWindow function.",
            "fnname": "Fw32_window_exists_p",
            "intspec": "0",
            "lname": "w32-window-exists-p",
            "maxargs": 2,
            "minargs": 2,
            "path": "w32fns.c",
            "sname": "Sw32_window_exists_p"
        },
        {
            "args": [
                "file",
                "filter",
                "callback"
            ],
            "attributes": null,
            "doc": "Add a watch for filesystem events pertaining to FILE.\n\nThis arranges for filesystem events pertaining to FILE to be reported\nto Emacs.  Use `w32notify-rm-watch' to cancel the watch.\n\nValue is a descriptor for the added watch.  If the file cannot be\nwatched for some reason, this function signals a `file-error' error.\n\nFILTER is a list of conditions for reporting an event.  It can include\nthe following symbols:\n\n  `file-name'          -- report file creation, deletion, or renaming\n  `directory-name'     -- report directory creation, deletion, or renaming\n  `attributes'         -- report changes in attributes\n  `size'               -- report changes in file-size\n  `last-write-time'    -- report changes in last-write time\n  `last-access-time'   -- report changes in last-access time\n  `creation-time'      -- report changes in creation time\n  `security-desc'      -- report changes in security descriptor\n\nIf FILE is a directory, and FILTER includes `subtree', then all the\nsubdirectories will also be watched and changes in them reported.\n\nWhen any event happens that satisfies the conditions specified by\nFILTER, Emacs will call the CALLBACK function passing it a single\nargument EVENT, which is of the form\n\n  (DESCRIPTOR ACTION FILE)\n\nDESCRIPTOR is the same object as the one returned by this function.\nACTION is the description of the event.  It could be any one of the\nfollowing:\n\n  `added'        -- FILE was added\n  `removed'      -- FILE was deleted\n  `modified'     -- FILE's contents or its attributes were modified\n  `renamed-from' -- a file was renamed whose old name was FILE\n  `renamed-to'   -- a file was renamed and its new name is FILE\n\nFILE is the name of the file whose event is being reported.\n\nNote that some networked filesystems, such as Samba-mounted Unix\nvolumes, might not send notifications about file changes.  In these\ncases, this function will return a valid descriptor, but notifications\nwill never come in.  Volumes shared from remote Windows machines do\ngenerate notifications correctly, though.",
            "fnname": "Fw32notify_add_watch",
            "intspec": "0",
            "lname": "w32notify-add-watch",
            "maxargs": 3,
            "minargs": 3,
            "path": "w32notify.c",
            "sname": "Sw32notify_add_watch"
        },
        {
            "args": [
                "watch_descriptor"
            ],
            "attributes": null,
            "doc": "Remove an existing watch specified by its WATCH-DESCRIPTOR.\n\nWATCH-DESCRIPTOR should be an object returned by `w32notify-add-watch'.",
            "fnname": "Fw32notify_rm_watch",
            "intspec": "0",
            "lname": "w32notify-rm-watch",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32notify.c",
            "sname": "Sw32notify_rm_watch"
        },
        {
            "args": [
                "watch_descriptor"
            ],
            "attributes": null,
            "doc": "Check a watch specified by its WATCH-DESCRIPTOR for validity.\n\nWATCH-DESCRIPTOR should be an object returned by `w32notify-add-watch'.\n\nA watch can become invalid if the directory it watches is deleted, or if\nthe watcher thread exits abnormally for any other reason.  Removing the\nwatch by calling `w32notify-rm-watch' also makes it invalid.",
            "fnname": "Fw32notify_valid_p",
            "intspec": "0",
            "lname": "w32notify-valid-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "w32notify.c",
            "sname": "Sw32notify_valid_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return non-nil if Emacs is waiting for input from the user.\nThis is intended for use by asynchronous process output filters and sentinels.",
            "fnname": "Fwaiting_for_user_input_p",
            "intspec": "0",
            "lname": "waiting-for-user-input-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "process.c",
            "sname": "Swaiting_for_user_input_p"
        },
        {
            "args": [
                "definition",
                "keymap",
                "firstonly",
                "noindirect",
                "no_remap"
            ],
            "attributes": null,
            "doc": "Return list of keys that invoke DEFINITION.\nIf KEYMAP is a keymap, search only KEYMAP and the global keymap.\nIf KEYMAP is nil, search all the currently active keymaps, except\n for `overriding-local-map' (which is ignored).\nIf KEYMAP is a list of keymaps, search only those keymaps.\n\nIf optional 3rd arg FIRSTONLY is non-nil, return the first key sequence found,\nrather than a list of all possible key sequences.\nIf FIRSTONLY is the symbol `non-ascii', return the first binding found,\nno matter what it is.\nIf FIRSTONLY has another non-nil value, prefer bindings\nthat use the modifier key specified in `where-is-preferred-modifier'\n\\(or their meta variants) and entirely reject menu bindings.\n\nIf optional 4th arg NOINDIRECT is non-nil, don't extract the commands inside\nmenu-items.  This makes it possible to search for a menu-item itself.\n\nThe optional 5th arg NO-REMAP alters how command remapping is handled:\n\n- If another command OTHER-COMMAND is remapped to DEFINITION, normally\n  search for the bindings of OTHER-COMMAND and include them in the\n  returned list.  But if NO-REMAP is non-nil, include the vector\n  [remap OTHER-COMMAND] in the returned list instead, without\n  searching for those other bindings.\n\n- If DEFINITION is remapped to OTHER-COMMAND, normally return the\n  bindings for OTHER-COMMAND.  But if NO-REMAP is non-nil, return the\n  bindings for DEFINITION instead, ignoring its remapping.\n\nKeys that are represented as events that have a `non-key-event' non-nil\nsymbol property are ignored.",
            "fnname": "Fwhere_is_internal",
            "intspec": "0",
            "lname": "where-is-internal",
            "maxargs": 5,
            "minargs": 1,
            "path": "keymap.c",
            "sname": "Swhere_is_internal"
        },
        {
            "args": [
                "args"
            ],
            "attributes": null,
            "doc": "If TEST yields non-nil, eval BODY... and repeat.\nThe order of execution is thus TEST, BODY, TEST, BODY and so on\nuntil TEST returns nil.\n\nThe value of a `while' form is always nil.\n\nusage: (while TEST BODY...)",
            "fnname": "Fwhile",
            "intspec": "0",
            "lname": "while",
            "maxargs": -2,
            "minargs": 1,
            "path": "eval.c",
            "sname": "Swhile"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Remove restrictions (narrowing) from current buffer.\n\nThis allows the buffer's full text to be seen and edited.\n\nHowever, when restrictions have been set by `with-restriction' with a\nlabel, `widen' restores the narrowing limits set by `with-restriction'.\nTo gain access to other portions of the buffer, use\n`without-restriction' with the same label.",
            "fnname": "Fwiden",
            "intspec": "",
            "lname": "widen",
            "maxargs": 0,
            "minargs": 0,
            "path": "editfns.c",
            "sname": "Swiden"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Apply the value of WIDGET's PROPERTY to the widget itself.\nReturn the result of applying the value of PROPERTY to WIDGET.\nARGS are passed as extra arguments to the function.\nusage: (widget-apply WIDGET PROPERTY &rest ARGS)",
            "fnname": "Fwidget_apply",
            "intspec": "0",
            "lname": "widget-apply",
            "maxargs": -1,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Swidget_apply"
        },
        {
            "args": [
                "widget",
                "property"
            ],
            "attributes": null,
            "doc": "In WIDGET, get the value of PROPERTY.\nThe value could either be specified when the widget was created, or\nlater with `widget-put'.",
            "fnname": "Fwidget_get",
            "intspec": "0",
            "lname": "widget-get",
            "maxargs": 2,
            "minargs": 2,
            "path": "fns.c",
            "sname": "Swidget_get"
        },
        {
            "args": [
                "widget",
                "property",
                "value"
            ],
            "attributes": null,
            "doc": "In WIDGET, set PROPERTY to VALUE.\nThe value can later be retrieved with `widget-get'.",
            "fnname": "Fwidget_put",
            "intspec": "0",
            "lname": "widget-put",
            "maxargs": 3,
            "minargs": 3,
            "path": "fns.c",
            "sname": "Swidget_put"
        },
        {
            "args": [
                "x",
                "y",
                "frame"
            ],
            "attributes": null,
            "doc": "Return window containing coordinates X and Y on FRAME.\nFRAME must be a live frame and defaults to the selected one.\nX and Y are measured in units of canonical columns and rows.\nThe top left corner of the frame is considered to be column 0, row 0.\nTool-bar and tab-bar pseudo-windows are ignored by this function: if\nthe specified coordinates are in any of these two windows, this\nfunction returns nil.",
            "fnname": "Fwindow_at",
            "intspec": "0",
            "lname": "window-at",
            "maxargs": 3,
            "minargs": 2,
            "path": "window.c",
            "sname": "Swindow_at"
        },
        {
            "args": [
                "window",
                "pixelwise"
            ],
            "attributes": null,
            "doc": "Return the height of WINDOW's text area.\nWINDOW must be a live window and defaults to the selected one.  The\nreturn value does not include the mode line or header line or any\nhorizontal divider.\n\nThe optional argument PIXELWISE defines the units to use for the\nheight.  If nil, return the largest integer smaller than WINDOW's\npixel height in units of the character height of WINDOW's frame.  If\nPIXELWISE is `remap' and the default face is remapped (see\n`face-remapping-alist'), use the remapped face to determine the\ncharacter height.  For any other non-nil value, return the height in\npixels.",
            "fnname": "Fwindow_body_height",
            "intspec": "0",
            "lname": "window-body-height",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_body_height"
        },
        {
            "args": [
                "window",
                "pixelwise"
            ],
            "attributes": null,
            "doc": "Return the width of WINDOW's text area.\nWINDOW must be a live window and defaults to the selected one.  The\nreturn value does not include any vertical dividers, fringes or\nmarginal areas, or scroll bars.\n\nThe optional argument PIXELWISE defines the units to use for the\nwidth.  If nil, return the largest integer smaller than WINDOW's pixel\nwidth in units of the character width of WINDOW's frame.  If PIXELWISE\nis `remap' and the default face is remapped (see\n`face-remapping-alist'), use the remapped face to determine the\ncharacter width.  For any other non-nil value, return the width in\npixels.\n\nNote that the returned value includes the column reserved for the\ncontinuation glyph.\n\nAlso see `window-max-chars-per-line'.",
            "fnname": "Fwindow_body_width",
            "intspec": "0",
            "lname": "window-body-width",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_body_width"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the width in pixels of WINDOW's bottom divider.\nWINDOW must be a live window and defaults to the selected one.",
            "fnname": "Fwindow_bottom_divider_width",
            "intspec": "0",
            "lname": "window-bottom-divider-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_bottom_divider_width"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the buffer displayed in window WINDOW.\nIf WINDOW is omitted or nil, it defaults to the selected window.\nReturn nil for an internal window or a deleted window.",
            "fnname": "Fwindow_buffer",
            "intspec": "0",
            "lname": "window-buffer",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_buffer"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Mark WINDOW as second most recently used.\nWINDOW must specify a live window.\n\nIf WINDOW is not selected and the selected window has the highest use\ntime of all windows, set the use time of WINDOW to that of the selected\nwindow, increase the use time of the selected window by one and return\nthe new use time of WINDOW.  Otherwise, do nothing and return nil.",
            "fnname": "Fwindow_bump_use_time",
            "intspec": "0",
            "lname": "window-bump-use-time",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_bump_use_time"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return combination limit of window WINDOW.\nWINDOW must be a valid window used in horizontal or vertical combination.\nIf the return value is nil, child windows of WINDOW can be recombined with\nWINDOW's siblings.  A return value of t means that child windows of\nWINDOW are never (re-)combined with WINDOW's siblings.",
            "fnname": "Fwindow_combination_limit",
            "intspec": "0",
            "lname": "window-combination-limit",
            "maxargs": 1,
            "minargs": 1,
            "path": "window.c",
            "sname": "Swindow_combination_limit"
        },
        {
            "args": [
                "x",
                "y"
            ],
            "attributes": null,
            "doc": "Say whether two window configurations have the same window layout.\nThis function ignores details such as the values of point and\nscrolling positions.",
            "fnname": "Fwindow_configuration_equal_p",
            "intspec": "0",
            "lname": "window-configuration-equal-p",
            "maxargs": 2,
            "minargs": 2,
            "path": "window.c",
            "sname": "Swindow_configuration_equal_p"
        },
        {
            "args": [
                "config"
            ],
            "attributes": null,
            "doc": "Return the frame that CONFIG, a window-configuration object, is about.",
            "fnname": "Fwindow_configuration_frame",
            "intspec": "0",
            "lname": "window-configuration-frame",
            "maxargs": 1,
            "minargs": 1,
            "path": "window.c",
            "sname": "Swindow_configuration_frame"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a window-configuration object.",
            "fnname": "Fwindow_configuration_p",
            "intspec": "0",
            "lname": "window-configuration-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "window.c",
            "sname": "Swindow_configuration_p"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return non-nil when WINDOW is dedicated to its buffer.\nMore precisely, return the value assigned by the last call of\n`set-window-dedicated-p' for WINDOW.  Return nil if that function was\nnever called with WINDOW as its argument, or the value set by that\nfunction was internally reset since its last call.  WINDOW must be a\nlive window and defaults to the selected one.\n\nWhen a window is dedicated to its buffer, `display-buffer' will refrain\nfrom displaying another buffer in it.  `get-lru-window' and\n`get-largest-window' treat dedicated windows specially.\n`delete-windows-on', `replace-buffer-in-windows', `quit-window' and\n`kill-buffer' can delete a dedicated window and the containing frame.\n\nFunctions like `set-window-buffer' may change the buffer displayed by a\nwindow, unless that window is \"strongly\" dedicated to its buffer, that\nis the value returned by `window-dedicated-p' is t.",
            "fnname": "Fwindow_dedicated_p",
            "intspec": "0",
            "lname": "window-dedicated-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_dedicated_p"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the display-table that WINDOW is using.\nWINDOW must be a live window and defaults to the selected one.",
            "fnname": "Fwindow_display_table",
            "intspec": "0",
            "lname": "window-display-table",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_display_table"
        },
        {
            "args": [
                "window",
                "update"
            ],
            "attributes": null,
            "doc": "Return position at which display currently ends in WINDOW.\nThis is the position after the final character in WINDOW.\n\nWINDOW must be a live window and defaults to the selected one.  This\nis updated by redisplay, when it runs to completion.  Simply changing\nthe buffer text or setting `window-start' does not update this value.\n\nReturn nil if there is no recorded value.  (This can happen if the\nlast redisplay of WINDOW was preempted, and did not finish.)  If\nUPDATE is non-nil, compute the up-to-date position if it isn't already\nrecorded.",
            "fnname": "Fwindow_end",
            "intspec": "0",
            "lname": "window-end",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_end"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the frame that window WINDOW is on.\nWINDOW must be a valid window and defaults to the selected one.",
            "fnname": "Fwindow_frame",
            "intspec": "0",
            "lname": "window-frame",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_frame"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return fringe settings for specified WINDOW.\nWINDOW must be a live window and defaults to the selected one.\n\nValue is a list of the form (LEFT-WIDTH RIGHT-WIDTH OUTSIDE-MARGINS\nPERSISTENT), see `set-window-fringes'.",
            "fnname": "Fwindow_fringes",
            "intspec": "0",
            "lname": "window-fringes",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_fringes"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the height in pixels of WINDOW's header-line.\nWINDOW must be a live window and defaults to the selected one.",
            "fnname": "Fwindow_header_line_height",
            "intspec": "0",
            "lname": "window-header-line-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_header_line_height"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the number of columns by which WINDOW is scrolled from left margin.\nWINDOW must be a live window and defaults to the selected one.",
            "fnname": "Fwindow_hscroll",
            "intspec": "0",
            "lname": "window-hscroll",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_hscroll"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the leftmost child window of window WINDOW.\nWINDOW must be a valid window and defaults to the selected one.\nReturn nil if WINDOW is a live window (live windows have no children).\nReturn nil if WINDOW is an internal window whose children form a\nvertical combination.",
            "fnname": "Fwindow_left_child",
            "intspec": "0",
            "lname": "window-left-child",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_left_child"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return left column of window WINDOW.\nThis is the distance, in columns, between the left edge of WINDOW and\nthe left edge of the frame's window area.  For instance, the return\nvalue is 0 if there is no window to the left of WINDOW.\n\nWINDOW must be a valid window and defaults to the selected one.",
            "fnname": "Fwindow_left_column",
            "intspec": "0",
            "lname": "window-left-column",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_left_column"
        },
        {
            "args": [
                "line",
                "window"
            ],
            "attributes": null,
            "doc": "Return height in pixels of text line LINE in window WINDOW.\nWINDOW must be a live window and defaults to the selected one.\n\nReturn height of current line if LINE is omitted or nil.  Return height of\nheader or mode line if LINE is `header-line' or `mode-line'.\nOtherwise, LINE is a text line number starting from 0.  A negative number\ncounts from the end of the window.\n\nValue is a list (HEIGHT VPOS YPOS OFFBOT), where HEIGHT is the height\nin pixels of the visible part of the line, VPOS and YPOS are the\nvertical position in lines and pixels of the line, relative to the top\nof the first text line, and OFFBOT is the number of off-window pixels at\nthe bottom of the text line.  If there are off-window pixels at the top\nof the (first) text line, YPOS is negative.\n\nReturn nil if window display is not up-to-date.  In that case, use\n`pos-visible-in-window-p' to obtain the information.",
            "fnname": "Fwindow_line_height",
            "intspec": "0",
            "lname": "window-line-height",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_line_height"
        },
        {
            "args": [
                "window",
                "first",
                "last",
                "body",
                "inverse",
                "left"
            ],
            "attributes": null,
            "doc": "Return pixel dimensions of WINDOW's lines.\nThe return value is a list of the x- and y-coordinates of the lower\nright corner of the last character of each line.  Return nil if the\ncurrent glyph matrix of WINDOW is not up-to-date.\n\nOptional argument WINDOW specifies the window whose lines' dimensions\nshall be returned.  Nil or omitted means to return the dimensions for\nthe selected window.\n\nFIRST, if non-nil, specifies the index of the first line whose\ndimensions shall be returned.  If FIRST is nil and BODY is non-nil,\nstart with the first text line of WINDOW.  Otherwise, start with the\nfirst line of WINDOW.\n\nLAST, if non-nil, specifies the last line whose dimensions shall be\nreturned.  If LAST is nil and BODY is non-nil, the last line is the last\nline of the body (text area) of WINDOW.  Otherwise, last is the last\nline of WINDOW.\n\nINVERSE, if nil, means that the y-pixel value returned for a specific\nline specifies the distance in pixels from the left edge (body edge if\nBODY is non-nil) of WINDOW to the right edge of the last glyph of that\nline.  INVERSE non-nil means that the y-pixel value returned for a\nspecific line specifies the distance in pixels from the right edge of\nthe last glyph of that line to the right edge (body edge if BODY is\nnon-nil) of WINDOW.\n\nLEFT non-nil means to return the x- and y-coordinates of the lower left\ncorner of the leftmost character on each line.  This is the value that\nshould be used for buffers that mostly display text from right to left.\n\nIf LEFT is non-nil and INVERSE is nil, this means that the y-pixel value\nreturned for a specific line specifies the distance in pixels from the\nleft edge of the last (leftmost) glyph of that line to the right edge\n(body edge if BODY is non-nil) of WINDOW.  If LEFT and INVERSE are both\nnon-nil, the y-pixel value returned for a specific line specifies the\ndistance in pixels from the left edge (body edge if BODY is non-nil) of\nWINDOW to the left edge of the last (leftmost) glyph of that line.\n\nNormally, the value of this function is not available while Emacs is\nbusy, for example, when processing a command.  It should be retrievable\nthough when run from an idle timer with a delay of zero seconds.",
            "fnname": "Fwindow_lines_pixel_dimensions",
            "intspec": "0",
            "lname": "window-lines-pixel-dimensions",
            "maxargs": 6,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_lines_pixel_dimensions"
        },
        {
            "args": [
                "frame",
                "minibuf",
                "window"
            ],
            "attributes": null,
            "doc": "Return a list of windows on FRAME, starting with WINDOW.\nFRAME nil or omitted means use the selected frame.\nWINDOW nil or omitted means use the window selected within FRAME.\nMINIBUF t means include the minibuffer window, even if it isn't active.\nMINIBUF nil or omitted means include the minibuffer window only\nif it's active.\nMINIBUF neither nil nor t means never include the minibuffer window.",
            "fnname": "Fwindow_list",
            "intspec": "0",
            "lname": "window-list",
            "maxargs": 3,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_list"
        },
        {
            "args": [
                "window",
                "minibuf",
                "all_frames"
            ],
            "attributes": null,
            "doc": "Return a list of all live windows.\nWINDOW specifies the first window to list and defaults to the selected\nwindow.\n\nOptional argument MINIBUF nil or omitted means consider the minibuffer\nwindow only if the minibuffer is active.  MINIBUF t means consider the\nminibuffer window even if the minibuffer is not active.  Any other value\nmeans do not consider the minibuffer window even if the minibuffer is\nactive.\n\nOptional argument ALL-FRAMES nil or omitted means consider all windows\non WINDOW's frame, plus the minibuffer window if specified by the\nMINIBUF argument.  If the minibuffer counts, consider all windows on all\nframes that share that minibuffer too.  The following non-nil values of\nALL-FRAMES have special meanings:\n\n- t means consider all windows on all existing frames.\n\n- `visible' means consider all windows on all visible frames.\n\n- 0 (the number zero) means consider all windows on all visible and\n  iconified frames.\n\n- A frame means consider all windows on that frame only.\n\nAnything else means consider all windows on WINDOW's frame and no\nothers.\n\nIf WINDOW is not on the list of windows returned, some other window will\nbe listed first but no error is signaled.",
            "fnname": "Fwindow_list_1",
            "intspec": "0",
            "lname": "window-list-1",
            "maxargs": 3,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_list_1"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a live window and nil otherwise.\nA live window is a window that displays a buffer.\nInternal windows and deleted windows are not live.",
            "fnname": "Fwindow_live_p",
            "intspec": "0",
            "lname": "window-live-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "window.c",
            "sname": "Swindow_live_p"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Get width of marginal areas of window WINDOW.\nWINDOW must be a live window and defaults to the selected one.\n\nValue is a cons of the form (LEFT-WIDTH . RIGHT-WIDTH).\nIf a marginal area does not exist, its width will be returned\nas nil.",
            "fnname": "Fwindow_margins",
            "intspec": "0",
            "lname": "window-margins",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_margins"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return t if WINDOW is a minibuffer window.\nWINDOW must be a valid window and defaults to the selected one.",
            "fnname": "Fwindow_minibuffer_p",
            "intspec": "0",
            "lname": "window-minibuffer-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_minibuffer_p"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the height in pixels of WINDOW's mode-line.\nWINDOW must be a live window and defaults to the selected one.",
            "fnname": "Fwindow_mode_line_height",
            "intspec": "0",
            "lname": "window-mode-line-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_mode_line_height"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return new normal size of window WINDOW.\nWINDOW must be a valid window and defaults to the selected one.\n\nThe new normal size of WINDOW is the value set by the last call of\n`set-window-new-normal' for WINDOW.  If valid, it will be shortly\ninstalled as WINDOW's normal size (see `window-normal-size').",
            "fnname": "Fwindow_new_normal",
            "intspec": "0",
            "lname": "window-new-normal",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_new_normal"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return new pixel size of window WINDOW.\nWINDOW must be a valid window and defaults to the selected one.\n\nThe new pixel size of WINDOW is the value set by the last call of\n`set-window-new-pixel' for WINDOW.  If it is valid, it will be shortly\ninstalled as WINDOW's pixel height (see `window-pixel-height') or pixel\nwidth (see `window-pixel-width').",
            "fnname": "Fwindow_new_pixel",
            "intspec": "0",
            "lname": "window-new-pixel",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_new_pixel"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the new total size of window WINDOW.\nWINDOW must be a valid window and defaults to the selected one.\n\nThe new total size of WINDOW is the value set by the last call of\n`set-window-new-total' for WINDOW.  If it is valid, it will be shortly\ninstalled as WINDOW's total height (see `window-total-height') or total\nwidth (see `window-total-width').",
            "fnname": "Fwindow_new_total",
            "intspec": "0",
            "lname": "window-new-total",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_new_total"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return list of buffers recently re-shown in WINDOW.\nWINDOW must be a live window and defaults to the selected one.",
            "fnname": "Fwindow_next_buffers",
            "intspec": "0",
            "lname": "window-next-buffers",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_next_buffers"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the next sibling window of window WINDOW.\nWINDOW must be a valid window and defaults to the selected one.\nReturn nil if WINDOW has no next sibling.",
            "fnname": "Fwindow_next_sibling",
            "intspec": "0",
            "lname": "window-next-sibling",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_next_sibling"
        },
        {
            "args": [
                "window",
                "horizontal"
            ],
            "attributes": null,
            "doc": "Return the normal height of window WINDOW.\nWINDOW must be a valid window and defaults to the selected one.\nIf HORIZONTAL is non-nil, return the normal width of WINDOW.\n\nThe normal height of a frame's root window or a window that is\nhorizontally combined (a window that has a left or right sibling) is\n1.0.  The normal height of a window that is vertically combined (has a\nsibling above or below) is the fraction of the window's height with\nrespect to its parent.  The sum of the normal heights of all windows in a\nvertical combination equals 1.0.\n\nSimilarly, the normal width of a frame's root window or a window that is\nvertically combined equals 1.0.  The normal width of a window that is\nhorizontally combined is the fraction of the window's width with respect\nto its parent.  The sum of the normal widths of all windows in a\nhorizontal combination equals 1.0.\n\nThe normal sizes of windows are used to restore the proportional sizes\nof windows after they have been shrunk to their minimum sizes; for\nexample when a frame is temporarily made very small and afterwards gets\nre-enlarged to its previous size.",
            "fnname": "Fwindow_normal_size",
            "intspec": "0",
            "lname": "window-normal-size",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_normal_size"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return old height of WINDOW's text area in pixels.\nWINDOW must be a live window and defaults to the selected one.\n\nThe return value is the pixel height of WINDOW's text area after the\nlast time window change functions found WINDOW live on its frame.  It\nis zero if WINDOW was created after that.",
            "fnname": "Fwindow_old_body_pixel_height",
            "intspec": "0",
            "lname": "window-old-body-pixel-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_old_body_pixel_height"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return old width of WINDOW's text area in pixels.\nWINDOW must be a live window and defaults to the selected one.\n\nThe return value is the pixel width of WINDOW's text area after the\nlast time window change functions found WINDOW live on its frame.  It\nis zero if WINDOW was created after that.",
            "fnname": "Fwindow_old_body_pixel_width",
            "intspec": "0",
            "lname": "window-old-body-pixel-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_old_body_pixel_width"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the old buffer displayed by WINDOW.\nWINDOW must be a live window and defaults to the selected one.\n\nThe return value is the buffer shown in WINDOW at the last time window\nchange functions were run.  It is nil if WINDOW was created after\nthat.  It is t if WINDOW has been restored from a window configuration\nafter that.",
            "fnname": "Fwindow_old_buffer",
            "intspec": "0",
            "lname": "window-old-buffer",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_old_buffer"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return old total pixel height of WINDOW.\nWINDOW must be a valid window and defaults to the selected one.\n\nThe return value is the total pixel height of WINDOW after the last\ntime window change functions found WINDOW live on its frame.  It is\nzero if WINDOW was created after that.",
            "fnname": "Fwindow_old_pixel_height",
            "intspec": "0",
            "lname": "window-old-pixel-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_old_pixel_height"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return old total pixel width of WINDOW.\nWINDOW must be a valid window and defaults to the selected one.\n\nThe return value is the total pixel width of WINDOW after the last\ntime window change functions found WINDOW live on its frame.  It is\nzero if WINDOW was created after that.",
            "fnname": "Fwindow_old_pixel_width",
            "intspec": "0",
            "lname": "window-old-pixel-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_old_pixel_width"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return old value of point in WINDOW.\nWINDOW must be a live window and defaults to the selected one.",
            "fnname": "Fwindow_old_point",
            "intspec": "0",
            "lname": "window-old-point",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_old_point"
        },
        {
            "args": [
                "window",
                "parameter"
            ],
            "attributes": null,
            "doc": "Return WINDOW's value for PARAMETER.\nWINDOW can be any window and defaults to the selected one.",
            "fnname": "Fwindow_parameter",
            "intspec": "0",
            "lname": "window-parameter",
            "maxargs": 2,
            "minargs": 2,
            "path": "window.c",
            "sname": "Swindow_parameter"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the parameters of WINDOW and their values.\nWINDOW must be a valid window and defaults to the selected one.  The\nreturn value is a list of elements of the form (PARAMETER . VALUE).",
            "fnname": "Fwindow_parameters",
            "intspec": "0",
            "lname": "window-parameters",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_parameters"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the parent window of window WINDOW.\nWINDOW must be a valid window and defaults to the selected one.\nReturn nil for a window with no parent (e.g. a root window).",
            "fnname": "Fwindow_parent",
            "intspec": "0",
            "lname": "window-parent",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_parent"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the height of window WINDOW in pixels.\nWINDOW must be a valid window and defaults to the selected one.\n\nThe return value includes the mode line and header line and the bottom\ndivider, if any.  If WINDOW is an internal window, its pixel height is\nthe height of the screen areas spanned by its children.",
            "fnname": "Fwindow_pixel_height",
            "intspec": "0",
            "lname": "window-pixel-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_pixel_height"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return left pixel edge of window WINDOW.\nWINDOW must be a valid window and defaults to the selected one.",
            "fnname": "Fwindow_pixel_left",
            "intspec": "0",
            "lname": "window-pixel-left",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_pixel_left"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return top pixel edge of window WINDOW.\nWINDOW must be a valid window and defaults to the selected one.",
            "fnname": "Fwindow_pixel_top",
            "intspec": "0",
            "lname": "window-pixel-top",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_pixel_top"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the width of window WINDOW in pixels.\nWINDOW must be a valid window and defaults to the selected one.\n\nThe return value includes the fringes and margins of WINDOW as well as\nany vertical dividers or scroll bars belonging to WINDOW.  If WINDOW is\nan internal window, its pixel width is the width of the screen areas\nspanned by its children.",
            "fnname": "Fwindow_pixel_width",
            "intspec": "0",
            "lname": "window-pixel-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_pixel_width"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return current value of point in WINDOW.\nWINDOW must be a live window and defaults to the selected one.\n\nFor a nonselected window, this is the value point would have if that\nwindow were selected.\n\nNote that, when WINDOW is selected, the value returned is the same as\nthat returned by `point' for WINDOW's buffer.  It would be more strictly\ncorrect to return the top-level value of `point', outside of any\n`save-excursion' forms.  But that is hard to define.",
            "fnname": "Fwindow_point",
            "intspec": "0",
            "lname": "window-point",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_point"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return buffers previously shown in WINDOW.\nWINDOW must be a live window and defaults to the selected one.\n\nThe return value is a list of elements (BUFFER WINDOW-START POS),\nwhere BUFFER is a buffer, WINDOW-START is the start position of the\nwindow for that buffer, and POS is a window-specific point value.",
            "fnname": "Fwindow_prev_buffers",
            "intspec": "0",
            "lname": "window-prev-buffers",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_prev_buffers"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the previous sibling window of window WINDOW.\nWINDOW must be a valid window and defaults to the selected one.\nReturn nil if WINDOW has no previous sibling.",
            "fnname": "Fwindow_prev_sibling",
            "intspec": "0",
            "lname": "window-prev-sibling",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_prev_sibling"
        },
        {
            "args": [
                "frame",
                "horizontal"
            ],
            "attributes": null,
            "doc": "Apply requested size values for window-tree of FRAME.\nIf FRAME is omitted or nil, it defaults to the selected frame.\n\nOptional argument HORIZONTAL omitted or nil means apply requested\nheight values.  HORIZONTAL non-nil means apply requested width values.\n\nThe requested size values are those set by `set-window-new-pixel' and\n`set-window-new-normal'.  This function checks whether the requested\nvalues sum up to a valid window layout, recursively assigns the new\nsizes of all child windows and calculates and assigns the new start\npositions of these windows.\n\nReturn t if the requested values have been applied correctly, nil\notherwise.\n\nNote: This function does not check any of `window-fixed-size-p',\n`window-min-height' or `window-min-width'.  All these checks have to\nbe applied on the Elisp level.",
            "fnname": "Fwindow_resize_apply",
            "intspec": "0",
            "lname": "window-resize-apply",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_resize_apply"
        },
        {
            "args": [
                "frame",
                "horizontal"
            ],
            "attributes": null,
            "doc": "Apply requested total size values for window-tree of FRAME.\nIf FRAME is omitted or nil, it defaults to the selected frame.\n\nThis function does not assign pixel or normal size values.  You should\nhave run `window-resize-apply' before running this.\n\nOptional argument HORIZONTAL omitted or nil means apply requested\nheight values.  HORIZONTAL non-nil means apply requested width\nvalues.",
            "fnname": "Fwindow_resize_apply_total",
            "intspec": "0",
            "lname": "window-resize-apply-total",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_resize_apply_total"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the width in pixels of WINDOW's right divider.\nWINDOW must be a live window and defaults to the selected one.",
            "fnname": "Fwindow_right_divider_width",
            "intspec": "0",
            "lname": "window-right-divider-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_right_divider_width"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the height in pixels of WINDOW's horizontal scrollbar.\nWINDOW must be a live window and defaults to the selected one.",
            "fnname": "Fwindow_scroll_bar_height",
            "intspec": "0",
            "lname": "window-scroll-bar-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_scroll_bar_height"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the width in pixels of WINDOW's vertical scrollbar.\nWINDOW must be a live window and defaults to the selected one.",
            "fnname": "Fwindow_scroll_bar_width",
            "intspec": "0",
            "lname": "window-scroll-bar-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_scroll_bar_width"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Get width and type of scroll bars of window WINDOW.\nWINDOW must be a live window and defaults to the selected one.\n\nValue is a list of the form (WIDTH COLUMNS VERTICAL-TYPE HEIGHT LINES\nHORIZONTAL-TYPE PERSISTENT), see `set-window-scroll-bars'.  If WIDTH\nor HEIGHT is nil or VERTICAL-TYPE or HORIZONTAL-TYPE is t, WINDOW is\nusing the frame's corresponding value.",
            "fnname": "Fwindow_scroll_bars",
            "intspec": "0",
            "lname": "window-scroll-bars",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_scroll_bars"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return position at which display currently starts in WINDOW.\nWINDOW must be a live window and defaults to the selected one.\nThis is updated by redisplay or by calling `set-window-start'.",
            "fnname": "Fwindow_start",
            "intspec": "0",
            "lname": "window-start",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_start"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "The name of the window system that FRAME is displaying through.\nThe value is a symbol:\n nil for a termcap frame (a character-only terminal),\n `x' for an Emacs frame that is really an X window,\n `w32' for an Emacs frame that is a window on MS-Windows display,\n `ns' for an Emacs frame on a GNUstep or Macintosh Cocoa display,\n `pc' for a direct-write MS-DOS frame.\n `pgtk' for an Emacs frame using pure GTK facilities.\n `haiku' for an Emacs frame running in Haiku.\n `android' for an Emacs frame running in Android.\n\nFRAME defaults to the currently selected frame.\n\nUse of this function as a predicate is deprecated.  Instead,\nuse `display-graphic-p' or any of the other `display-*-p'\npredicates which report frame's specific UI-related capabilities.",
            "fnname": "Fwindow_system",
            "intspec": "0",
            "lname": "window-system",
            "maxargs": 1,
            "minargs": 0,
            "path": "frame.c",
            "sname": "Swindow_system"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the height in pixels of WINDOW's tab-line.\nWINDOW must be a live window and defaults to the selected one.",
            "fnname": "Fwindow_tab_line_height",
            "intspec": "0",
            "lname": "window-tab-line-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_tab_line_height"
        },
        {
            "args": [
                "window",
                "pixelwise"
            ],
            "attributes": null,
            "doc": "Return the height in lines of the text display area of WINDOW.\nWINDOW must be a live window and defaults to the selected one.\n\nThe returned height does not include dividers, the mode line, any header\nline, nor any partial-height lines at the bottom of the text area.\n\nOptional argument PIXELWISE non-nil, means to return the height in\npixels.",
            "fnname": "Fwindow_text_height",
            "intspec": "0",
            "lname": "window-text-height",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_text_height"
        },
        {
            "args": [
                "window",
                "from",
                "to",
                "x_limit",
                "y_limit",
                "mode_lines",
                "ignore_line_at_end"
            ],
            "attributes": null,
            "doc": "Return the size of the text of WINDOW's buffer in pixels.\nWINDOW must be a live window and defaults to the selected one.  The\nreturn value is a cons of the maximum pixel-width of any text line and\nthe pixel-height of all the text lines in the accessible portion of\nbuffer text.\n\nIf FROM is a cons cell, the return value includes, in addition to the\ndimensions, also a third element that provides the buffer position\nfrom which measuring of the text dimensions was actually started.\n\nThis function exists to allow Lisp programs to adjust the dimensions\nof WINDOW to the buffer text it needs to display.\n\nThe optional argument FROM, if non-nil, specifies the first text\nposition to consider, and defaults to the minimum accessible position\nof the buffer.  If FROM is a cons, its car specifies a buffer\nposition, and its cdr specifies the vertical offset in pixels from\nthat position to the first screen line to be measured.  If FROM is t,\nit stands for the minimum accessible position that starts a non-empty\nline.  TO, if non-nil, specifies the last text position and defaults\nto the maximum accessible position of the buffer.  If TO is t, it\nstands for the maximum accessible position that ends a non-empty line.\n\nThe optional argument X-LIMIT, if non-nil, specifies the maximum X\ncoordinate beyond which the text should be ignored.  It is therefore\nalso the maximum width that the function can return.  X-LIMIT nil or\nomitted means to use the pixel-width of WINDOW's body.  This default\nmeans text of truncated lines wider than the window will be ignored;\nspecify a non-nil value for X-LIMIT if lines are truncated and you need\nto account for the truncated text.\n\nUse nil for X-LIMIT if you want to know how high WINDOW should become in\norder to fit all of its buffer's text with the width of WINDOW\nunaltered.  Use the maximum width WINDOW may assume if you intend to\nchange WINDOW's width.  Use t for the maximum possible value.  Since\ncalculating the width of long lines can take some time, it's always a\ngood idea to make this argument as small as possible; in particular, if\nthe buffer contains long lines that shall be truncated anyway.\n\nThe optional argument Y-LIMIT, if non-nil, specifies the maximum Y\ncoordinate beyond which the text is to be ignored; it is therefore\nalso the maximum height that the function can return (excluding the\nheight of the mode- or header-line, if any).  Y-LIMIT nil or omitted\nmeans consider all of the accessible portion of buffer text up to the\nposition specified by TO.  Since calculating the text height of a\nlarge buffer can take some time, it makes sense to specify this\nargument if the size of the buffer is large or unknown.\n\nOptional argument MODE-LINES nil or omitted means do not include the\nheight of the mode-, tab- or header-line of WINDOW in the return value.\nIf it is the symbol `mode-line', `tab-line' or `header-line', include\nonly the height of that line, if present, in the return value.  If t,\ninclude the height of any of these, if present, in the return value.\n\nIGNORE-LINE-AT-END, if non-nil, means to not add the height of the\nscreen line that includes TO to the returned height of the text.",
            "fnname": "Fwindow_text_pixel_size",
            "intspec": "0",
            "lname": "window-text-pixel-size",
            "maxargs": 7,
            "minargs": 0,
            "path": "xdisp.c",
            "sname": "Swindow_text_pixel_size"
        },
        {
            "args": [
                "window",
                "pixelwise"
            ],
            "attributes": null,
            "doc": "Return the width in columns of the text display area of WINDOW.\nWINDOW must be a live window and defaults to the selected one.\n\nThe returned width does not include dividers, scrollbars, margins,\nfringes, nor any partial-width columns at the right of the text\narea.\n\nOptional argument PIXELWISE non-nil, means to return the width in\npixels.",
            "fnname": "Fwindow_text_width",
            "intspec": "0",
            "lname": "window-text-width",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_text_width"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the topmost child window of window WINDOW.\nWINDOW must be a valid window and defaults to the selected one.\nReturn nil if WINDOW is a live window (live windows have no children).\nReturn nil if WINDOW is an internal window whose children form a\nhorizontal combination.",
            "fnname": "Fwindow_top_child",
            "intspec": "0",
            "lname": "window-top-child",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_top_child"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return top line of window WINDOW.\nThis is the distance, in lines, between the top of WINDOW and the top\nof the frame's window area.  For instance, the return value is 0 if\nthere is no window above WINDOW.\n\nWINDOW must be a valid window and defaults to the selected one.",
            "fnname": "Fwindow_top_line",
            "intspec": "0",
            "lname": "window-top-line",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_top_line"
        },
        {
            "args": [
                "window",
                "round"
            ],
            "attributes": null,
            "doc": "Return the height of window WINDOW in lines.\nWINDOW must be a valid window and defaults to the selected one.\n\nThe return value includes the heights of WINDOW's mode and header line\nand its bottom divider, if any.  If WINDOW is an internal window, the\ntotal height is the height of the screen areas spanned by its children.\n\nIf WINDOW's pixel height is not an integral multiple of its frame's\ncharacter height, the number of lines occupied by WINDOW is rounded\ninternally.  This is done in a way such that, if WINDOW is a parent\nwindow, the sum of the total heights of all its children internally\nequals the total height of WINDOW.\n\nIf the optional argument ROUND is `ceiling', return the smallest integer\nlarger than WINDOW's pixel height divided by the character height of\nWINDOW's frame.  ROUND `floor' means to return the largest integer\nsmaller than WINDOW's pixel height divided by the character height of\nWINDOW's frame.  Any other value of ROUND means to return the internal\ntotal height of WINDOW.",
            "fnname": "Fwindow_total_height",
            "intspec": "0",
            "lname": "window-total-height",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_total_height"
        },
        {
            "args": [
                "window",
                "round"
            ],
            "attributes": null,
            "doc": "Return the total width of window WINDOW in columns.\nWINDOW must be a valid window and defaults to the selected one.\n\nThe return value includes the widths of WINDOW's fringes, margins,\nscroll bars and its right divider, if any.  If WINDOW is an internal\nwindow, the total width is the width of the screen areas spanned by its\nchildren.\n\nIf WINDOW's pixel width is not an integral multiple of its frame's\ncharacter width, the number of lines occupied by WINDOW is rounded\ninternally.  This is done in a way such that, if WINDOW is a parent\nwindow, the sum of the total widths of all its children internally\nequals the total width of WINDOW.\n\nIf the optional argument ROUND is `ceiling', return the smallest integer\nlarger than WINDOW's pixel width divided by the character width of\nWINDOW's frame.  ROUND `floor' means to return the largest integer\nsmaller than WINDOW's pixel width divided by the character width of\nWINDOW's frame.  Any other value of ROUND means to return the internal\ntotal width of WINDOW.",
            "fnname": "Fwindow_total_width",
            "intspec": "0",
            "lname": "window-total-width",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_total_width"
        },
        {
            "args": [
                "window"
            ],
            "attributes": null,
            "doc": "Return the use time of window WINDOW.\nWINDOW must specify a live window and defaults to the selected one.\n\nThe window with the highest use time is usually the one most recently\nselected by calling `select-window' with NORECORD nil.  The window with\nthe lowest use time is usually the least recently selected one chosen in\nsuch a way.\n\nNote that the use time of a window can be also changed by calling\n`window-bump-use-time' for that window.",
            "fnname": "Fwindow_use_time",
            "intspec": "0",
            "lname": "window-use-time",
            "maxargs": 1,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_use_time"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a valid window and nil otherwise.\nA valid window is either a window that displays a buffer or an internal\nwindow.  Windows that have been deleted are not valid.",
            "fnname": "Fwindow_valid_p",
            "intspec": "0",
            "lname": "window-valid-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "window.c",
            "sname": "Swindow_valid_p"
        },
        {
            "args": [
                "window",
                "pixels_p"
            ],
            "attributes": null,
            "doc": "Return the amount by which WINDOW is scrolled vertically.\nThis takes effect when displaying tall lines or images.\n\nIf WINDOW is omitted or nil, it defaults to the selected window.\nNormally, value is a multiple of the canonical character height of WINDOW;\noptional second arg PIXELS-P means value is measured in pixels.",
            "fnname": "Fwindow_vscroll",
            "intspec": "0",
            "lname": "window-vscroll",
            "maxargs": 2,
            "minargs": 0,
            "path": "window.c",
            "sname": "Swindow_vscroll"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is a window and nil otherwise.",
            "fnname": "Fwindowp",
            "intspec": "0",
            "lname": "windowp",
            "maxargs": 1,
            "minargs": 1,
            "path": "window.c",
            "sname": "Swindowp"
        },
        {
            "args": [
                "character",
                "printcharfun"
            ],
            "attributes": null,
            "doc": "Output character CHARACTER to stream PRINTCHARFUN.\nPRINTCHARFUN defaults to the value of `standard-output' (which see).",
            "fnname": "Fwrite_char",
            "intspec": "0",
            "lname": "write-char",
            "maxargs": 2,
            "minargs": 1,
            "path": "print.c",
            "sname": "Swrite_char"
        },
        {
            "args": [
                "start",
                "end",
                "filename",
                "append",
                "visit",
                "lockname",
                "mustbenew"
            ],
            "attributes": null,
            "doc": "Write current region into specified file.\nWhen called from a program, requires three arguments:\nSTART, END and FILENAME.  START and END are normally buffer positions\nspecifying the part of the buffer to write.\nIf START is nil, that means to use the entire buffer contents; END is\nignored.\nIf START is a string, then output that string to the file\ninstead of any buffer contents; END is ignored.\n\nOptional fourth argument APPEND if non-nil means\n  append to existing file contents (if any).  If it is a number,\n  seek to that offset in the file before writing.\nOptional fifth argument VISIT, if t or a string, means\n  set the last-save-file-modtime of buffer to this file's modtime\n  and mark buffer not modified.\nIf VISIT is t, the buffer is marked as visiting FILENAME.\nIf VISIT is a string, it is a second file name;\n  the output goes to FILENAME, but the buffer is marked as visiting VISIT.\n  VISIT is also the file name to lock and unlock for clash detection.\nIf VISIT is neither t nor nil nor a string, or if Emacs is in batch mode,\n  do not display the \\\"Wrote file\\\" message.\nThe optional sixth arg LOCKNAME, if non-nil, specifies the name to\n  use for locking and unlocking, overriding FILENAME and VISIT.\nThe optional seventh arg MUSTBENEW, if non-nil, insists on a check\n  for an existing file with the same name.  If MUSTBENEW is `excl',\n  that means to get an error if the file already exists; never overwrite.\n  If MUSTBENEW is neither nil nor `excl', that means ask for\n  confirmation before overwriting, but do go ahead and overwrite the file\n  if the user confirms.\n\nThis does code conversion according to the value of\n`coding-system-for-write', `buffer-file-coding-system', or\n`file-coding-system-alist', and sets the variable\n`last-coding-system-used' to the coding system actually used.\n\nThis calls `write-region-annotate-functions' at the start, and\n`write-region-post-annotation-function' at the end.",
            "fnname": "Fwrite_region",
            "intspec": "r\nFWrite region to file: \ni\ni\ni\np",
            "lname": "write-region",
            "maxargs": 7,
            "minargs": 3,
            "path": "fileio.c",
            "sname": "Swrite_region"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Check if both Backspace and Delete keys are on the keyboard of FRAME.\nFRAME nil means use the selected frame.\nValue is t if we know that both keys are present, and are mapped to the\nusual X keysyms.  Value is `lambda' if we cannot determine if both keys are\npresent and mapped to the usual X keysyms.",
            "fnname": "Fx_backspace_delete_keys_p",
            "intspec": "0",
            "lname": "x-backspace-delete-keys-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_backspace_delete_keys_p"
        },
        {
            "args": [
                "targets",
                "action",
                "frame",
                "return_frame",
                "allow_current_frame",
                "follow_tooltip"
            ],
            "attributes": null,
            "doc": "Begin dragging contents on FRAME, with targets TARGETS.\nTARGETS is a list of strings, which defines the X selection targets\nthat will be available to the drop target.  Block until the mouse\nbuttons are released, then return the action chosen by the target, or\n`nil' if the drop was not accepted by the drop target.  Dragging\nstarts when the mouse is pressed on FRAME, and the contents of the\nselection `XdndSelection' will be sent to the X window underneath the\nmouse pointer (the drop target) when the mouse button is released.\n\nACTION is a symbol which tells the target what it should do, and can\nbe one of the following:\n\n - `XdndActionCopy', which means to copy the contents from the drag\n   source (FRAME) to the drop target.\n\n - `XdndActionMove', which means to first take the contents of\n   `XdndSelection', and to delete whatever was saved into that\n   selection afterwards.\n\n`XdndActionPrivate' is also a valid return value, and means that the\ndrop target chose to perform an unspecified or unknown action.\n\nThe source is also expected to cooperate with the target to perform\nthe action chosen by the target.  For example, callers should delete\nthe buffer text that was dragged if `XdndActionMove' is returned.\n\nThere are also some other valid values of ACTION that depend on\ndetails of both the drop target's implementation details and that of\nEmacs.  For that reason, they are not mentioned here.  Consult\n\"Drag-and-Drop Protocol for the X Window System\" for more details:\nhttps://freedesktop.org/wiki/Specifications/XDND/.\n\nIf RETURN-FRAME is non-nil, this function will return the frame if the\nmouse pointer moves onto an Emacs frame, after first moving out of\nFRAME.  (This is not guaranteed to work on some systems.)  If\nRETURN-FRAME is the symbol `now', any frame underneath the mouse\npointer will be returned immediately.\n\nIf ACTION is a list and not nil, its elements are assumed to be a cons\nof (ITEM . STRING), where ITEM is the name of an action, and STRING is\na string describing ITEM to the user.  The drop target is expected to\nprompt the user to choose between any of the actions in the list.\n\nIf ACTION is not specified or nil, `XdndActionCopy' is used\ninstead.\n\nIf ALLOW-CURRENT-FRAME is not specified or nil, then the drop target\nis allowed to be FRAME.  Otherwise, no action will be taken if the\nmouse buttons are released on top of FRAME.\n\nIf FOLLOW-TOOLTIP is non-nil, any tooltip currently being displayed\nwill be moved to follow the mouse pointer while the drag is in\nprogress.  Note that this does not work with system tooltips (tooltips\ncreated when `use-system-tooltips' is non-nil).\n\nThis function will sometimes return immediately if no mouse buttons\nare currently held down.  It should only be called when it is known\nthat mouse buttons are being held down, such as immediately after a\n`down-mouse-1' (or similar) event.",
            "fnname": "Fx_begin_drag",
            "intspec": "0",
            "lname": "x-begin-drag",
            "maxargs": 6,
            "minargs": 1,
            "path": "xfns.c",
            "sname": "Sx_begin_drag"
        },
        {
            "args": [
                "prop",
                "value",
                "frame",
                "type",
                "format",
                "outer_p"
            ],
            "attributes": null,
            "doc": "SKIP: real doc in xfns.c.\n\nChange window property PROP to VALUE on the X window of FRAME.\nPROP must be a string.  VALUE may be a string or a list of conses,\nnumbers and/or strings.  If an element in the list is a string, it is\nconverted to an atom and the value of the atom is used.  If an element\nis a cons, it is converted to a 32 bit number where the car is the 16\ntop bits and the cdr is the lower 16 bits.\n\nFRAME nil or omitted means use the selected frame.  If TYPE is given\nand non-nil, it is the name of the type of VALUE.  If TYPE is not\ngiven or nil, the type is STRING.\n\nFORMAT gives the size in bits of each element if VALUE is a list.  It\nmust be one of 8, 16 or 32.\n\nIf VALUE is a string or FORMAT is nil or not given, FORMAT defaults to\n8.  If OUTER-P is non-nil, the property is changed for the outer X\nwindow of FRAME.  Default is to change on the edit X window.\n\nIf WINDOW-ID is non-nil, change the property of that window instead of\nFRAME's X window; the number 0 denotes the root window.  This argument\nis separate from FRAME because window IDs are not unique across X\ndisplays or screens on the same display, so FRAME provides context for\nthe window ID.\n\nIf VALUE is a string and FORMAT is 32, then the format of VALUE is\nsystem-specific.  VALUE must contain unsigned integer data in native\nendian-ness in multiples of the size of the C type 'long': the low 32\nbits of each such number are used as the value of each element of the\nproperty.\n\nWait for the request to complete and signal any error, unless\n`x-fast-protocol-requests' is non-nil, in which case errors will be\nsilently ignored.",
            "fnname": "Fx_change_window_property",
            "intspec": "0",
            "lname": "x-change-window-property",
            "maxargs": 7,
            "minargs": 2,
            "path": "w32fns.c",
            "sname": "Sx_change_window_property"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Close the connection to TERMINAL's display server.\nFor TERMINAL, specify a terminal object, a frame or a display name (a\nstring).  If TERMINAL is nil, that stands for the selected frame's\nterminal.\n\nSKIP: real doc in xfns.c.\n\nClose the connection to TERMINAL's X server.\nFor TERMINAL, specify a terminal object, a frame or a display name (a\nstring).  If TERMINAL is nil, that stands for the selected frame's terminal.\n\\(On MS Windows, this function does not accept terminal objects.)",
            "fnname": "Fx_close_connection",
            "intspec": "0",
            "lname": "x-close-connection",
            "maxargs": 1,
            "minargs": 1,
            "path": "pgtkfns.c",
            "sname": "Sx_close_connection"
        },
        {
            "args": [
                "parms"
            ],
            "attributes": null,
            "doc": "Make a new X window, which is called a \"frame\" in Emacs terms.\nReturn an Emacs frame object.  PARMS is an alist of frame parameters.\nIf the parameters specify that the frame should not have a minibuffer,\nand do not specify a specific minibuffer window to use, then\n`default-minibuffer-frame' must be a frame whose minibuffer can be\nshared by the new frame.\n\nThis function is an internal primitive--use `make-frame' instead.\n\nSKIP: real doc in xfns.c.\n\nMake a new X window, which is called a \"frame\" in Emacs terms.\nReturn an Emacs frame object.  PARMS is an alist of frame parameters.\nIf the parameters specify that the frame should not have a minibuffer,\nand do not specify a specific minibuffer window to use, then\n`default-minibuffer-frame' must be a frame whose minibuffer can be\nshared by the new frame.\n\nThis function is an internal primitive--use `make-frame' instead.",
            "fnname": "Fx_create_frame",
            "intspec": "0",
            "lname": "x-create-frame",
            "maxargs": 1,
            "minargs": 1,
            "path": "pgtkfns.c",
            "sname": "Sx_create_frame"
        },
        {
            "args": [
                "prop",
                "frame"
            ],
            "attributes": null,
            "doc": "SKIP: real doc in xfns.c.\n\nRemove window property PROP from X window of FRAME.\nFRAME nil or omitted means use the selected frame.\nIf WINDOW-ID is non-nil, remove property from that window instead\n of FRAME's X window; the number 0 denotes the root window.  This\n argument is separate from FRAME because window IDs are not unique\n across X displays or screens on the same display, so FRAME provides\n context for the window ID.\n\nValue is PROP.\n\nWait for the request to complete and signal any error, unless\n`x-fast-protocol-requests' is non-nil, in which case errors will be\nsilently ignored.",
            "fnname": "Fx_delete_window_property",
            "intspec": "0",
            "lname": "x-delete-window-property",
            "maxargs": 3,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Sx_delete_window_property"
        },
        {
            "args": [
                "selection",
                "time_object",
                "terminal"
            ],
            "attributes": null,
            "doc": "If we own the selection SELECTION, disown it.\nDisowning it means there is no such selection.\n\nSets the last-change time for the selection to TIME-OBJECT (by default\nthe time of the last event).\n\nTERMINAL should be a terminal object or a frame specifying the X\nserver to query.  If omitted or nil, that stands for the selected\nframe's display, or the first available X display.\n\nOn Nextstep, the TIME-OBJECT and TERMINAL arguments are unused.\nOn MS-DOS, all this does is return non-nil if we own the selection.",
            "fnname": "Fx_disown_selection_internal",
            "intspec": "0",
            "lname": "x-disown-selection-internal",
            "maxargs": 3,
            "minargs": 1,
            "path": "xselect.c",
            "sname": "Sx_disown_selection_internal"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return an indication of whether the display TERMINAL does backing store.\nThe value may be `buffered', `retained', or `non-retained'.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nSKIP: real doc in xfns.c.\n\nReturn an indication of whether X display TERMINAL does backing store.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nThe value may be `always', `when-mapped', or `not-useful'.\nOn Nextstep, the value may be `buffered', `retained', or `non-retained'.\nOn MS Windows, this returns nothing useful.",
            "fnname": "Fx_display_backing_store",
            "intspec": "0",
            "lname": "x-display-backing-store",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_display_backing_store"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Returns the number of color cells of the display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nSKIP: real doc in xfns.c.\n\nReturn the number of color cells of the X display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\\(On MS Windows, this function does not accept terminal objects.)",
            "fnname": "Fx_display_color_cells",
            "intspec": "0",
            "lname": "x-display-color-cells",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_display_color_cells"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return t if the display supports shades of gray.\nNote that color displays do support shades of gray.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nSKIP: real doc in xfns.c.\n\nReturn t if the X display supports shades of gray.\nNote that color displays do support shades of gray.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.",
            "fnname": "Fx_display_grayscale_p",
            "intspec": "0",
            "lname": "x-display-grayscale-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_display_grayscale_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the list of display names that Emacs has connections to.\n\nSKIP: real doc in xfns.c.\n\nReturn the list of display names that Emacs has connections to.",
            "fnname": "Fx_display_list",
            "intspec": "0",
            "lname": "x-display-list",
            "maxargs": 0,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_display_list"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the height in millimeters of the display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nOn \\\"multi-monitor\\\" setups this refers to the height in millimeters for\nall physical monitors associated with TERMINAL.  To get information\nfor each physical monitor, use `display-monitor-attributes-list'.\n\nSKIP: real doc in xfns.c.\n\nReturn the height in millimeters of the X display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\\(On MS Windows, this function does not accept terminal objects.)\n\nOn \\\"multi-monitor\\\" setups this refers to the height in millimeters for\nall physical monitors associated with TERMINAL.  To get information\nfor each physical monitor, use `display-monitor-attributes-list'.",
            "fnname": "Fx_display_mm_height",
            "intspec": "0",
            "lname": "x-display-mm-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_display_mm_height"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the width in millimeters of the display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nOn \\\"multi-monitor\\\" setups this refers to the width in millimeters for\nall physical monitors associated with TERMINAL.  To get information\nfor each physical monitor, use `display-monitor-attributes-list'.\n\nSKIP: real doc in xfns.c.\n\nReturn the width in millimeters of the X display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\\(On MS Windows, this function does not accept terminal objects.)\n\nOn \\\"multi-monitor\\\" setups this refers to the width in millimeters for\nall physical monitors associated with TERMINAL.  To get information\nfor each physical monitor, use `display-monitor-attributes-list'.",
            "fnname": "Fx_display_mm_width",
            "intspec": "0",
            "lname": "x-display-mm-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_display_mm_width"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return a list of physical monitor attributes on the X display TERMINAL.\n\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nIn addition to the standard attribute keys listed in\n`display-monitor-attributes-list', the following keys are contained in\nthe attributes:\n\n source -- String describing the source from which multi-monitor\n           information is obtained, one of \\\"Gdk\\\", \\\"XRandR 1.5\\\",\n           \\\"XRandr\\\", \\\"Xinerama\\\", or \\\"fallback\\\"\n\nInternal use only, use `display-monitor-attributes-list' instead.",
            "fnname": "Fx_display_monitor_attributes_list",
            "intspec": "0",
            "lname": "x-display-monitor-attributes-list",
            "maxargs": 1,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_display_monitor_attributes_list"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the height in pixels of the display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nOn \\\"multi-monitor\\\" setups this refers to the pixel height for all\nphysical monitors associated with TERMINAL.  To get information for\neach physical monitor, use `display-monitor-attributes-list'.\n\nSKIP: real doc in xfns.c.\n\nReturn the height in pixels of the X display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\\(On MS Windows, this function does not accept terminal objects.)\n\nOn \\\"multi-monitor\\\" setups this refers to the pixel height for all\nphysical monitors associated with TERMINAL.  To get information for\neach physical monitor, use `display-monitor-attributes-list'.",
            "fnname": "Fx_display_pixel_height",
            "intspec": "0",
            "lname": "x-display-pixel-height",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_display_pixel_height"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the width in pixels of the display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nOn \\\"multi-monitor\\\" setups this refers to the pixel width for all\nphysical monitors associated with TERMINAL.  To get information for\neach physical monitor, use `display-monitor-attributes-list'.\n\nSKIP: real doc in xfns.c.\n\nReturn the width in pixels of the X display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\\(On MS Windows, this function does not accept terminal objects.)\n\nOn \\\"multi-monitor\\\" setups this refers to the pixel width for all\nphysical monitors associated with TERMINAL.  To get information for\neach physical monitor, use `display-monitor-attributes-list'.",
            "fnname": "Fx_display_pixel_width",
            "intspec": "0",
            "lname": "x-display-pixel-width",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_display_pixel_width"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the number of bitplanes of the display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nSKIP: real doc in xfns.c.\n\nReturn the number of bitplanes of the X display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\\(On MS Windows, this function does not accept terminal objects.)",
            "fnname": "Fx_display_planes",
            "intspec": "0",
            "lname": "x-display-planes",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_display_planes"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return t if TERMINAL supports the save-under feature.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nSKIP: real doc in xfns.c.\n\nReturn t if the X display TERMINAL supports the save-under feature.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nOn MS Windows, this just returns nil.",
            "fnname": "Fx_display_save_under",
            "intspec": "0",
            "lname": "x-display-save-under",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_display_save_under"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the number of screens on the display server TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nNote: \"screen\" here is not in X11's.  For the number of physical monitors,\nuse `(length \\(display-monitor-attributes-list TERMINAL))' instead.\n\nSKIP: real doc in xfns.c.\n\nReturn the number of screens on the X server of display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nOn MS Windows, this function just returns 1.\nOn Nextstep, \"screen\" is in X terminology, not that of Nextstep.\nFor the number of physical monitors, use `(length\n\\(display-monitor-attributes-list TERMINAL))' instead.",
            "fnname": "Fx_display_screens",
            "intspec": "0",
            "lname": "x-display-screens",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_display_screens"
        },
        {
            "args": [
                "time_object",
                "terminal"
            ],
            "attributes": null,
            "doc": "Set the last user time of TERMINAL to TIME-OBJECT.\nTIME-OBJECT is the X server time, in milliseconds, of the last user\ninteraction.  This is the timestamp that `x-get-selection-internal'\nwill use by default to fetch selection data.\nThe optional second argument TERMINAL specifies which display to act\non.  TERMINAL should be a terminal object, a frame or a display name\n(a string).  If TERMINAL is omitted or nil, that stands for the\nselected frame's display.",
            "fnname": "Fx_display_last_user_time",
            "intspec": "0",
            "lname": "x-display-set-last-user-time",
            "maxargs": 2,
            "minargs": 1,
            "path": "xfns.c",
            "sname": "Sx_display_set_last_user_time"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the visual class of the display TERMINAL.\nThe value is one of the symbols `static-gray', `gray-scale',\n`static-color', `pseudo-color', `true-color', or `direct-color'.\n\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nOn PGTK, always return true-color.\n\nSKIP: real doc in xfns.c.\n\nReturn the visual class of the X display TERMINAL.\nThe value is one of the symbols `static-gray', `gray-scale',\n`static-color', `pseudo-color', `true-color', or `direct-color'.\n\\(On MS Windows, the second and last result above are not possible.)\n\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\\(On MS Windows, this function does not accept terminal objects.)",
            "fnname": "Fx_display_visual_class",
            "intspec": "0",
            "lname": "x-display-visual-class",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_display_visual_class"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return t if FRAME is being double buffered.",
            "fnname": "Fx_double_buffered_p",
            "intspec": "0",
            "lname": "x-double-buffered-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_double_buffered_p"
        },
        {
            "args": [
                "frames",
                "type"
            ],
            "attributes": null,
            "doc": "Return image data of FRAMES in TYPE format.\nFRAMES should be nil (the selected frame), a frame, or a list of\nframes (each of which corresponds to one page).  Each frame should be\nvisible.  Optional arg TYPE should be either `pdf' (default), `png',\n`postscript', or `svg'.  Supported types are determined by the\ncompile-time configuration of cairo.\n\nNote: Text drawn with the `x' font backend is shown with hollow boxes\nunless TYPE is `png'.\n\nReturn image data of FRAMES in TYPE format.\nFRAMES should be nil (the selected frame), a frame, or a list of\nframes (each of which corresponds to one page).  Each frame should be\nvisible.  Optional arg TYPE should be either `pdf' (default), `png',\n`postscript', or `svg'.  Supported types are determined by the\ncompile-time configuration of cairo.\n\nNote: Text drawn with the `x' font backend is shown with hollow boxes\nunless TYPE is `png'.",
            "fnname": "Fx_export_frames",
            "intspec": "0",
            "lname": "x-export-frames",
            "maxargs": 2,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_export_frames"
        },
        {
            "args": [
                "family",
                "frame"
            ],
            "attributes": null,
            "doc": "Return a list of available fonts of family FAMILY on FRAME.\nIf FAMILY is omitted or nil, list all families.\nOtherwise, FAMILY must be a string, possibly containing wildcards\n`?' and `*'.\nIf FRAME is omitted or nil, use the selected frame.\n\nEach element of the result is a vector [FAMILY WIDTH POINT-SIZE WEIGHT\nSLANT FIXED-P FULL REGISTRY-AND-ENCODING].\n\nFAMILY is the font family name.\nPOINT-SIZE is the size of the font in 1/10 pt.\nWIDTH, WEIGHT, and SLANT are symbols describing the width, weight\n  and slant of the font.  These symbols are the same as for face\n  attributes, see `set-face-attribute'.\nFIXED-P is non-nil if the font is fixed-pitch.\nFULL is the full name of the font.\nREGISTRY-AND-ENCODING is a string giving the registry and encoding of\n  the font.\n\nThe resulting list is sorted according to the current setting of\nthe face font sort order, see `face-font-selection-order'.",
            "fnname": "Fx_family_fonts",
            "intspec": "0",
            "lname": "x-family-fonts",
            "maxargs": 2,
            "minargs": 0,
            "path": "xfaces.c",
            "sname": "Sx_family_fonts"
        },
        {
            "args": [
                "prompt",
                "dir",
                "default_filename",
                "mustmatch",
                "only_dir_p"
            ],
            "attributes": null,
            "doc": "Read file name, prompting with PROMPT in directory DIR.\nUse a file selection dialog.  Select DEFAULT-FILENAME in the dialog's file\nselection box, if specified.  If MUSTMATCH is non-nil, the returned file\nor directory must exist.\n\nThis function is defined only on PGTK, NS, MS Windows, and X Windows with the\nMotif or Gtk toolkits.  With the Motif toolkit, ONLY-DIR-P is ignored.\nOtherwise, if ONLY-DIR-P is non-nil, the user can select only directories.\nOn MS Windows 7 and later, the file selection dialog \"remembers\" the last\ndirectory where the user selected a file, and will open that directory\ninstead of DIR on subsequent invocations of this function with the same\nvalue of DIR as in previous invocations; this is standard MS Windows behavior.\n\nSKIP: real doc in xfns.c.\n\nSKIP: real doc in USE_GTK definition in xfns.c.\n\nRead file name, prompting with PROMPT in directory DIR.\nUse a file selection dialog.  Select DEFAULT-FILENAME in the dialog's file\nselection box, if specified.  If MUSTMATCH is non-nil, the returned file\nor directory must exist.\n\nThis function is defined only on NS, Haiku, MS Windows, and X Windows with the\nMotif or Gtk toolkits.  With the Motif toolkit, ONLY-DIR-P is ignored.\nOtherwise, if ONLY-DIR-P is non-nil, the user can select only directories.\nOn MS Windows 7 and later, the file selection dialog \"remembers\" the last\ndirectory where the user selected a file, and will open that directory\ninstead of DIR on subsequent invocations of this function with the same\nvalue of DIR as in previous invocations; this is standard MS Windows behavior.",
            "fnname": "Fx_file_dialog",
            "intspec": "0",
            "lname": "x-file-dialog",
            "maxargs": 5,
            "minargs": 2,
            "path": "pgtkfns.c",
            "sname": "Sx_file_dialog"
        },
        {
            "args": [
                "frame",
                "noactivate"
            ],
            "attributes": null,
            "doc": "Set the input focus to FRAME.\nFRAME nil means use the selected frame.  Optional argument NOACTIVATE\nmeans do not activate FRAME.\n\nIf there is no window system support, this function does nothing.",
            "fnname": "Fx_focus_frame",
            "intspec": "0",
            "lname": "x-focus-frame",
            "maxargs": 2,
            "minargs": 1,
            "path": "frame.c",
            "sname": "Sx_focus_frame"
        },
        {
            "args": [
                "frame",
                "type"
            ],
            "attributes": null,
            "doc": "Return edge coordinates of FRAME.\nFRAME must be a live frame and defaults to the selected one.  The return\nvalue is a list of the form (LEFT, TOP, RIGHT, BOTTOM).  All values are\nin pixels relative to the origin - the position (0, 0) - of FRAME's\ndisplay.\n\nIf optional argument TYPE is the symbol `outer-edges', return the outer\nedges of FRAME.  The outer edges comprise the decorations of the window\nmanager (like the title bar or external borders) as well as any external\nmenu or tool bar of FRAME.  If optional argument TYPE is the symbol\n`native-edges' or nil, return the native edges of FRAME.  The native\nedges exclude the decorations of the window manager and any external\nmenu or tool bar of FRAME.  If TYPE is the symbol `inner-edges', return\nthe inner edges of FRAME.  These edges exclude title bar, any borders,\nmenu bar or tool bar of FRAME.",
            "fnname": "Fx_frame_edges",
            "intspec": "0",
            "lname": "x-frame-edges",
            "maxargs": 2,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_frame_edges"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Return geometric attributes of FRAME.\nFRAME must be a live frame and defaults to the selected one.  The return\nvalue is an association list of the attributes listed below.  All height\nand width values are in pixels.\n\n`outer-position' is a cons of the outer left and top edges of FRAME\n  relative to the origin - the position (0, 0) - of FRAME's display.\n\n`outer-size' is a cons of the outer width and height of FRAME.  The\n  outer size includes the title bar and the external borders as well as\n  any menu and/or tool bar of frame.  For a child frame the value\n  includes FRAME's X borders, if any.\n\n`external-border-size' is a cons of the horizontal and vertical width of\n  FRAME's external borders as supplied by the window manager.\n\n`title-bar-size' is a cons of the width and height of the title bar of\n  FRAME as supplied by the window manager.  If both of them are zero,\n  FRAME has no title bar.  If only the width is zero, Emacs was not\n  able to retrieve the width information.\n\n`menu-bar-external', if non-nil, means the menu bar is external (never\n  included in the inner edges of FRAME).\n\n`menu-bar-size' is a cons of the width and height of the menu bar of\n  FRAME.\n\n`tool-bar-external', if non-nil, means the tool bar is external (never\n  included in the inner edges of FRAME).\n\n`tool-bar-position' tells on which side the tool bar on FRAME is and can\n  be one of `left', `top', `right' or `bottom'.  If this is nil, FRAME\n  has no tool bar.\n\n`tool-bar-size' is a cons of the width and height of the tool bar of\n  FRAME.\n\n`internal-border-width' is the width of the internal border of\n  FRAME.\n\n`outer-border-width' is the width of the X border of FRAME.  The X\n  border is usually shown only for frames without window manager\n  decorations, such as child and tooltip frames.",
            "fnname": "Fx_frame_geometry",
            "intspec": "0",
            "lname": "x-frame-geometry",
            "maxargs": 1,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_frame_geometry"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return list of Emacs' frames, in Z (stacking) order.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be either a frame or a display name (a string).  If\nomitted or nil, that stands for the selected frame's display.  Return\nnil if TERMINAL contains no Emacs frame.\n\nAs a special case, if TERMINAL is non-nil and specifies a live frame,\nreturn the child frames of that frame in Z (stacking) order.\n\nFrames are listed from topmost (first) to bottommost (last).",
            "fnname": "Fx_frame_list_z_order",
            "intspec": "0",
            "lname": "x-frame-list-z-order",
            "maxargs": 1,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_frame_list_z_order"
        },
        {
            "args": [
                "frame1",
                "frame2",
                "above"
            ],
            "attributes": null,
            "doc": "Restack FRAME1 below FRAME2.\nThis means that if both frames are visible and the display areas of\nthese frames overlap, FRAME2 (partially) obscures FRAME1.  If optional\nthird argument ABOVE is non-nil, restack FRAME1 above FRAME2.  This\nmeans that if both frames are visible and the display areas of these\nframes overlap, FRAME1 (partially) obscures FRAME2.\n\nThis may be thought of as an atomic action performed in two steps: The\nfirst step removes FRAME1's window-step window from the display.  The\nsecond step reinserts FRAME1's window below (above if ABOVE is true)\nthat of FRAME2.  Hence the position of FRAME2 in its display's Z\n\\(stacking) order relative to all other frames excluding FRAME1 remains\nunaltered.\n\nSome window managers may refuse to restack windows.",
            "fnname": "Fx_frame_restack",
            "intspec": "0",
            "lname": "x-frame-restack",
            "maxargs": 3,
            "minargs": 2,
            "path": "xfns.c",
            "sname": "Sx_frame_restack"
        },
        {
            "args": [
                "value",
                "frame"
            ],
            "attributes": null,
            "doc": "Return the X atom name for VALUE as a string.\nVALUE may be a number or a cons where the car is the upper 16 bits and\nthe cdr is the lower 16 bits of a 32 bit value.\nUse the display for FRAME or the current frame if FRAME is not given or nil.\n\nIf the value is 0 or the atom is not known, return the empty string.",
            "fnname": "Fx_get_atom_name",
            "intspec": "0",
            "lname": "x-get-atom-name",
            "maxargs": 2,
            "minargs": 1,
            "path": "xselect.c",
            "sname": "Sx_get_atom_name"
        },
        {
            "args": [
                "value",
                "target"
            ],
            "attributes": null,
            "doc": "Run selection converters for VALUE, and return the result.\nTARGET is the selection target that is used to find a suitable\nconverter.  VALUE is a list of 4 values NAME, SELECTION-VALUE,\nTIMESTAMP and FRAME.  NAME is the name of the selection that will be\npassed to selection converters, SELECTION-VALUE is the value of the\nselection used by the converter, TIMESTAMP is not meaningful (but must\nbe a number that fits in an X timestamp), and FRAME is the frame\ndescribing the terminal for which the selection converter will be\nrun.",
            "fnname": "Fx_get_local_selection",
            "intspec": "0",
            "lname": "x-get-local-selection",
            "maxargs": 2,
            "minargs": 0,
            "path": "xselect.c",
            "sname": "Sx_get_local_selection"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the X modifier masks corresponding to keyboard modifiers.\nThe optional second argument TERMINAL specifies which display to fetch\nmodifier masks from.  TERMINAL should be a terminal object, a frame or\na display name (a string).  If TERMINAL is omitted or nil, that stands\nfor the selected frame's display.\n\nReturn a list of (HYPER SUPER ALT SHIFT-LOCK META), each element being\na number describing the modifier mask for the corresponding Emacs\nmodifier.",
            "fnname": "Fx_get_modifier_masks",
            "intspec": "0",
            "lname": "x-get-modifier-masks",
            "maxargs": 1,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_get_modifier_masks"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return the value of the current page setup.\nThe return value is an alist containing the following keys:\n\n  orientation: page orientation (symbol `portrait', `landscape',\n        `reverse-portrait', or `reverse-landscape').\n  width, height: page width/height in points not including margins.\n  left-margin, right-margin, top-margin, bottom-margin: print margins,\n        which is the parts of the page that the printer cannot print\n        on, in points.\n\nThe paper width can be obtained as the sum of width, left-margin, and\nright-margin values if the page orientation is `portrait' or\n`reverse-portrait'.  Otherwise, it is the sum of width, top-margin,\nand bottom-margin values.  Likewise, the paper height is the sum of\nheight, top-margin, and bottom-margin values if the page orientation\nis `portrait' or `reverse-portrait'.  Otherwise, it is the sum of\nheight, left-margin, and right-margin values.",
            "fnname": "Fx_get_page_setup",
            "intspec": "0",
            "lname": "x-get-page-setup",
            "maxargs": 0,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_get_page_setup"
        },
        {
            "args": [
                "attribute",
                "class",
                "component",
                "subclass"
            ],
            "attributes": null,
            "doc": "Return the value of ATTRIBUTE, of class CLASS, from the X defaults database.\nThis uses `INSTANCE.ATTRIBUTE' as the key and `Emacs.CLASS' as the\nclass, where INSTANCE is the name under which Emacs was invoked, or\nthe name specified by the `-name' or `-rn' command-line arguments.\n\nThe optional arguments COMPONENT and SUBCLASS add to the key and the\nclass, respectively.  You must specify both of them or neither.\nIf you specify them, the key is `INSTANCE.COMPONENT.ATTRIBUTE'\nand the class is `Emacs.CLASS.SUBCLASS'.",
            "fnname": "Fx_get_resource",
            "intspec": "0",
            "lname": "x-get-resource",
            "maxargs": 4,
            "minargs": 2,
            "path": "frame.c",
            "sname": "Sx_get_resource"
        },
        {
            "args": [
                "selection_symbol",
                "target_type",
                "time_stamp",
                "terminal"
            ],
            "attributes": null,
            "doc": "Return text selected from some X window.\nSELECTION-SYMBOL is typically `PRIMARY', `SECONDARY', or `CLIPBOARD'.\n\\(Those are literal upper-case symbol names, since that's what X expects.)\nTARGET-TYPE is the type of data desired, typically `STRING'.\n\nTIME-STAMP is the time to use in the XConvertSelection call for foreign\nselections.  If omitted, defaults to the time for the last event.\n\nTERMINAL should be a terminal object or a frame specifying the X\nserver to query.  If omitted or nil, that stands for the selected\nframe's display, or the first available X display.\n\nOn Nextstep, TIME-STAMP and TERMINAL are unused.",
            "fnname": "Fx_get_selection_internal",
            "intspec": "0",
            "lname": "x-get-selection-internal",
            "maxargs": 4,
            "minargs": 2,
            "path": "xselect.c",
            "sname": "Sx_get_selection_internal"
        },
        {
            "args": [
                "enable"
            ],
            "attributes": null,
            "doc": "SKIP: real doc in xfns.c.\n\nToggle interactive GTK debugging.",
            "fnname": "Fx_gtk_debug",
            "intspec": "0",
            "lname": "x-gtk-debug",
            "maxargs": 1,
            "minargs": 1,
            "path": "pgtkfns.c",
            "sname": "Sx_gtk_debug"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Hide the current tooltip window, if there is any.\nValue is t if tooltip was open, nil otherwise.\n\nSKIP: real doc in xfns.c.\n\nHide the current tooltip window, if there is any.\nValue is t if tooltip was open, nil otherwise.",
            "fnname": "Fx_hide_tip",
            "intspec": "0",
            "lname": "x-hide-tip",
            "maxargs": 0,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_hide_tip"
        },
        {
            "args": [
                "focus"
            ],
            "attributes": null,
            "doc": "Focus and set the client window of all focused frames' GTK input context.\nIf FOCUS is nil, focus out and remove the client window instead.\nThis should be called from a variable watcher for `x-gtk-use-native-input'.",
            "fnname": "Fx_internal_focus_input_context",
            "intspec": "0",
            "lname": "x-internal-focus-input-context",
            "maxargs": 1,
            "minargs": 1,
            "path": "xfns.c",
            "sname": "Sx_internal_focus_input_context"
        },
        {
            "args": [
                "pattern",
                "face",
                "frame",
                "maximum",
                "width"
            ],
            "attributes": null,
            "doc": "Return a list of the names of available fonts matching PATTERN.\nIf optional arguments FACE and FRAME are specified, return only fonts\nthe same size as FACE on FRAME.\n\nPATTERN should be a string containing a font name in the XLFD,\nFontconfig, or GTK format.  A font name given in the XLFD format may\ncontain wildcard characters:\n  the * character matches any substring, and\n  the ? character matches any single character.\n  PATTERN is case-insensitive.\n\nThe return value is a list of strings, suitable as arguments to\n`set-face-font'.\n\nFonts Emacs can't use may or may not be excluded\neven if they match PATTERN and FACE.\nThe optional fourth argument MAXIMUM sets a limit on how many\nfonts to match.  The first MAXIMUM fonts are reported.\nThe optional fifth argument WIDTH, if specified, is a number of columns\noccupied by a character of a font.  In that case, return only fonts\nthe WIDTH times as wide as FACE on FRAME.",
            "fnname": "Fx_list_fonts",
            "intspec": "0",
            "lname": "x-list-fonts",
            "maxargs": 5,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sx_list_fonts"
        },
        {
            "args": [
                "filename"
            ],
            "attributes": null,
            "doc": "Create an alist of color entries from an external file.\n\nThe file should define one named RGB color per line like so:\n  R G B   name\nwhere R,G,B are numbers between 0 and 255 and name is an arbitrary string.",
            "fnname": "Fx_load_color_file",
            "intspec": "0",
            "lname": "x-load-color-file",
            "maxargs": 1,
            "minargs": 1,
            "path": "xfaces.c",
            "sname": "Sx_load_color_file"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "SKIP: real doc in USE_GTK definition in xmenu.c.\n\nSKIP: real doc in USE_GTK definition in xmenu.c.\n\nStart key navigation of the menu bar in FRAME.\nThis initially opens the first menu bar item and you can then navigate with the\narrow keys, select a menu entry with the return key or cancel with the\nescape key.  If FRAME has no menu bar this function does nothing.\n\nIf FRAME is nil or not given, use the selected frame.",
            "fnname": "Fx_menu_bar_open_internal",
            "intspec": "i",
            "lname": "x-menu-bar-open-internal",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkmenu.c",
            "sname": "Sx_menu_bar_open_internal"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return absolute position of mouse cursor in pixels.\nThe position is returned as a cons cell (X . Y) of the coordinates of\nthe mouse cursor position in pixels relative to a position (0, 0) of the\nselected frame's display.",
            "fnname": "Fx_mouse_absolute_pixel_position",
            "intspec": "0",
            "lname": "x-mouse-absolute-pixel-position",
            "maxargs": 0,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_mouse_absolute_pixel_position"
        },
        {
            "args": [
                "display",
                "resource_string",
                "must_succeed"
            ],
            "attributes": null,
            "doc": "Open a connection to a display server.\nDISPLAY is the name of the display to connect to.\nOptional second arg XRM-STRING is a string of resources in xrdb format.\nIf the optional third arg MUST-SUCCEED is non-nil,\nterminate Emacs if we can't open the connection.\n\nSKIP: real doc in xfns.c.\n\nOpen a connection to a display server.\nDISPLAY is the name of the display to connect to.\nOptional second arg XRM-STRING is a string of resources in xrdb format.\nIf the optional third arg MUST-SUCCEED is non-nil,\nterminate Emacs if we can't open the connection.\n\\(In the Nextstep version, the last two arguments are currently ignored.)",
            "fnname": "Fx_open_connection",
            "intspec": "0",
            "lname": "x-open-connection",
            "maxargs": 3,
            "minargs": 1,
            "path": "pgtkfns.c",
            "sname": "Sx_open_connection"
        },
        {
            "args": [
                "selection",
                "value",
                "frame"
            ],
            "attributes": null,
            "doc": "Assert an X selection of type SELECTION and value VALUE.\nSELECTION is a symbol, typically `PRIMARY', `SECONDARY', or `CLIPBOARD'.\n\\(Those are literal upper-case symbol names, since that's what X expects.)\nVALUE is typically a string, or a cons of two markers, but may be\nanything that the functions on `selection-converter-alist' know about.\n\nFRAME should be a frame that should own the selection.  If omitted or\nnil, it defaults to the selected frame.\n\nOn Nextstep, FRAME is unused.",
            "fnname": "Fx_own_selection_internal",
            "intspec": "0",
            "lname": "x-own-selection-internal",
            "maxargs": 3,
            "minargs": 2,
            "path": "xselect.c",
            "sname": "Sx_own_selection_internal"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Pop up a page setup dialog.\nThe current page setup can be obtained using `x-get-page-setup'.",
            "fnname": "Fx_page_setup_dialog",
            "intspec": "0",
            "lname": "x-page-setup-dialog",
            "maxargs": 0,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_page_setup_dialog"
        },
        {
            "args": [
                "string"
            ],
            "attributes": null,
            "doc": "Parse a display geometry string STRING.\nReturns an alist of the form ((top . TOP), (left . LEFT) ... ).\nThe properties returned may include `top', `left', `height', and `width'.\nFor X, the value of `left' or `top' may be an integer,\nor a list (+ N) meaning N pixels relative to top/left corner,\nor a list (- N) meaning -N pixels relative to bottom/right corner.\nOn Nextstep, this just calls `ns-parse-geometry'.",
            "fnname": "Fx_parse_geometry",
            "intspec": "0",
            "lname": "x-parse-geometry",
            "maxargs": 1,
            "minargs": 1,
            "path": "frame.c",
            "sname": "Sx_parse_geometry"
        },
        {
            "args": [
                "position",
                "contents",
                "header"
            ],
            "attributes": null,
            "doc": "Pop up a dialog box and return user's selection.\nPOSITION specifies which frame to use.\nThis is normally a mouse button event or a window or frame.\nIf POSITION is t, it means to use the frame the mouse is on.\nThe dialog box appears in the middle of the specified frame.\n\nCONTENTS specifies the alternatives to display in the dialog box.\nIt is a list of the form (DIALOG ITEM1 ITEM2...).\nEach ITEM is a cons cell (STRING . VALUE).\nThe return value is VALUE from the chosen item.\n\nAn ITEM may also be just a string--that makes a nonselectable item.\nAn ITEM may also be nil--that means to put all preceding items\non the left of the dialog box and all following items on the right.\n\\(By default, approximately half appear on each side.)\n\nIf HEADER is non-nil, the frame title for the box is \"Information\",\notherwise it is \"Question\".\n\nIf the user gets rid of the dialog box without making a valid choice,\nfor instance using the window manager, then this produces a quit and\n`x-popup-dialog' does not return.",
            "fnname": "Fx_popup_dialog",
            "intspec": "0",
            "lname": "x-popup-dialog",
            "maxargs": 3,
            "minargs": 2,
            "path": "menu.c",
            "sname": "Sx_popup_dialog"
        },
        {
            "args": [
                "position",
                "menu"
            ],
            "attributes": null,
            "doc": "Pop up a deck-of-cards menu and return user's selection.\nPOSITION is a position specification.  This is either a mouse button event\nor a list ((XOFFSET YOFFSET) WINDOW)\nwhere XOFFSET and YOFFSET are positions in pixels from the top left\ncorner of WINDOW.  (WINDOW may be a window or a frame object.)\nThis controls the position of the top left of the menu as a whole.\nIf POSITION is t, it means to use the current mouse position.\n\nMENU is a specifier for a menu.  For the simplest case, MENU is a keymap.\nThe menu items come from key bindings that have a menu string as well as\na definition; actually, the \"definition\" in such a key binding looks like\n\\(STRING . REAL-DEFINITION).  To give the menu a title, put a string into\nthe keymap as a top-level element.\n\nIf REAL-DEFINITION is nil, that puts a nonselectable string in the menu.\nOtherwise, REAL-DEFINITION should be a valid key binding definition.\n\nYou can also use a list of keymaps as MENU.\n  Then each keymap makes a separate pane.\n\nWhen MENU is a keymap or a list of keymaps, the return value is the\nlist of events corresponding to the user's choice. Note that\n`x-popup-menu' does not actually execute the command bound to that\nsequence of events.\n\nAlternatively, you can specify a menu of multiple panes\n  with a list of the form (TITLE PANE1 PANE2...),\nwhere each pane is a list of form (TITLE ITEM1 ITEM2...).\nEach ITEM is normally a cons cell (STRING . VALUE);\nbut a string can appear as an item--that makes a nonselectable line\nin the menu.\nWith this form of menu, the return value is VALUE from the chosen item.\n\nIf POSITION is nil, don't display the menu at all, just precalculate the\ncached information about equivalent key sequences.\n\nIf the user gets rid of the menu without making a valid choice, for\ninstance by clicking the mouse away from a valid choice or by typing\nkeyboard input, then this normally results in a quit and\n`x-popup-menu' does not return.  But if POSITION is a mouse button or\ntouch screen event (indicating that the user invoked the menu with the\na pointing device) then no quit occurs and `x-popup-menu' returns\nnil.",
            "fnname": "Fx_popup_menu",
            "intspec": "0",
            "lname": "x-popup-menu",
            "maxargs": 2,
            "minargs": 2,
            "path": "menu.c",
            "sname": "Sx_popup_menu"
        },
        {
            "args": [
                "frames"
            ],
            "attributes": null,
            "doc": "Pop up a print dialog to print the current contents of FRAMES.\nFRAMES should be nil (the selected frame), a frame, or a list of\nframes (each of which corresponds to one page).  Each frame should be\nvisible.\n\nNote: Text drawn with the `x' font backend is shown with hollow boxes.",
            "fnname": "Fx_print_frames_dialog",
            "intspec": "",
            "lname": "x-print-frames-dialog",
            "maxargs": 1,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_print_frames_dialog"
        },
        {
            "args": [
                "atom",
                "frame"
            ],
            "attributes": null,
            "doc": "Request that dnd events are made for ClientMessages with ATOM.\nATOM can be a symbol or a string.  The ATOM is interned on the display that\nFRAME is on.  If FRAME is nil, the selected frame is used.",
            "fnname": "Fx_register_dnd_atom",
            "intspec": "0",
            "lname": "x-register-dnd-atom",
            "maxargs": 2,
            "minargs": 1,
            "path": "xselect.c",
            "sname": "Sx_register_dnd_atom"
        },
        {
            "args": [
                "frame",
                "ignored"
            ],
            "attributes": null,
            "doc": "Read a font using a GTK dialog and return a font spec.\n\nFRAME is the frame on which to pop up the font chooser.  If omitted or\nnil, it defaults to the selected frame.\n\nRead a font name using a W32 font selection dialog.\nReturn fontconfig style font string corresponding to the selection.\n\nIf FRAME is omitted or nil, it defaults to the selected frame.\nIf EXCLUDE-PROPORTIONAL is non-nil, exclude proportional fonts\nin the font selection dialog.\n\nRead a font using a GTK dialog.\nReturn either a font spec (for GTK versions >= 3.2) or a string\ncontaining a GTK-style font name.\n\nFRAME is the frame on which to pop up the font chooser.  If omitted or\nnil, it defaults to the selected frame.",
            "fnname": "Fx_select_font",
            "intspec": "0",
            "lname": "x-select-font",
            "maxargs": 2,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_select_font"
        },
        {
            "args": [
                "selection",
                "terminal"
            ],
            "attributes": null,
            "doc": "Whether there is an owner for the given X selection.\nSELECTION should be the name of the selection in question, typically\none of the symbols `PRIMARY', `SECONDARY', `CLIPBOARD', or\n`CLIPBOARD_MANAGER' (X expects these literal upper-case names.)  The\nsymbol nil is the same as `PRIMARY', and t is the same as `SECONDARY'.\n\nTERMINAL should be a terminal object or a frame specifying the X\nserver to query.  If omitted or nil, that stands for the selected\nframe's display, or the first available X display.\n\nOn Nextstep, TERMINAL is unused.",
            "fnname": "Fx_selection_exists_p",
            "intspec": "0",
            "lname": "x-selection-exists-p",
            "maxargs": 2,
            "minargs": 0,
            "path": "xselect.c",
            "sname": "Sx_selection_exists_p"
        },
        {
            "args": [
                "selection",
                "terminal"
            ],
            "attributes": null,
            "doc": "Whether the current Emacs process owns the given X Selection.\nThe arg should be the name of the selection in question, typically one of\nthe symbols `PRIMARY', `SECONDARY', or `CLIPBOARD'.\n\\(Those are literal upper-case symbol names, since that's what X expects.)\nFor convenience, the symbol nil is the same as `PRIMARY',\nand t is the same as `SECONDARY'.\n\nTERMINAL should be a terminal object or a frame specifying the X\nserver to query.  If omitted or nil, that stands for the selected\nframe's display, or the first available X display.\n\nOn Nextstep, TERMINAL is unused.",
            "fnname": "Fx_selection_owner_p",
            "intspec": "0",
            "lname": "x-selection-owner-p",
            "maxargs": 2,
            "minargs": 0,
            "path": "xselect.c",
            "sname": "Sx_selection_owner_p"
        },
        {
            "args": [
                "display",
                "dest",
                "from",
                "message_type",
                "format",
                "values"
            ],
            "attributes": null,
            "doc": "Send a client message of MESSAGE-TYPE to window DEST on DISPLAY.\n\nFor DISPLAY, specify either a frame or a display name (a string).\nIf DISPLAY is nil, that stands for the selected frame's display.\nDEST may be a number, in which case it is a Window id.  The value 0 may\nbe used to send to the root window of the DISPLAY.\nIf DEST is a cons, it is converted to a 32 bit number\nwith the high 16 bits from the car and the lower 16 bit from the cdr.  That\nnumber is then used as a window id.\nIf DEST is a frame the event is sent to the outer window of that frame.\nA value of nil means the currently selected frame.\nIf DEST is the string \"PointerWindow\" the event is sent to the window that\ncontains the pointer.  If DEST is the string \"InputFocus\" the event is\nsent to the window that has the input focus.\nFROM is the frame sending the event.  Use nil for currently selected frame.\nMESSAGE-TYPE is the name of an Atom as a string.\nFORMAT must be one of 8, 16 or 32 and determines the size of the values in\nbits.  VALUES is a list of numbers, cons and/or strings containing the values\nto send.  If a value is a string, it is converted to an Atom and the value of\nthe Atom is sent.  If a value is a cons, it is converted to a 32 bit number\nwith the high 16 bits from the car and the lower 16 bit from the cdr.\nIf more values than fits into the event is given, the excessive values\nare ignored.\n\nWait for the event to be sent and signal any error, unless\n`x-fast-protocol-requests' is non-nil, in which case errors will be\nsilently ignored.",
            "fnname": "Fx_send_client_message",
            "intspec": "0",
            "lname": "x-send-client-message",
            "maxargs": 6,
            "minargs": 6,
            "path": "xselect.c",
            "sname": "Sx_send_client_message"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Return the version of the X Input Extension supported by TERMINAL.\nThe value is nil if TERMINAL's X server doesn't support the X Input\nExtension extension, or if Emacs doesn't support the version present\non that server.  Otherwise, the return value is a list of the major\nand minor versions of the X Input Extension extension running on that\nserver.",
            "fnname": "Fx_server_input_extension_version",
            "intspec": "0",
            "lname": "x-server-input-extension-version",
            "maxargs": 1,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_server_input_extension_version"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "This function is a no-op.  It is only present for completeness.\n\nSKIP: real doc in xfns.c.\n\nReturn the maximum request size of the X server of display TERMINAL.\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.\n\nOn MS Windows, this function just returns 1.\nOn Nextstep, this function just returns nil.",
            "fnname": "Fx_server_max_request_size",
            "intspec": "0",
            "lname": "x-server-max-request-size",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sx_server_max_request_size"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "SKIP: real doc in xfns.c.\n\nReturn the \"vendor ID\" string of the GUI software on TERMINAL.\n\n\\(Labeling every distributor as a \"vendor\" embodies the false assumption\nthat operating systems cannot be developed and distributed noncommercially.)\nThe optional argument TERMINAL specifies which display to ask about.\n\nFor GNU and Unix systems, this queries the X server software.\nFor Android systems, value is the manufacturer who developed the Android\nsystem that is being used.\nFor MS Windows and Nextstep the result is hard-coded.\n\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.",
            "fnname": "Fx_server_vendor",
            "intspec": "0",
            "lname": "x-server-vendor",
            "maxargs": 1,
            "minargs": 0,
            "path": "w32fns.c",
            "sname": "Sx_server_vendor"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "SKIP: real doc in xfns.c.\n\nReturn the version numbers of the GUI software on TERMINAL.\nThe value is a list of three integers specifying the version of the GUI\nsoftware in use.\n\nFor GNU and Unix system, the first 2 numbers are the version of the X\nProtocol used on TERMINAL and the 3rd number is the distributor-specific\nrelease number.  For MS Windows, the 3 numbers report the OS major and\nminor version and build number.  For Nextstep, the first 2 numbers are\nhard-coded and the 3rd represents the OS version.  For Haiku, all 3\nnumbers are hard-coded.  For Android, the first number represents the\nAndroid API level, and the next two numbers are all zero.\n\nSee also the function `x-server-vendor'.\n\nThe optional argument TERMINAL specifies which display to ask about.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf omitted or nil, that stands for the selected frame's display.",
            "fnname": "Fx_server_version",
            "intspec": "0",
            "lname": "x-server-version",
            "maxargs": 1,
            "minargs": 0,
            "path": "w32fns.c",
            "sname": "Sx_server_version"
        },
        {
            "args": [
                "x",
                "y"
            ],
            "attributes": null,
            "doc": "Move mouse pointer to absolute pixel position (X, Y).\nThe coordinates X and Y are interpreted in pixels relative to a position\n\\(0, 0) of the selected frame's display.",
            "fnname": "Fx_set_mouse_absolute_pixel_position",
            "intspec": "0",
            "lname": "x-set-mouse-absolute-pixel-position",
            "maxargs": 2,
            "minargs": 2,
            "path": "xfns.c",
            "sname": "Sx_set_mouse_absolute_pixel_position"
        },
        {
            "args": [
                "string",
                "frame",
                "parms",
                "timeout",
                "dx",
                "dy"
            ],
            "attributes": null,
            "doc": "Show STRING in a \"tooltip\" window on frame FRAME.\nA tooltip window is a small X window displaying a string.\n\nThis is an internal function; Lisp code should call `tooltip-show'.\n\nFRAME nil or omitted means use the selected frame.\n\nPARMS is an optional list of frame parameters which can be used to\nchange the tooltip's appearance.\n\nAutomatically hide the tooltip after TIMEOUT seconds.  TIMEOUT nil\nmeans use the default timeout from the `x-show-tooltip-timeout'\nvariable.\n\nIf the list of frame parameters PARMS contains a `left' parameter,\ndisplay the tooltip at that x-position.  If the list of frame parameters\nPARMS contains no `left' but a `right' parameter, display the tooltip\nright-adjusted at that x-position. Otherwise display it at the\nx-position of the mouse, with offset DX added (default is 5 if DX isn't\nspecified).\n\nLikewise for the y-position: If a `top' frame parameter is specified, it\ndetermines the position of the upper edge of the tooltip window.  If a\n`bottom' parameter but no `top' frame parameter is specified, it\ndetermines the position of the lower edge of the tooltip window.\nOtherwise display the tooltip window at the y-position of the mouse,\nwith offset DY added (default is -10).\n\nA tooltip's maximum size is specified by `x-max-tooltip-size'.\nText larger than the specified size is clipped.\n\nSKIP: real doc in xfns.c.\n\nShow STRING in a \"tooltip\" window on frame FRAME.\nA tooltip window is a small X window displaying a string.\n\nThis is an internal function; Lisp code should call `tooltip-show'.\n\nFRAME nil or omitted means use the selected frame.\n\nPARMS is an optional list of frame parameters which can be used to\nchange the tooltip's appearance.\n\nAutomatically hide the tooltip after TIMEOUT seconds.  TIMEOUT nil\nmeans use the default timeout from the `x-show-tooltip-timeout'\nvariable.\n\nIf the list of frame parameters PARMS contains a `left' parameter,\ndisplay the tooltip at that x-position.  If the list of frame parameters\nPARMS contains no `left' but a `right' parameter, display the tooltip\nright-adjusted at that x-position. Otherwise display it at the\nx-position of the mouse, with offset DX added (default is 5 if DX isn't\nspecified).\n\nLikewise for the y-position: If a `top' frame parameter is specified, it\ndetermines the position of the upper edge of the tooltip window.  If a\n`bottom' parameter but no `top' frame parameter is specified, it\ndetermines the position of the lower edge of the tooltip window.\nOtherwise display the tooltip window at the y-position of the mouse,\nwith offset DY added (default is -10).\n\nA tooltip's maximum size is specified by `x-max-tooltip-size'.\nText larger than the specified size is clipped.",
            "fnname": "Fx_show_tip",
            "intspec": "0",
            "lname": "x-show-tip",
            "maxargs": 6,
            "minargs": 1,
            "path": "pgtkfns.c",
            "sname": "Sx_show_tip"
        },
        {
            "args": [
                "on",
                "display"
            ],
            "attributes": null,
            "doc": "SKIP: real doc in xfns.c.\n\nIf ON is non-nil, report X errors as soon as the erring request is made.\nThis function has an effect only on X Windows.  With MS Windows, it is\ndefined but does nothing.\n\nIf ON is nil, allow buffering of requests.\nTurning on synchronization prohibits the Xlib routines from buffering\nrequests and seriously degrades performance, but makes debugging much\neasier.\nThe optional second argument TERMINAL specifies which display to act on.\nTERMINAL should be a terminal object, a frame or a display name (a string).\nIf TERMINAL is omitted or nil, that stands for the selected frame's display.",
            "fnname": "Fx_synchronize",
            "intspec": "0",
            "lname": "x-synchronize",
            "maxargs": 2,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Sx_synchronize"
        },
        {
            "args": [
                "frame",
                "position",
                "direction",
                "operation",
                "factor"
            ],
            "attributes": null,
            "doc": "Perform tests on the XIM string conversion support.",
            "fnname": "Fx_test_string_conversion",
            "intspec": "0",
            "lname": "x-test-string-conversion",
            "maxargs": 5,
            "minargs": 5,
            "path": "xfns.c",
            "sname": "Sx_test_string_conversion"
        },
        {
            "args": [
                "frame",
                "source_window",
                "dest_window",
                "source_x",
                "source_y",
                "require_child"
            ],
            "attributes": null,
            "doc": "Translate coordinates from FRAME.\nTranslate the given coordinates SOURCE-X and SOURCE-Y from\nSOURCE-WINDOW's coordinate space to that of DEST-WINDOW, on FRAME.\n\nIf SOURCE-X and SOURCE-Y are nil, use 0 instead.\n\nFRAME can either be a terminal or a frame.  If nil, it defaults to the\nselected frame.  SOURCE-WINDOW must be an X window ID, 0 (which means\nto use the root window), or nil, which means to use FRAME's inner\nwindow.  DEST-WINDOW must be another X window ID, or nil (which means\nto use the root window).\n\nReturn a list of (X Y CHILD) if the given coordinates are on the same\nscreen, or nil otherwise, where X and Y are the coordinates in\nDEST-WINDOW's coordinate space, and CHILD is the window ID of any\nmapped child in DEST-WINDOW at those coordinates, or nil if there is\nno such window.  If REQUIRE-CHILD is nil, avoid fetching CHILD if it\nwould result in an avoidable request to the X server, thereby\nimproving performance when the X connection is over a slow network.\nOtherwise, always obtain the mapped child window from the X\nserver.",
            "fnname": "Fx_translate_coordinates",
            "intspec": "0",
            "lname": "x-translate-coordinates",
            "maxargs": 6,
            "minargs": 1,
            "path": "xfns.c",
            "sname": "Sx_translate_coordinates"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if the old Gtk+ file selection dialog is used.",
            "fnname": "Fx_uses_old_gtk_dialog",
            "intspec": "0",
            "lname": "x-uses-old-gtk-dialog",
            "maxargs": 0,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_uses_old_gtk_dialog"
        },
        {
            "args": [
                "prop",
                "frame",
                "type",
                "source",
                "delete_p",
                "vector_ret_p"
            ],
            "attributes": null,
            "doc": "SKIP: real doc in xfns.c.\n\nValue is the value of window property PROP on FRAME.\nIf FRAME is nil or omitted, use the selected frame.\n\nOn X Windows, the following optional arguments are also accepted: If\nTYPE is nil or omitted, get the property as a string.  Otherwise TYPE\nis the name of the atom that denotes the expected type.\n\nIf TYPE is the string \"AnyPropertyType\", decode and return the data\nregardless of what the type really is.\n\nThe format of the data returned is the same as a selection conversion\nto the given type.  For example, if `x-get-selection-internal' returns\nan integer when the selection data is a given type,\n`x-window-property' will do the same for that type.\n\nIf WINDOW-ID is non-nil, get the property of that window instead of\nFRAME's X window; the number 0 denotes the root window.  This argument\nis separate from FRAME because window IDs are not unique across X\ndisplays, so FRAME provides context for the window ID.\n\nIf DELETE-P is non-nil, delete the property after retrieving it.\nIf VECTOR-RET-P is non-nil, return a vector of values instead of a string.\n\nX allows an arbitrary number of properties to be set on any window.\nHowever, properties are most often set by the window manager or other\nprograms on the root window or FRAME's X window in order to\ncommunicate information to Emacs and other programs.  Most of these\nproperties are specified as part of the Extended Window Manager Hints\nand the Inter-Client Communication Conventions Manual, which are\nlocated here:\n\n  https://specifications.freedesktop.org/wm-spec/wm-spec-latest.html\n\nand\n\n  https://x.org/releases/X11R7.6/doc/xorg-docs/specs/ICCCM/icccm.html\n\nReturn value is nil if FRAME doesn't have a property with name PROP or\nif PROP has no value of TYPE (always a string in the MS Windows case).",
            "fnname": "Fx_window_property",
            "intspec": "0",
            "lname": "x-window-property",
            "maxargs": 6,
            "minargs": 1,
            "path": "w32fns.c",
            "sname": "Sx_window_property"
        },
        {
            "args": [
                "prop",
                "frame",
                "window_id"
            ],
            "attributes": null,
            "doc": "Retrieve metadata about window property PROP on FRAME.\nIf FRAME is nil or omitted, use the selected frame.\nIf WINDOW-ID is non-nil, get the property of that window instead of\n FRAME's X window; the number 0 denotes the root window.  This\n argument is separate from FRAME because window IDs are not unique\n across X displays or screens on the same display, so FRAME provides\n context for the window ID.\n\nReturn value is nil if FRAME doesn't have a property named PROP.\nOtherwise, the return value is a vector with the following fields:\n\n0. The property type, as an integer.  The symbolic name of\n the type can be obtained with `x-get-atom-name'.\n1. The format of each element; one of 8, 16, or 32.\n2. The length of the property, in number of elements.",
            "fnname": "Fx_window_property_attributes",
            "intspec": "0",
            "lname": "x-window-property-attributes",
            "maxargs": 3,
            "minargs": 1,
            "path": "xfns.c",
            "sname": "Sx_window_property_attributes"
        },
        {
            "args": [
                "frame"
            ],
            "attributes": null,
            "doc": "Send the size hints for frame FRAME to the window manager.\nIf FRAME is omitted or nil, use the selected frame.\nSignal error if FRAME is not an X frame.",
            "fnname": "Fx_wm_set_size_hint",
            "intspec": "0",
            "lname": "x-wm-set-size-hint",
            "maxargs": 1,
            "minargs": 0,
            "path": "xfns.c",
            "sname": "Sx_wm_set_size_hint"
        },
        {
            "args": [
                "color",
                "frame"
            ],
            "attributes": null,
            "doc": "Internal function called by `color-defined-p', which see.\n\nSKIP: real doc in xfns.c.\n\nInternal function called by `color-defined-p'.\n\\(Note that the Nextstep version of this function ignores FRAME.)",
            "fnname": "Fxw_color_defined_p",
            "intspec": "0",
            "lname": "xw-color-defined-p",
            "maxargs": 2,
            "minargs": 1,
            "path": "pgtkfns.c",
            "sname": "Sxw_color_defined_p"
        },
        {
            "args": [
                "color",
                "frame"
            ],
            "attributes": null,
            "doc": "Internal function called by `color-values', which see.\n\nSKIP: real doc in xfns.c.\n\nInternal function called by `color-values'.\n\\(Note that the Nextstep version of this function ignores FRAME.)",
            "fnname": "Fxw_color_values",
            "intspec": "0",
            "lname": "xw-color-values",
            "maxargs": 2,
            "minargs": 1,
            "path": "pgtkfns.c",
            "sname": "Sxw_color_values"
        },
        {
            "args": [
                "terminal"
            ],
            "attributes": null,
            "doc": "Internal function called by `display-color-p', which see.\n\nSKIP: real doc in xfns.c.\n\nInternal function called by `display-color-p'.",
            "fnname": "Fxw_display_color_p",
            "intspec": "0",
            "lname": "xw-display-color-p",
            "maxargs": 1,
            "minargs": 0,
            "path": "pgtkfns.c",
            "sname": "Sxw_display_color_p"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Return the buffer of XWIDGET.",
            "fnname": "Fxwidget_buffer",
            "intspec": "0",
            "lname": "xwidget-buffer",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_buffer"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Return XWIDGET properties in a vector.\nCurrently [TYPE TITLE WIDTH HEIGHT].",
            "fnname": "Fxwidget_info",
            "intspec": "0",
            "lname": "xwidget-info",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_info"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is an xwidget that has not been killed.\nValue is nil if OBJECT is not an xwidget or if it has been killed.",
            "fnname": "Fxwidget_live_p",
            "intspec": "0",
            "lname": "xwidget-live-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_live_p"
        },
        {
            "args": [
                "xwidget",
                "event",
                "frame"
            ],
            "attributes": null,
            "doc": "Send a lispy event to XWIDGET.\nEVENT should be the event that will be sent.  FRAME should be the\nframe which generated the event, and defaults to the selected frame.\nOn X11, modifier keys will not be processed if FRAME is nil and the\nselected frame is not an X-Windows frame.",
            "fnname": "Fxwidget_perform_lispy_event",
            "intspec": "0",
            "lname": "xwidget-perform-lispy-event",
            "maxargs": 3,
            "minargs": 2,
            "path": "xwidget.c",
            "sname": "Sxwidget_perform_lispy_event"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Return the plist of XWIDGET.",
            "fnname": "Fxwidget_plist",
            "intspec": "0",
            "lname": "xwidget-plist",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_plist"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Return the current value of the query-on-exit flag for XWIDGET.",
            "fnname": "Fxwidget_query_on_exit_flag",
            "intspec": "0",
            "lname": "xwidget-query-on-exit-flag",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_query_on_exit_flag"
        },
        {
            "args": [
                "xwidget",
                "new_width",
                "new_height"
            ],
            "attributes": null,
            "doc": "Resize XWIDGET to NEW_WIDTH, NEW_HEIGHT.",
            "fnname": "Fxwidget_resize",
            "intspec": "0",
            "lname": "xwidget-resize",
            "maxargs": 3,
            "minargs": 3,
            "path": "xwidget.c",
            "sname": "Sxwidget_resize"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Return the desired size of the XWIDGET.\nThis can be used to read the xwidget desired size, and resizes the\nEmacs allocated area accordingly.",
            "fnname": "Fxwidget_size_request",
            "intspec": "0",
            "lname": "xwidget-size-request",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_size_request"
        },
        {
            "args": [
                "xwidget_view"
            ],
            "attributes": null,
            "doc": "Return properties of XWIDGET-VIEW in a vector.\nCurrently [X Y CLIP_RIGHT CLIP_BOTTOM CLIP_TOP CLIP_LEFT].",
            "fnname": "Fxwidget_view_info",
            "intspec": "0",
            "lname": "xwidget-view-info",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_view_info"
        },
        {
            "args": [
                "xwidget",
                "window"
            ],
            "attributes": null,
            "doc": "Return the xwidget-view associated with XWIDGET in WINDOW.\nIf WINDOW is unspecified or nil, use the selected window.\nReturn nil if no association is found.",
            "fnname": "Fxwidget_view_lookup",
            "intspec": "0",
            "lname": "xwidget-view-lookup",
            "maxargs": 2,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_view_lookup"
        },
        {
            "args": [
                "xwidget_view"
            ],
            "attributes": null,
            "doc": "Return the model associated with XWIDGET-VIEW.",
            "fnname": "Fxwidget_view_model",
            "intspec": "0",
            "lname": "xwidget-view-model",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_view_model"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is an xwidget-view.",
            "fnname": "Fxwidget_view_p",
            "intspec": "0",
            "lname": "xwidget-view-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_view_p"
        },
        {
            "args": [
                "xwidget_view"
            ],
            "attributes": null,
            "doc": "Return the window of XWIDGET-VIEW.",
            "fnname": "Fxwidget_view_window",
            "intspec": "0",
            "lname": "xwidget-view-window",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_view_window"
        },
        {
            "args": [
                "xwidget",
                "limit"
            ],
            "attributes": null,
            "doc": "Return the navigation history of XWIDGET, a WebKit xwidget.\n\nReturn the history as a list of the form (BACK HERE FORWARD), where\nHERE is the current navigation item, while BACK and FORWARD are lists\nof history items of the form (IDX TITLE URI).  Here, IDX is an index\nthat can be passed to `xwidget-webkit-goto-history', TITLE is a string\ncontaining the human-readable title of the history item, and URI is\nthe URI of the history item.\n\nBACK, HERE, and FORWARD can all be nil depending on the state of the\nnavigation history.\n\nBACK and FORWARD will each not contain more elements than LIMIT.  If\nLIMIT is not specified or nil, it is treated as `50'.",
            "fnname": "Fxwidget_webkit_back_forward_list",
            "intspec": "0",
            "lname": "xwidget-webkit-back-forward-list",
            "maxargs": 2,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_back_forward_list"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Get the estimated load progress of XWIDGET, a WebKit widget.\nReturn a value ranging from 0.0 to 1.0, based on how close XWIDGET\nis to completely loading its page.",
            "fnname": "Fxwidget_webkit_estimated_load_progress",
            "intspec": "0",
            "lname": "xwidget-webkit-estimated-load-progress",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_estimated_load_progress"
        },
        {
            "args": [
                "xwidget",
                "script",
                "fun"
            ],
            "attributes": null,
            "doc": "Make the Webkit XWIDGET execute JavaScript SCRIPT.\nIf FUN is provided, feed the JavaScript return value to the single\nargument procedure FUN.",
            "fnname": "Fxwidget_webkit_execute_script",
            "intspec": "0",
            "lname": "xwidget-webkit-execute-script",
            "maxargs": 3,
            "minargs": 2,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_execute_script"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Finish XWIDGET's search operation.\n\nXWIDGET should be an xwidget that currently has a search query.\nBefore calling this function, you should start a search operation\nusing `xwidget-webkit-search'.",
            "fnname": "Fxwidget_webkit_finish_search",
            "intspec": "0",
            "lname": "xwidget-webkit-finish-search",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_finish_search"
        },
        {
            "args": [
                "xwidget",
                "rel_pos"
            ],
            "attributes": null,
            "doc": "Make the XWIDGET webkit the REL-POSth element in load history.\n\nIf REL-POS is 0, the widget will be just reload the current element in\nhistory.  If REL-POS is more or less than 0, the widget will load the\nREL-POSth element around the current spot in the load history.",
            "fnname": "Fxwidget_webkit_goto_history",
            "intspec": "0",
            "lname": "xwidget-webkit-goto-history",
            "maxargs": 2,
            "minargs": 2,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_goto_history"
        },
        {
            "args": [
                "xwidget",
                "uri"
            ],
            "attributes": null,
            "doc": "Make the xwidget webkit instance referenced by XWIDGET browse URI.",
            "fnname": "Fxwidget_webkit_goto_uri",
            "intspec": "0",
            "lname": "xwidget-webkit-goto-uri",
            "maxargs": 2,
            "minargs": 2,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_goto_uri"
        },
        {
            "args": [
                "xwidget",
                "text",
                "base_uri"
            ],
            "attributes": null,
            "doc": "Make XWIDGET's WebKit widget render TEXT.\nXWIDGET should be a WebKit xwidget, that will receive TEXT.  TEXT\nshould be a string that will be displayed by XWIDGET as HTML markup.\nBASE-URI should be a string containing a URI that is used to locate\nresources with relative URLs, and if not specified, defaults\nto \"about:blank\".",
            "fnname": "Fxwidget_webkit_load_html",
            "intspec": "0",
            "lname": "xwidget-webkit-load-html",
            "maxargs": 3,
            "minargs": 2,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_load_html"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Show the next result matching the current search query.\n\nXWIDGET should be an xwidget that currently has a search query.\nBefore calling this function, you should start a search operation\nusing `xwidget-webkit-search'.",
            "fnname": "Fxwidget_webkit_next_result",
            "intspec": "0",
            "lname": "xwidget-webkit-next-result",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_next_result"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Show the previous result matching the current search query.\n\nXWIDGET should be an xwidget that currently has a search query.\nBefore calling this function, you should start a search operation\nusing `xwidget-webkit-search'.",
            "fnname": "Fxwidget_webkit_previous_result",
            "intspec": "0",
            "lname": "xwidget-webkit-previous-result",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_previous_result"
        },
        {
            "args": [
                "query",
                "xwidget",
                "case_insensitive",
                "backwards",
                "wrap_around"
            ],
            "attributes": null,
            "doc": "Begin an incremental search operation in an xwidget.\nQUERY should be a string containing the text to search for.  XWIDGET\nshould be a WebKit xwidget where the search will take place.  When the\nsearch operation is complete, callers should also call\n`xwidget-webkit-finish-search' to complete the search operation.\n\nCASE-INSENSITIVE, when non-nil, will cause the search to ignore the\ncase of characters inside QUERY.  BACKWARDS, when non-nil, will cause\nthe search to proceed towards the beginning of the widget's contents.\nWRAP-AROUND, when nil, will cause the search to stop upon hitting the\nend of the widget's contents.\n\nIt is OK to call this function even when a search is already in\nprogress.  In that case, the previous search query will be replaced\nwith QUERY.",
            "fnname": "Fxwidget_webkit_search",
            "intspec": "0",
            "lname": "xwidget-webkit-search",
            "maxargs": 5,
            "minargs": 2,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_search"
        },
        {
            "args": [
                "xwidget",
                "file"
            ],
            "attributes": null,
            "doc": "Make the WebKit widget XWIDGET load and store cookies in FILE.\n\nCookies will be stored as plain text in FILE, which must be an\nabsolute file name.  All xwidgets related to XWIDGET will also\nstore cookies in FILE and load them from there.",
            "fnname": "Fxwidget_webkit_set_cookie_storage_file",
            "intspec": "0",
            "lname": "xwidget-webkit-set-cookie-storage-file",
            "maxargs": 2,
            "minargs": 2,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_set_cookie_storage_file"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Stop loading data in the WebKit widget XWIDGET.\nThis will stop any data transfer that may still be in progress inside\nXWIDGET as part of loading a page.",
            "fnname": "Fxwidget_webkit_stop_loading",
            "intspec": "0",
            "lname": "xwidget-webkit-stop-loading",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_stop_loading"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Get the current title of XWIDGET webkit.",
            "fnname": "Fxwidget_webkit_title",
            "intspec": "0",
            "lname": "xwidget-webkit-title",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_title"
        },
        {
            "args": [
                "xwidget"
            ],
            "attributes": null,
            "doc": "Get the current URL of XWIDGET webkit.",
            "fnname": "Fxwidget_webkit_uri",
            "intspec": "0",
            "lname": "xwidget-webkit-uri",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_uri"
        },
        {
            "args": [
                "xwidget",
                "factor"
            ],
            "attributes": null,
            "doc": "Change the zoom factor of the xwidget webkit instance referenced by XWIDGET.",
            "fnname": "Fxwidget_webkit_zoom",
            "intspec": "0",
            "lname": "xwidget-webkit-zoom",
            "maxargs": 2,
            "minargs": 2,
            "path": "xwidget.c",
            "sname": "Sxwidget_webkit_zoom"
        },
        {
            "args": [
                "object"
            ],
            "attributes": null,
            "doc": "Return t if OBJECT is an xwidget.",
            "fnname": "Fxwidgetp",
            "intspec": "0",
            "lname": "xwidgetp",
            "maxargs": 1,
            "minargs": 1,
            "path": "xwidget.c",
            "sname": "Sxwidgetp"
        },
        {
            "args": [
                "prompt"
            ],
            "attributes": null,
            "doc": "Ask user a yes-or-no question.\nReturn t if answer is yes, and nil if the answer is no.\n\nPROMPT is the string to display to ask the question; `yes-or-no-p'\nappends `yes-or-no-prompt' (default \\\"(yes or no) \\\") to it.  If\nPROMPT is a non-empty string, and it ends with a non-space character,\na space character will be appended to it.\n\nThe user must confirm the answer with RET, and can edit it until it\nhas been confirmed.\n\nIf the `use-short-answers' variable is non-nil, instead of asking for\n\\\"yes\\\" or \\\"no\\\", this function will ask for \\\"y\\\" or \\\"n\\\" (and\nignore the value of `yes-or-no-prompt').\n\nIf dialog boxes are supported, this function will use a dialog box\nif `use-dialog-box' is non-nil and the last input event was produced\nby a mouse, or by some window-system gesture, or via a menu.",
            "fnname": "Fyes_or_no_p",
            "intspec": "0",
            "lname": "yes-or-no-p",
            "maxargs": 1,
            "minargs": 1,
            "path": "fns.c",
            "sname": "Syes_or_no_p"
        },
        {
            "args": null,
            "attributes": null,
            "doc": "Return t if zlib decompression is available in this instance of Emacs.",
            "fnname": "Fzlib_available_p",
            "intspec": "0",
            "lname": "zlib-available-p",
            "maxargs": 0,
            "minargs": 0,
            "path": "decompress.c",
            "sname": "Szlib_available_p"
        },
        {
            "args": [
                "start",
                "end",
                "allow_partial"
            ],
            "attributes": null,
            "doc": "Decompress a gzip- or zlib-compressed region.\nReplace the text in the region by the decompressed data.\n\nIf optional parameter ALLOW-PARTIAL is nil or omitted, then on\nfailure, return nil and leave the data in place.  Otherwise, return\nthe number of bytes that were not decompressed and replace the region\ntext by whatever data was successfully decompressed (similar to gzip).\nIf decompression is completely successful return t.\n\nThis function can be called only in unibyte buffers.",
            "fnname": "Fzlib_decompress_region",
            "intspec": "0",
            "lname": "zlib-decompress-region",
            "maxargs": 3,
            "minargs": 2,
            "path": "decompress.c",
            "sname": "Szlib_decompress_region"
        }
    ]
}